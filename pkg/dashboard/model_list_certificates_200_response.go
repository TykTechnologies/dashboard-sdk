/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
	"fmt"
)

// ListCertificates200Response - struct for ListCertificates200Response
type ListCertificates200Response struct {
	CertificateBasics *CertificateBasics
	CertificateList   *CertificateList
}

// CertificateBasicsAsListCertificates200Response is a convenience function that returns CertificateBasics wrapped in ListCertificates200Response
func CertificateBasicsAsListCertificates200Response(v *CertificateBasics) ListCertificates200Response {
	return ListCertificates200Response{
		CertificateBasics: v,
	}
}

// CertificateListAsListCertificates200Response is a convenience function that returns CertificateList wrapped in ListCertificates200Response
func CertificateListAsListCertificates200Response(v *CertificateList) ListCertificates200Response {
	return ListCertificates200Response{
		CertificateList: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListCertificates200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CertificateBasics
	err = newStrictDecoder(data).Decode(&dst.CertificateBasics)
	if err == nil {
		jsonCertificateBasics, _ := json.Marshal(dst.CertificateBasics)
		if string(jsonCertificateBasics) == "{}" { // empty struct
			dst.CertificateBasics = nil
		} else {
			match++
		}
	} else {
		dst.CertificateBasics = nil
	}

	// try to unmarshal data into CertificateList
	err = newStrictDecoder(data).Decode(&dst.CertificateList)
	if err == nil {
		jsonCertificateList, _ := json.Marshal(dst.CertificateList)
		if string(jsonCertificateList) == "{}" { // empty struct
			dst.CertificateList = nil
		} else {
			match++
		}
	} else {
		dst.CertificateList = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CertificateBasics = nil
		dst.CertificateList = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListCertificates200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListCertificates200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListCertificates200Response) MarshalJSON() ([]byte, error) {
	if src.CertificateBasics != nil {
		return json.Marshal(&src.CertificateBasics)
	}

	if src.CertificateList != nil {
		return json.Marshal(&src.CertificateList)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListCertificates200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CertificateBasics != nil {
		return obj.CertificateBasics
	}

	if obj.CertificateList != nil {
		return obj.CertificateList
	}

	// all schemas are nil
	return nil
}

type NullableListCertificates200Response struct {
	value *ListCertificates200Response
	isSet bool
}

func (v NullableListCertificates200Response) Get() *ListCertificates200Response {
	return v.value
}

func (v *NullableListCertificates200Response) Set(val *ListCertificates200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListCertificates200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListCertificates200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCertificates200Response(val *ListCertificates200Response) *NullableListCertificates200Response {
	return &NullableListCertificates200Response{value: val, isSet: true}
}

func (v NullableListCertificates200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCertificates200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
