/*
Tyk Dashboard API

 ## <a name=\"introduction\"></a> Introduction  The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.  A common question around using a database-backed configuration is how to programmatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.  The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).  ## <a name=\"security-hierarchy\"></a> Security Hierarchy  The Dashboard API provides a more structured security layer to managing Tyk nodes.  ### Organisations, APIs and Users  With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming and creating definitions), the following security model is applied to the management of Upstream APIs:  * **Organisations**: All APIs are *owned* by an organisation, this is designated by the 'OrgID' parameter in the API Definition. * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access). * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations. * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation. * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.  In order to use the Dashboard API, you'll need to get the 'Tyk Dashboard API Access Credentials' secret from your user profile on the Dashboard UI.  The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:   authorization: <your-secret>

API version: 5.7.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
	"time"
)

// checks if the ApiDefinitionWrapper type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiDefinitionWrapper{}

// ApiDefinitionWrapper struct for ApiDefinitionWrapper
type ApiDefinitionWrapper struct {
	ApiDefinition   *APIDefinition         `json:"api_definition,omitempty"`
	ApiModel        map[string]interface{} `json:"api_model,omitempty"`
	Categories      []string               `json:"categories,omitempty"`
	CreatedAt       NullableTime           `json:"created_at,omitempty"`
	HookReferences  []HookReference        `json:"hook_references,omitempty"`
	IsSite          *bool                  `json:"is_site,omitempty"`
	Oas             NullableOAS            `json:"oas,omitempty"`
	SortBy          *int32                 `json:"sort_by,omitempty"`
	UpdatedAt       NullableTime           `json:"updated_at,omitempty"`
	UserGroupOwners []string               `json:"user_group_owners,omitempty"`
	UserOwners      []string               `json:"user_owners,omitempty"`
}

// NewApiDefinitionWrapper instantiates a new ApiDefinitionWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiDefinitionWrapper() *ApiDefinitionWrapper {
	this := ApiDefinitionWrapper{}
	return &this
}

// NewApiDefinitionWrapperWithDefaults instantiates a new ApiDefinitionWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiDefinitionWrapperWithDefaults() *ApiDefinitionWrapper {
	this := ApiDefinitionWrapper{}
	return &this
}

// GetApiDefinition returns the ApiDefinition field value if set, zero value otherwise.
func (o *ApiDefinitionWrapper) GetApiDefinition() APIDefinition {
	if o == nil || IsNil(o.ApiDefinition) {
		var ret APIDefinition
		return ret
	}
	return *o.ApiDefinition
}

// GetApiDefinitionOk returns a tuple with the ApiDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDefinitionWrapper) GetApiDefinitionOk() (*APIDefinition, bool) {
	if o == nil || IsNil(o.ApiDefinition) {
		return nil, false
	}
	return o.ApiDefinition, true
}

// HasApiDefinition returns a boolean if a field has been set.
func (o *ApiDefinitionWrapper) HasApiDefinition() bool {
	if o != nil && !IsNil(o.ApiDefinition) {
		return true
	}

	return false
}

// SetApiDefinition gets a reference to the given APIDefinition and assigns it to the ApiDefinition field.
func (o *ApiDefinitionWrapper) SetApiDefinition(v APIDefinition) {
	o.ApiDefinition = &v
}

// GetApiModel returns the ApiModel field value if set, zero value otherwise.
func (o *ApiDefinitionWrapper) GetApiModel() map[string]interface{} {
	if o == nil || IsNil(o.ApiModel) {
		var ret map[string]interface{}
		return ret
	}
	return o.ApiModel
}

// GetApiModelOk returns a tuple with the ApiModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDefinitionWrapper) GetApiModelOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ApiModel) {
		return map[string]interface{}{}, false
	}
	return o.ApiModel, true
}

// HasApiModel returns a boolean if a field has been set.
func (o *ApiDefinitionWrapper) HasApiModel() bool {
	if o != nil && !IsNil(o.ApiModel) {
		return true
	}

	return false
}

// SetApiModel gets a reference to the given map[string]interface{} and assigns it to the ApiModel field.
func (o *ApiDefinitionWrapper) SetApiModel(v map[string]interface{}) {
	o.ApiModel = v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *ApiDefinitionWrapper) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDefinitionWrapper) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *ApiDefinitionWrapper) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *ApiDefinitionWrapper) SetCategories(v []string) {
	o.Categories = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiDefinitionWrapper) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiDefinitionWrapper) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ApiDefinitionWrapper) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableTime and assigns it to the CreatedAt field.
func (o *ApiDefinitionWrapper) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *ApiDefinitionWrapper) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *ApiDefinitionWrapper) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetHookReferences returns the HookReferences field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiDefinitionWrapper) GetHookReferences() []HookReference {
	if o == nil {
		var ret []HookReference
		return ret
	}
	return o.HookReferences
}

// GetHookReferencesOk returns a tuple with the HookReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiDefinitionWrapper) GetHookReferencesOk() ([]HookReference, bool) {
	if o == nil || IsNil(o.HookReferences) {
		return nil, false
	}
	return o.HookReferences, true
}

// HasHookReferences returns a boolean if a field has been set.
func (o *ApiDefinitionWrapper) HasHookReferences() bool {
	if o != nil && !IsNil(o.HookReferences) {
		return true
	}

	return false
}

// SetHookReferences gets a reference to the given []HookReference and assigns it to the HookReferences field.
func (o *ApiDefinitionWrapper) SetHookReferences(v []HookReference) {
	o.HookReferences = v
}

// GetIsSite returns the IsSite field value if set, zero value otherwise.
func (o *ApiDefinitionWrapper) GetIsSite() bool {
	if o == nil || IsNil(o.IsSite) {
		var ret bool
		return ret
	}
	return *o.IsSite
}

// GetIsSiteOk returns a tuple with the IsSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDefinitionWrapper) GetIsSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSite) {
		return nil, false
	}
	return o.IsSite, true
}

// HasIsSite returns a boolean if a field has been set.
func (o *ApiDefinitionWrapper) HasIsSite() bool {
	if o != nil && !IsNil(o.IsSite) {
		return true
	}

	return false
}

// SetIsSite gets a reference to the given bool and assigns it to the IsSite field.
func (o *ApiDefinitionWrapper) SetIsSite(v bool) {
	o.IsSite = &v
}

// GetOas returns the Oas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiDefinitionWrapper) GetOas() OAS {
	if o == nil || IsNil(o.Oas.Get()) {
		var ret OAS
		return ret
	}
	return *o.Oas.Get()
}

// GetOasOk returns a tuple with the Oas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiDefinitionWrapper) GetOasOk() (*OAS, bool) {
	if o == nil {
		return nil, false
	}
	return o.Oas.Get(), o.Oas.IsSet()
}

// HasOas returns a boolean if a field has been set.
func (o *ApiDefinitionWrapper) HasOas() bool {
	if o != nil && o.Oas.IsSet() {
		return true
	}

	return false
}

// SetOas gets a reference to the given NullableOAS and assigns it to the Oas field.
func (o *ApiDefinitionWrapper) SetOas(v OAS) {
	o.Oas.Set(&v)
}

// SetOasNil sets the value for Oas to be an explicit nil
func (o *ApiDefinitionWrapper) SetOasNil() {
	o.Oas.Set(nil)
}

// UnsetOas ensures that no value is present for Oas, not even an explicit nil
func (o *ApiDefinitionWrapper) UnsetOas() {
	o.Oas.Unset()
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *ApiDefinitionWrapper) GetSortBy() int32 {
	if o == nil || IsNil(o.SortBy) {
		var ret int32
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDefinitionWrapper) GetSortByOk() (*int32, bool) {
	if o == nil || IsNil(o.SortBy) {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *ApiDefinitionWrapper) HasSortBy() bool {
	if o != nil && !IsNil(o.SortBy) {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given int32 and assigns it to the SortBy field.
func (o *ApiDefinitionWrapper) SetSortBy(v int32) {
	o.SortBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiDefinitionWrapper) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiDefinitionWrapper) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ApiDefinitionWrapper) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *ApiDefinitionWrapper) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *ApiDefinitionWrapper) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *ApiDefinitionWrapper) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetUserGroupOwners returns the UserGroupOwners field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiDefinitionWrapper) GetUserGroupOwners() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UserGroupOwners
}

// GetUserGroupOwnersOk returns a tuple with the UserGroupOwners field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiDefinitionWrapper) GetUserGroupOwnersOk() ([]string, bool) {
	if o == nil || IsNil(o.UserGroupOwners) {
		return nil, false
	}
	return o.UserGroupOwners, true
}

// HasUserGroupOwners returns a boolean if a field has been set.
func (o *ApiDefinitionWrapper) HasUserGroupOwners() bool {
	if o != nil && !IsNil(o.UserGroupOwners) {
		return true
	}

	return false
}

// SetUserGroupOwners gets a reference to the given []string and assigns it to the UserGroupOwners field.
func (o *ApiDefinitionWrapper) SetUserGroupOwners(v []string) {
	o.UserGroupOwners = v
}

// GetUserOwners returns the UserOwners field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiDefinitionWrapper) GetUserOwners() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UserOwners
}

// GetUserOwnersOk returns a tuple with the UserOwners field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiDefinitionWrapper) GetUserOwnersOk() ([]string, bool) {
	if o == nil || IsNil(o.UserOwners) {
		return nil, false
	}
	return o.UserOwners, true
}

// HasUserOwners returns a boolean if a field has been set.
func (o *ApiDefinitionWrapper) HasUserOwners() bool {
	if o != nil && !IsNil(o.UserOwners) {
		return true
	}

	return false
}

// SetUserOwners gets a reference to the given []string and assigns it to the UserOwners field.
func (o *ApiDefinitionWrapper) SetUserOwners(v []string) {
	o.UserOwners = v
}

func (o ApiDefinitionWrapper) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiDefinitionWrapper) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiDefinition) {
		toSerialize["api_definition"] = o.ApiDefinition
	}
	if !IsNil(o.ApiModel) {
		toSerialize["api_model"] = o.ApiModel
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if o.CreatedAt.IsSet() {
		toSerialize["created_at"] = o.CreatedAt.Get()
	}
	if o.HookReferences != nil {
		toSerialize["hook_references"] = o.HookReferences
	}
	if !IsNil(o.IsSite) {
		toSerialize["is_site"] = o.IsSite
	}
	if o.Oas.IsSet() {
		toSerialize["oas"] = o.Oas.Get()
	}
	if !IsNil(o.SortBy) {
		toSerialize["sort_by"] = o.SortBy
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["updated_at"] = o.UpdatedAt.Get()
	}
	if o.UserGroupOwners != nil {
		toSerialize["user_group_owners"] = o.UserGroupOwners
	}
	if o.UserOwners != nil {
		toSerialize["user_owners"] = o.UserOwners
	}
	return toSerialize, nil
}

type NullableApiDefinitionWrapper struct {
	value *ApiDefinitionWrapper
	isSet bool
}

func (v NullableApiDefinitionWrapper) Get() *ApiDefinitionWrapper {
	return v.value
}

func (v *NullableApiDefinitionWrapper) Set(val *ApiDefinitionWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableApiDefinitionWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableApiDefinitionWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiDefinitionWrapper(val *ApiDefinitionWrapper) *NullableApiDefinitionWrapper {
	return &NullableApiDefinitionWrapper{value: val, isSet: true}
}

func (v NullableApiDefinitionWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiDefinitionWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
