/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the APIDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &APIDescription{}

// APIDescription struct for APIDescription
type APIDescription struct {
	ApiId            *string           `json:"api_id,omitempty"`
	AuthType         *string           `json:"auth_type,omitempty"`
	Config           *PortalConfig     `json:"config,omitempty"`
	Documentation    *string           `json:"documentation,omitempty"`
	Fields           map[string]string `json:"fields,omitempty"`
	IsKeyless        *bool             `json:"is_keyless,omitempty"`
	LongDescription  *string           `json:"long_description,omitempty"`
	Name             *string           `json:"name,omitempty"`
	PolicyId         *string           `json:"policy_id,omitempty"`
	ShortDescription *string           `json:"short_description,omitempty"`
	Show             *bool             `json:"show,omitempty"`
	Version          *string           `json:"version,omitempty"`
}

// NewAPIDescription instantiates a new APIDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAPIDescription() *APIDescription {
	this := APIDescription{}
	return &this
}

// NewAPIDescriptionWithDefaults instantiates a new APIDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAPIDescriptionWithDefaults() *APIDescription {
	this := APIDescription{}
	return &this
}

// GetApiId returns the ApiId field value if set, zero value otherwise.
func (o *APIDescription) GetApiId() string {
	if o == nil || IsNil(o.ApiId) {
		var ret string
		return ret
	}
	return *o.ApiId
}

// GetApiIdOk returns a tuple with the ApiId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDescription) GetApiIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApiId) {
		return nil, false
	}
	return o.ApiId, true
}

// HasApiId returns a boolean if a field has been set.
func (o *APIDescription) HasApiId() bool {
	if o != nil && !IsNil(o.ApiId) {
		return true
	}

	return false
}

// SetApiId gets a reference to the given string and assigns it to the ApiId field.
func (o *APIDescription) SetApiId(v string) {
	o.ApiId = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *APIDescription) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDescription) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *APIDescription) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *APIDescription) SetAuthType(v string) {
	o.AuthType = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *APIDescription) GetConfig() PortalConfig {
	if o == nil || IsNil(o.Config) {
		var ret PortalConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDescription) GetConfigOk() (*PortalConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *APIDescription) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given PortalConfig and assigns it to the Config field.
func (o *APIDescription) SetConfig(v PortalConfig) {
	o.Config = &v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *APIDescription) GetDocumentation() string {
	if o == nil || IsNil(o.Documentation) {
		var ret string
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDescription) GetDocumentationOk() (*string, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *APIDescription) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given string and assigns it to the Documentation field.
func (o *APIDescription) SetDocumentation(v string) {
	o.Documentation = &v
}

// GetFields returns the Fields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *APIDescription) GetFields() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *APIDescription) GetFieldsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return &o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *APIDescription) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]string and assigns it to the Fields field.
func (o *APIDescription) SetFields(v map[string]string) {
	o.Fields = v
}

// GetIsKeyless returns the IsKeyless field value if set, zero value otherwise.
func (o *APIDescription) GetIsKeyless() bool {
	if o == nil || IsNil(o.IsKeyless) {
		var ret bool
		return ret
	}
	return *o.IsKeyless
}

// GetIsKeylessOk returns a tuple with the IsKeyless field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDescription) GetIsKeylessOk() (*bool, bool) {
	if o == nil || IsNil(o.IsKeyless) {
		return nil, false
	}
	return o.IsKeyless, true
}

// HasIsKeyless returns a boolean if a field has been set.
func (o *APIDescription) HasIsKeyless() bool {
	if o != nil && !IsNil(o.IsKeyless) {
		return true
	}

	return false
}

// SetIsKeyless gets a reference to the given bool and assigns it to the IsKeyless field.
func (o *APIDescription) SetIsKeyless(v bool) {
	o.IsKeyless = &v
}

// GetLongDescription returns the LongDescription field value if set, zero value otherwise.
func (o *APIDescription) GetLongDescription() string {
	if o == nil || IsNil(o.LongDescription) {
		var ret string
		return ret
	}
	return *o.LongDescription
}

// GetLongDescriptionOk returns a tuple with the LongDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDescription) GetLongDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.LongDescription) {
		return nil, false
	}
	return o.LongDescription, true
}

// HasLongDescription returns a boolean if a field has been set.
func (o *APIDescription) HasLongDescription() bool {
	if o != nil && !IsNil(o.LongDescription) {
		return true
	}

	return false
}

// SetLongDescription gets a reference to the given string and assigns it to the LongDescription field.
func (o *APIDescription) SetLongDescription(v string) {
	o.LongDescription = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *APIDescription) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDescription) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *APIDescription) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *APIDescription) SetName(v string) {
	o.Name = &v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *APIDescription) GetPolicyId() string {
	if o == nil || IsNil(o.PolicyId) {
		var ret string
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDescription) GetPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyId) {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *APIDescription) HasPolicyId() bool {
	if o != nil && !IsNil(o.PolicyId) {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given string and assigns it to the PolicyId field.
func (o *APIDescription) SetPolicyId(v string) {
	o.PolicyId = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *APIDescription) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDescription) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *APIDescription) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *APIDescription) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetShow returns the Show field value if set, zero value otherwise.
func (o *APIDescription) GetShow() bool {
	if o == nil || IsNil(o.Show) {
		var ret bool
		return ret
	}
	return *o.Show
}

// GetShowOk returns a tuple with the Show field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDescription) GetShowOk() (*bool, bool) {
	if o == nil || IsNil(o.Show) {
		return nil, false
	}
	return o.Show, true
}

// HasShow returns a boolean if a field has been set.
func (o *APIDescription) HasShow() bool {
	if o != nil && !IsNil(o.Show) {
		return true
	}

	return false
}

// SetShow gets a reference to the given bool and assigns it to the Show field.
func (o *APIDescription) SetShow(v bool) {
	o.Show = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *APIDescription) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDescription) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *APIDescription) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *APIDescription) SetVersion(v string) {
	o.Version = &v
}

func (o APIDescription) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o APIDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiId) {
		toSerialize["api_id"] = o.ApiId
	}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.IsKeyless) {
		toSerialize["is_keyless"] = o.IsKeyless
	}
	if !IsNil(o.LongDescription) {
		toSerialize["long_description"] = o.LongDescription
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PolicyId) {
		toSerialize["policy_id"] = o.PolicyId
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["short_description"] = o.ShortDescription
	}
	if !IsNil(o.Show) {
		toSerialize["show"] = o.Show
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAPIDescription struct {
	value *APIDescription
	isSet bool
}

func (v NullableAPIDescription) Get() *APIDescription {
	return v.value
}

func (v *NullableAPIDescription) Set(val *APIDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIDescription(val *APIDescription) *NullableAPIDescription {
	return &NullableAPIDescription{value: val, isSet: true}
}

func (v NullableAPIDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
