/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the OasOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OasOperation{}

// OasOperation struct for OasOperation
type OasOperation struct {
	Allow                    *OasAllowance              `json:"allow,omitempty"`
	Block                    *OasAllowance              `json:"block,omitempty"`
	Cache                    *OasCachePlugin            `json:"cache,omitempty"`
	CircuitBreaker           *OasCircuitBreaker         `json:"circuitBreaker,omitempty"`
	DoNotTrackEndpoint       *OasTrackEndpoint          `json:"doNotTrackEndpoint,omitempty"`
	EnforceTimeout           *OasEnforceTimeout         `json:"enforceTimeout,omitempty"`
	IgnoreAuthentication     *OasAllowance              `json:"ignoreAuthentication,omitempty"`
	Internal                 *OasInternal               `json:"internal,omitempty"`
	MockResponse             *OasMockResponse           `json:"mockResponse,omitempty"`
	PostPlugins              []OasEndpointPostPlugin    `json:"postPlugins,omitempty"`
	RequestSizeLimit         *OasRequestSizeLimit       `json:"requestSizeLimit,omitempty"`
	TrackEndpoint            *OasTrackEndpoint          `json:"trackEndpoint,omitempty"`
	TransformRequestBody     *OasTransformBody          `json:"transformRequestBody,omitempty"`
	TransformRequestHeaders  *OasTransformHeaders       `json:"transformRequestHeaders,omitempty"`
	TransformRequestMethod   *OasTransformRequestMethod `json:"transformRequestMethod,omitempty"`
	TransformResponseBody    *OasTransformBody          `json:"transformResponseBody,omitempty"`
	TransformResponseHeaders *OasTransformHeaders       `json:"transformResponseHeaders,omitempty"`
	UrlRewrite               *OasURLRewrite             `json:"urlRewrite,omitempty"`
	ValidateRequest          *OasValidateRequest        `json:"validateRequest,omitempty"`
	VirtualEndpoint          *OasVirtualEndpoint        `json:"virtualEndpoint,omitempty"`
}

// NewOasOperation instantiates a new OasOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOasOperation() *OasOperation {
	this := OasOperation{}
	return &this
}

// NewOasOperationWithDefaults instantiates a new OasOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOasOperationWithDefaults() *OasOperation {
	this := OasOperation{}
	return &this
}

// GetAllow returns the Allow field value if set, zero value otherwise.
func (o *OasOperation) GetAllow() OasAllowance {
	if o == nil || IsNil(o.Allow) {
		var ret OasAllowance
		return ret
	}
	return *o.Allow
}

// GetAllowOk returns a tuple with the Allow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetAllowOk() (*OasAllowance, bool) {
	if o == nil || IsNil(o.Allow) {
		return nil, false
	}
	return o.Allow, true
}

// HasAllow returns a boolean if a field has been set.
func (o *OasOperation) HasAllow() bool {
	if o != nil && !IsNil(o.Allow) {
		return true
	}

	return false
}

// SetAllow gets a reference to the given OasAllowance and assigns it to the Allow field.
func (o *OasOperation) SetAllow(v OasAllowance) {
	o.Allow = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *OasOperation) GetBlock() OasAllowance {
	if o == nil || IsNil(o.Block) {
		var ret OasAllowance
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetBlockOk() (*OasAllowance, bool) {
	if o == nil || IsNil(o.Block) {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *OasOperation) HasBlock() bool {
	if o != nil && !IsNil(o.Block) {
		return true
	}

	return false
}

// SetBlock gets a reference to the given OasAllowance and assigns it to the Block field.
func (o *OasOperation) SetBlock(v OasAllowance) {
	o.Block = &v
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *OasOperation) GetCache() OasCachePlugin {
	if o == nil || IsNil(o.Cache) {
		var ret OasCachePlugin
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetCacheOk() (*OasCachePlugin, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *OasOperation) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given OasCachePlugin and assigns it to the Cache field.
func (o *OasOperation) SetCache(v OasCachePlugin) {
	o.Cache = &v
}

// GetCircuitBreaker returns the CircuitBreaker field value if set, zero value otherwise.
func (o *OasOperation) GetCircuitBreaker() OasCircuitBreaker {
	if o == nil || IsNil(o.CircuitBreaker) {
		var ret OasCircuitBreaker
		return ret
	}
	return *o.CircuitBreaker
}

// GetCircuitBreakerOk returns a tuple with the CircuitBreaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetCircuitBreakerOk() (*OasCircuitBreaker, bool) {
	if o == nil || IsNil(o.CircuitBreaker) {
		return nil, false
	}
	return o.CircuitBreaker, true
}

// HasCircuitBreaker returns a boolean if a field has been set.
func (o *OasOperation) HasCircuitBreaker() bool {
	if o != nil && !IsNil(o.CircuitBreaker) {
		return true
	}

	return false
}

// SetCircuitBreaker gets a reference to the given OasCircuitBreaker and assigns it to the CircuitBreaker field.
func (o *OasOperation) SetCircuitBreaker(v OasCircuitBreaker) {
	o.CircuitBreaker = &v
}

// GetDoNotTrackEndpoint returns the DoNotTrackEndpoint field value if set, zero value otherwise.
func (o *OasOperation) GetDoNotTrackEndpoint() OasTrackEndpoint {
	if o == nil || IsNil(o.DoNotTrackEndpoint) {
		var ret OasTrackEndpoint
		return ret
	}
	return *o.DoNotTrackEndpoint
}

// GetDoNotTrackEndpointOk returns a tuple with the DoNotTrackEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetDoNotTrackEndpointOk() (*OasTrackEndpoint, bool) {
	if o == nil || IsNil(o.DoNotTrackEndpoint) {
		return nil, false
	}
	return o.DoNotTrackEndpoint, true
}

// HasDoNotTrackEndpoint returns a boolean if a field has been set.
func (o *OasOperation) HasDoNotTrackEndpoint() bool {
	if o != nil && !IsNil(o.DoNotTrackEndpoint) {
		return true
	}

	return false
}

// SetDoNotTrackEndpoint gets a reference to the given OasTrackEndpoint and assigns it to the DoNotTrackEndpoint field.
func (o *OasOperation) SetDoNotTrackEndpoint(v OasTrackEndpoint) {
	o.DoNotTrackEndpoint = &v
}

// GetEnforceTimeout returns the EnforceTimeout field value if set, zero value otherwise.
func (o *OasOperation) GetEnforceTimeout() OasEnforceTimeout {
	if o == nil || IsNil(o.EnforceTimeout) {
		var ret OasEnforceTimeout
		return ret
	}
	return *o.EnforceTimeout
}

// GetEnforceTimeoutOk returns a tuple with the EnforceTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetEnforceTimeoutOk() (*OasEnforceTimeout, bool) {
	if o == nil || IsNil(o.EnforceTimeout) {
		return nil, false
	}
	return o.EnforceTimeout, true
}

// HasEnforceTimeout returns a boolean if a field has been set.
func (o *OasOperation) HasEnforceTimeout() bool {
	if o != nil && !IsNil(o.EnforceTimeout) {
		return true
	}

	return false
}

// SetEnforceTimeout gets a reference to the given OasEnforceTimeout and assigns it to the EnforceTimeout field.
func (o *OasOperation) SetEnforceTimeout(v OasEnforceTimeout) {
	o.EnforceTimeout = &v
}

// GetIgnoreAuthentication returns the IgnoreAuthentication field value if set, zero value otherwise.
func (o *OasOperation) GetIgnoreAuthentication() OasAllowance {
	if o == nil || IsNil(o.IgnoreAuthentication) {
		var ret OasAllowance
		return ret
	}
	return *o.IgnoreAuthentication
}

// GetIgnoreAuthenticationOk returns a tuple with the IgnoreAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetIgnoreAuthenticationOk() (*OasAllowance, bool) {
	if o == nil || IsNil(o.IgnoreAuthentication) {
		return nil, false
	}
	return o.IgnoreAuthentication, true
}

// HasIgnoreAuthentication returns a boolean if a field has been set.
func (o *OasOperation) HasIgnoreAuthentication() bool {
	if o != nil && !IsNil(o.IgnoreAuthentication) {
		return true
	}

	return false
}

// SetIgnoreAuthentication gets a reference to the given OasAllowance and assigns it to the IgnoreAuthentication field.
func (o *OasOperation) SetIgnoreAuthentication(v OasAllowance) {
	o.IgnoreAuthentication = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *OasOperation) GetInternal() OasInternal {
	if o == nil || IsNil(o.Internal) {
		var ret OasInternal
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetInternalOk() (*OasInternal, bool) {
	if o == nil || IsNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *OasOperation) HasInternal() bool {
	if o != nil && !IsNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given OasInternal and assigns it to the Internal field.
func (o *OasOperation) SetInternal(v OasInternal) {
	o.Internal = &v
}

// GetMockResponse returns the MockResponse field value if set, zero value otherwise.
func (o *OasOperation) GetMockResponse() OasMockResponse {
	if o == nil || IsNil(o.MockResponse) {
		var ret OasMockResponse
		return ret
	}
	return *o.MockResponse
}

// GetMockResponseOk returns a tuple with the MockResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetMockResponseOk() (*OasMockResponse, bool) {
	if o == nil || IsNil(o.MockResponse) {
		return nil, false
	}
	return o.MockResponse, true
}

// HasMockResponse returns a boolean if a field has been set.
func (o *OasOperation) HasMockResponse() bool {
	if o != nil && !IsNil(o.MockResponse) {
		return true
	}

	return false
}

// SetMockResponse gets a reference to the given OasMockResponse and assigns it to the MockResponse field.
func (o *OasOperation) SetMockResponse(v OasMockResponse) {
	o.MockResponse = &v
}

// GetPostPlugins returns the PostPlugins field value if set, zero value otherwise.
func (o *OasOperation) GetPostPlugins() []OasEndpointPostPlugin {
	if o == nil || IsNil(o.PostPlugins) {
		var ret []OasEndpointPostPlugin
		return ret
	}
	return o.PostPlugins
}

// GetPostPluginsOk returns a tuple with the PostPlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetPostPluginsOk() ([]OasEndpointPostPlugin, bool) {
	if o == nil || IsNil(o.PostPlugins) {
		return nil, false
	}
	return o.PostPlugins, true
}

// HasPostPlugins returns a boolean if a field has been set.
func (o *OasOperation) HasPostPlugins() bool {
	if o != nil && !IsNil(o.PostPlugins) {
		return true
	}

	return false
}

// SetPostPlugins gets a reference to the given []OasEndpointPostPlugin and assigns it to the PostPlugins field.
func (o *OasOperation) SetPostPlugins(v []OasEndpointPostPlugin) {
	o.PostPlugins = v
}

// GetRequestSizeLimit returns the RequestSizeLimit field value if set, zero value otherwise.
func (o *OasOperation) GetRequestSizeLimit() OasRequestSizeLimit {
	if o == nil || IsNil(o.RequestSizeLimit) {
		var ret OasRequestSizeLimit
		return ret
	}
	return *o.RequestSizeLimit
}

// GetRequestSizeLimitOk returns a tuple with the RequestSizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetRequestSizeLimitOk() (*OasRequestSizeLimit, bool) {
	if o == nil || IsNil(o.RequestSizeLimit) {
		return nil, false
	}
	return o.RequestSizeLimit, true
}

// HasRequestSizeLimit returns a boolean if a field has been set.
func (o *OasOperation) HasRequestSizeLimit() bool {
	if o != nil && !IsNil(o.RequestSizeLimit) {
		return true
	}

	return false
}

// SetRequestSizeLimit gets a reference to the given OasRequestSizeLimit and assigns it to the RequestSizeLimit field.
func (o *OasOperation) SetRequestSizeLimit(v OasRequestSizeLimit) {
	o.RequestSizeLimit = &v
}

// GetTrackEndpoint returns the TrackEndpoint field value if set, zero value otherwise.
func (o *OasOperation) GetTrackEndpoint() OasTrackEndpoint {
	if o == nil || IsNil(o.TrackEndpoint) {
		var ret OasTrackEndpoint
		return ret
	}
	return *o.TrackEndpoint
}

// GetTrackEndpointOk returns a tuple with the TrackEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetTrackEndpointOk() (*OasTrackEndpoint, bool) {
	if o == nil || IsNil(o.TrackEndpoint) {
		return nil, false
	}
	return o.TrackEndpoint, true
}

// HasTrackEndpoint returns a boolean if a field has been set.
func (o *OasOperation) HasTrackEndpoint() bool {
	if o != nil && !IsNil(o.TrackEndpoint) {
		return true
	}

	return false
}

// SetTrackEndpoint gets a reference to the given OasTrackEndpoint and assigns it to the TrackEndpoint field.
func (o *OasOperation) SetTrackEndpoint(v OasTrackEndpoint) {
	o.TrackEndpoint = &v
}

// GetTransformRequestBody returns the TransformRequestBody field value if set, zero value otherwise.
func (o *OasOperation) GetTransformRequestBody() OasTransformBody {
	if o == nil || IsNil(o.TransformRequestBody) {
		var ret OasTransformBody
		return ret
	}
	return *o.TransformRequestBody
}

// GetTransformRequestBodyOk returns a tuple with the TransformRequestBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetTransformRequestBodyOk() (*OasTransformBody, bool) {
	if o == nil || IsNil(o.TransformRequestBody) {
		return nil, false
	}
	return o.TransformRequestBody, true
}

// HasTransformRequestBody returns a boolean if a field has been set.
func (o *OasOperation) HasTransformRequestBody() bool {
	if o != nil && !IsNil(o.TransformRequestBody) {
		return true
	}

	return false
}

// SetTransformRequestBody gets a reference to the given OasTransformBody and assigns it to the TransformRequestBody field.
func (o *OasOperation) SetTransformRequestBody(v OasTransformBody) {
	o.TransformRequestBody = &v
}

// GetTransformRequestHeaders returns the TransformRequestHeaders field value if set, zero value otherwise.
func (o *OasOperation) GetTransformRequestHeaders() OasTransformHeaders {
	if o == nil || IsNil(o.TransformRequestHeaders) {
		var ret OasTransformHeaders
		return ret
	}
	return *o.TransformRequestHeaders
}

// GetTransformRequestHeadersOk returns a tuple with the TransformRequestHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetTransformRequestHeadersOk() (*OasTransformHeaders, bool) {
	if o == nil || IsNil(o.TransformRequestHeaders) {
		return nil, false
	}
	return o.TransformRequestHeaders, true
}

// HasTransformRequestHeaders returns a boolean if a field has been set.
func (o *OasOperation) HasTransformRequestHeaders() bool {
	if o != nil && !IsNil(o.TransformRequestHeaders) {
		return true
	}

	return false
}

// SetTransformRequestHeaders gets a reference to the given OasTransformHeaders and assigns it to the TransformRequestHeaders field.
func (o *OasOperation) SetTransformRequestHeaders(v OasTransformHeaders) {
	o.TransformRequestHeaders = &v
}

// GetTransformRequestMethod returns the TransformRequestMethod field value if set, zero value otherwise.
func (o *OasOperation) GetTransformRequestMethod() OasTransformRequestMethod {
	if o == nil || IsNil(o.TransformRequestMethod) {
		var ret OasTransformRequestMethod
		return ret
	}
	return *o.TransformRequestMethod
}

// GetTransformRequestMethodOk returns a tuple with the TransformRequestMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetTransformRequestMethodOk() (*OasTransformRequestMethod, bool) {
	if o == nil || IsNil(o.TransformRequestMethod) {
		return nil, false
	}
	return o.TransformRequestMethod, true
}

// HasTransformRequestMethod returns a boolean if a field has been set.
func (o *OasOperation) HasTransformRequestMethod() bool {
	if o != nil && !IsNil(o.TransformRequestMethod) {
		return true
	}

	return false
}

// SetTransformRequestMethod gets a reference to the given OasTransformRequestMethod and assigns it to the TransformRequestMethod field.
func (o *OasOperation) SetTransformRequestMethod(v OasTransformRequestMethod) {
	o.TransformRequestMethod = &v
}

// GetTransformResponseBody returns the TransformResponseBody field value if set, zero value otherwise.
func (o *OasOperation) GetTransformResponseBody() OasTransformBody {
	if o == nil || IsNil(o.TransformResponseBody) {
		var ret OasTransformBody
		return ret
	}
	return *o.TransformResponseBody
}

// GetTransformResponseBodyOk returns a tuple with the TransformResponseBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetTransformResponseBodyOk() (*OasTransformBody, bool) {
	if o == nil || IsNil(o.TransformResponseBody) {
		return nil, false
	}
	return o.TransformResponseBody, true
}

// HasTransformResponseBody returns a boolean if a field has been set.
func (o *OasOperation) HasTransformResponseBody() bool {
	if o != nil && !IsNil(o.TransformResponseBody) {
		return true
	}

	return false
}

// SetTransformResponseBody gets a reference to the given OasTransformBody and assigns it to the TransformResponseBody field.
func (o *OasOperation) SetTransformResponseBody(v OasTransformBody) {
	o.TransformResponseBody = &v
}

// GetTransformResponseHeaders returns the TransformResponseHeaders field value if set, zero value otherwise.
func (o *OasOperation) GetTransformResponseHeaders() OasTransformHeaders {
	if o == nil || IsNil(o.TransformResponseHeaders) {
		var ret OasTransformHeaders
		return ret
	}
	return *o.TransformResponseHeaders
}

// GetTransformResponseHeadersOk returns a tuple with the TransformResponseHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetTransformResponseHeadersOk() (*OasTransformHeaders, bool) {
	if o == nil || IsNil(o.TransformResponseHeaders) {
		return nil, false
	}
	return o.TransformResponseHeaders, true
}

// HasTransformResponseHeaders returns a boolean if a field has been set.
func (o *OasOperation) HasTransformResponseHeaders() bool {
	if o != nil && !IsNil(o.TransformResponseHeaders) {
		return true
	}

	return false
}

// SetTransformResponseHeaders gets a reference to the given OasTransformHeaders and assigns it to the TransformResponseHeaders field.
func (o *OasOperation) SetTransformResponseHeaders(v OasTransformHeaders) {
	o.TransformResponseHeaders = &v
}

// GetUrlRewrite returns the UrlRewrite field value if set, zero value otherwise.
func (o *OasOperation) GetUrlRewrite() OasURLRewrite {
	if o == nil || IsNil(o.UrlRewrite) {
		var ret OasURLRewrite
		return ret
	}
	return *o.UrlRewrite
}

// GetUrlRewriteOk returns a tuple with the UrlRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetUrlRewriteOk() (*OasURLRewrite, bool) {
	if o == nil || IsNil(o.UrlRewrite) {
		return nil, false
	}
	return o.UrlRewrite, true
}

// HasUrlRewrite returns a boolean if a field has been set.
func (o *OasOperation) HasUrlRewrite() bool {
	if o != nil && !IsNil(o.UrlRewrite) {
		return true
	}

	return false
}

// SetUrlRewrite gets a reference to the given OasURLRewrite and assigns it to the UrlRewrite field.
func (o *OasOperation) SetUrlRewrite(v OasURLRewrite) {
	o.UrlRewrite = &v
}

// GetValidateRequest returns the ValidateRequest field value if set, zero value otherwise.
func (o *OasOperation) GetValidateRequest() OasValidateRequest {
	if o == nil || IsNil(o.ValidateRequest) {
		var ret OasValidateRequest
		return ret
	}
	return *o.ValidateRequest
}

// GetValidateRequestOk returns a tuple with the ValidateRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetValidateRequestOk() (*OasValidateRequest, bool) {
	if o == nil || IsNil(o.ValidateRequest) {
		return nil, false
	}
	return o.ValidateRequest, true
}

// HasValidateRequest returns a boolean if a field has been set.
func (o *OasOperation) HasValidateRequest() bool {
	if o != nil && !IsNil(o.ValidateRequest) {
		return true
	}

	return false
}

// SetValidateRequest gets a reference to the given OasValidateRequest and assigns it to the ValidateRequest field.
func (o *OasOperation) SetValidateRequest(v OasValidateRequest) {
	o.ValidateRequest = &v
}

// GetVirtualEndpoint returns the VirtualEndpoint field value if set, zero value otherwise.
func (o *OasOperation) GetVirtualEndpoint() OasVirtualEndpoint {
	if o == nil || IsNil(o.VirtualEndpoint) {
		var ret OasVirtualEndpoint
		return ret
	}
	return *o.VirtualEndpoint
}

// GetVirtualEndpointOk returns a tuple with the VirtualEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasOperation) GetVirtualEndpointOk() (*OasVirtualEndpoint, bool) {
	if o == nil || IsNil(o.VirtualEndpoint) {
		return nil, false
	}
	return o.VirtualEndpoint, true
}

// HasVirtualEndpoint returns a boolean if a field has been set.
func (o *OasOperation) HasVirtualEndpoint() bool {
	if o != nil && !IsNil(o.VirtualEndpoint) {
		return true
	}

	return false
}

// SetVirtualEndpoint gets a reference to the given OasVirtualEndpoint and assigns it to the VirtualEndpoint field.
func (o *OasOperation) SetVirtualEndpoint(v OasVirtualEndpoint) {
	o.VirtualEndpoint = &v
}

func (o OasOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OasOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Allow) {
		toSerialize["allow"] = o.Allow
	}
	if !IsNil(o.Block) {
		toSerialize["block"] = o.Block
	}
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	if !IsNil(o.CircuitBreaker) {
		toSerialize["circuitBreaker"] = o.CircuitBreaker
	}
	if !IsNil(o.DoNotTrackEndpoint) {
		toSerialize["doNotTrackEndpoint"] = o.DoNotTrackEndpoint
	}
	if !IsNil(o.EnforceTimeout) {
		toSerialize["enforceTimeout"] = o.EnforceTimeout
	}
	if !IsNil(o.IgnoreAuthentication) {
		toSerialize["ignoreAuthentication"] = o.IgnoreAuthentication
	}
	if !IsNil(o.Internal) {
		toSerialize["internal"] = o.Internal
	}
	if !IsNil(o.MockResponse) {
		toSerialize["mockResponse"] = o.MockResponse
	}
	if !IsNil(o.PostPlugins) {
		toSerialize["postPlugins"] = o.PostPlugins
	}
	if !IsNil(o.RequestSizeLimit) {
		toSerialize["requestSizeLimit"] = o.RequestSizeLimit
	}
	if !IsNil(o.TrackEndpoint) {
		toSerialize["trackEndpoint"] = o.TrackEndpoint
	}
	if !IsNil(o.TransformRequestBody) {
		toSerialize["transformRequestBody"] = o.TransformRequestBody
	}
	if !IsNil(o.TransformRequestHeaders) {
		toSerialize["transformRequestHeaders"] = o.TransformRequestHeaders
	}
	if !IsNil(o.TransformRequestMethod) {
		toSerialize["transformRequestMethod"] = o.TransformRequestMethod
	}
	if !IsNil(o.TransformResponseBody) {
		toSerialize["transformResponseBody"] = o.TransformResponseBody
	}
	if !IsNil(o.TransformResponseHeaders) {
		toSerialize["transformResponseHeaders"] = o.TransformResponseHeaders
	}
	if !IsNil(o.UrlRewrite) {
		toSerialize["urlRewrite"] = o.UrlRewrite
	}
	if !IsNil(o.ValidateRequest) {
		toSerialize["validateRequest"] = o.ValidateRequest
	}
	if !IsNil(o.VirtualEndpoint) {
		toSerialize["virtualEndpoint"] = o.VirtualEndpoint
	}
	return toSerialize, nil
}

type NullableOasOperation struct {
	value *OasOperation
	isSet bool
}

func (v NullableOasOperation) Get() *OasOperation {
	return v.value
}

func (v *NullableOasOperation) Set(val *OasOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableOasOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableOasOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOasOperation(val *OasOperation) *NullableOasOperation {
	return &NullableOasOperation{value: val, isSet: true}
}

func (v NullableOasOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOasOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
