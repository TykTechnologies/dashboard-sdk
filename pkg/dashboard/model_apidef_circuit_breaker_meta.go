/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the ApidefCircuitBreakerMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApidefCircuitBreakerMeta{}

// ApidefCircuitBreakerMeta struct for ApidefCircuitBreakerMeta
type ApidefCircuitBreakerMeta struct {
	DisableHalfOpenState *bool    `json:"disable_half_open_state,omitempty"`
	Disabled             *bool    `json:"disabled,omitempty"`
	Method               *string  `json:"method,omitempty"`
	Path                 *string  `json:"path,omitempty"`
	ReturnToServiceAfter *int32   `json:"return_to_service_after,omitempty"`
	Samples              *int32   `json:"samples,omitempty"`
	ThresholdPercent     *float32 `json:"threshold_percent,omitempty"`
}

// NewApidefCircuitBreakerMeta instantiates a new ApidefCircuitBreakerMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApidefCircuitBreakerMeta() *ApidefCircuitBreakerMeta {
	this := ApidefCircuitBreakerMeta{}
	return &this
}

// NewApidefCircuitBreakerMetaWithDefaults instantiates a new ApidefCircuitBreakerMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApidefCircuitBreakerMetaWithDefaults() *ApidefCircuitBreakerMeta {
	this := ApidefCircuitBreakerMeta{}
	return &this
}

// GetDisableHalfOpenState returns the DisableHalfOpenState field value if set, zero value otherwise.
func (o *ApidefCircuitBreakerMeta) GetDisableHalfOpenState() bool {
	if o == nil || IsNil(o.DisableHalfOpenState) {
		var ret bool
		return ret
	}
	return *o.DisableHalfOpenState
}

// GetDisableHalfOpenStateOk returns a tuple with the DisableHalfOpenState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefCircuitBreakerMeta) GetDisableHalfOpenStateOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableHalfOpenState) {
		return nil, false
	}
	return o.DisableHalfOpenState, true
}

// HasDisableHalfOpenState returns a boolean if a field has been set.
func (o *ApidefCircuitBreakerMeta) HasDisableHalfOpenState() bool {
	if o != nil && !IsNil(o.DisableHalfOpenState) {
		return true
	}

	return false
}

// SetDisableHalfOpenState gets a reference to the given bool and assigns it to the DisableHalfOpenState field.
func (o *ApidefCircuitBreakerMeta) SetDisableHalfOpenState(v bool) {
	o.DisableHalfOpenState = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *ApidefCircuitBreakerMeta) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefCircuitBreakerMeta) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *ApidefCircuitBreakerMeta) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *ApidefCircuitBreakerMeta) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *ApidefCircuitBreakerMeta) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefCircuitBreakerMeta) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *ApidefCircuitBreakerMeta) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *ApidefCircuitBreakerMeta) SetMethod(v string) {
	o.Method = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ApidefCircuitBreakerMeta) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefCircuitBreakerMeta) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ApidefCircuitBreakerMeta) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ApidefCircuitBreakerMeta) SetPath(v string) {
	o.Path = &v
}

// GetReturnToServiceAfter returns the ReturnToServiceAfter field value if set, zero value otherwise.
func (o *ApidefCircuitBreakerMeta) GetReturnToServiceAfter() int32 {
	if o == nil || IsNil(o.ReturnToServiceAfter) {
		var ret int32
		return ret
	}
	return *o.ReturnToServiceAfter
}

// GetReturnToServiceAfterOk returns a tuple with the ReturnToServiceAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefCircuitBreakerMeta) GetReturnToServiceAfterOk() (*int32, bool) {
	if o == nil || IsNil(o.ReturnToServiceAfter) {
		return nil, false
	}
	return o.ReturnToServiceAfter, true
}

// HasReturnToServiceAfter returns a boolean if a field has been set.
func (o *ApidefCircuitBreakerMeta) HasReturnToServiceAfter() bool {
	if o != nil && !IsNil(o.ReturnToServiceAfter) {
		return true
	}

	return false
}

// SetReturnToServiceAfter gets a reference to the given int32 and assigns it to the ReturnToServiceAfter field.
func (o *ApidefCircuitBreakerMeta) SetReturnToServiceAfter(v int32) {
	o.ReturnToServiceAfter = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *ApidefCircuitBreakerMeta) GetSamples() int32 {
	if o == nil || IsNil(o.Samples) {
		var ret int32
		return ret
	}
	return *o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefCircuitBreakerMeta) GetSamplesOk() (*int32, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *ApidefCircuitBreakerMeta) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given int32 and assigns it to the Samples field.
func (o *ApidefCircuitBreakerMeta) SetSamples(v int32) {
	o.Samples = &v
}

// GetThresholdPercent returns the ThresholdPercent field value if set, zero value otherwise.
func (o *ApidefCircuitBreakerMeta) GetThresholdPercent() float32 {
	if o == nil || IsNil(o.ThresholdPercent) {
		var ret float32
		return ret
	}
	return *o.ThresholdPercent
}

// GetThresholdPercentOk returns a tuple with the ThresholdPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefCircuitBreakerMeta) GetThresholdPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.ThresholdPercent) {
		return nil, false
	}
	return o.ThresholdPercent, true
}

// HasThresholdPercent returns a boolean if a field has been set.
func (o *ApidefCircuitBreakerMeta) HasThresholdPercent() bool {
	if o != nil && !IsNil(o.ThresholdPercent) {
		return true
	}

	return false
}

// SetThresholdPercent gets a reference to the given float32 and assigns it to the ThresholdPercent field.
func (o *ApidefCircuitBreakerMeta) SetThresholdPercent(v float32) {
	o.ThresholdPercent = &v
}

func (o ApidefCircuitBreakerMeta) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApidefCircuitBreakerMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableHalfOpenState) {
		toSerialize["disable_half_open_state"] = o.DisableHalfOpenState
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.ReturnToServiceAfter) {
		toSerialize["return_to_service_after"] = o.ReturnToServiceAfter
	}
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	if !IsNil(o.ThresholdPercent) {
		toSerialize["threshold_percent"] = o.ThresholdPercent
	}
	return toSerialize, nil
}

type NullableApidefCircuitBreakerMeta struct {
	value *ApidefCircuitBreakerMeta
	isSet bool
}

func (v NullableApidefCircuitBreakerMeta) Get() *ApidefCircuitBreakerMeta {
	return v.value
}

func (v *NullableApidefCircuitBreakerMeta) Set(val *ApidefCircuitBreakerMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableApidefCircuitBreakerMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableApidefCircuitBreakerMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApidefCircuitBreakerMeta(val *ApidefCircuitBreakerMeta) *NullableApidefCircuitBreakerMeta {
	return &NullableApidefCircuitBreakerMeta{value: val, isSet: true}
}

func (v NullableApidefCircuitBreakerMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApidefCircuitBreakerMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
