/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the ApidefHostCheckObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApidefHostCheckObject{}

// ApidefHostCheckObject struct for ApidefHostCheckObject
type ApidefHostCheckObject struct {
	Body                *string              `json:"body,omitempty"`
	Commands            []ApidefCheckCommand `json:"commands,omitempty"`
	EnableProxyProtocol *bool                `json:"enable_proxy_protocol,omitempty"`
	Headers             map[string]string    `json:"headers,omitempty"`
	Method              *string              `json:"method,omitempty"`
	Protocol            *string              `json:"protocol,omitempty"`
	Timeout             *int32               `json:"timeout,omitempty"`
	Url                 *string              `json:"url,omitempty"`
}

// NewApidefHostCheckObject instantiates a new ApidefHostCheckObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApidefHostCheckObject() *ApidefHostCheckObject {
	this := ApidefHostCheckObject{}
	return &this
}

// NewApidefHostCheckObjectWithDefaults instantiates a new ApidefHostCheckObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApidefHostCheckObjectWithDefaults() *ApidefHostCheckObject {
	this := ApidefHostCheckObject{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *ApidefHostCheckObject) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefHostCheckObject) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *ApidefHostCheckObject) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *ApidefHostCheckObject) SetBody(v string) {
	o.Body = &v
}

// GetCommands returns the Commands field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApidefHostCheckObject) GetCommands() []ApidefCheckCommand {
	if o == nil {
		var ret []ApidefCheckCommand
		return ret
	}
	return o.Commands
}

// GetCommandsOk returns a tuple with the Commands field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApidefHostCheckObject) GetCommandsOk() ([]ApidefCheckCommand, bool) {
	if o == nil || IsNil(o.Commands) {
		return nil, false
	}
	return o.Commands, true
}

// HasCommands returns a boolean if a field has been set.
func (o *ApidefHostCheckObject) HasCommands() bool {
	if o != nil && !IsNil(o.Commands) {
		return true
	}

	return false
}

// SetCommands gets a reference to the given []ApidefCheckCommand and assigns it to the Commands field.
func (o *ApidefHostCheckObject) SetCommands(v []ApidefCheckCommand) {
	o.Commands = v
}

// GetEnableProxyProtocol returns the EnableProxyProtocol field value if set, zero value otherwise.
func (o *ApidefHostCheckObject) GetEnableProxyProtocol() bool {
	if o == nil || IsNil(o.EnableProxyProtocol) {
		var ret bool
		return ret
	}
	return *o.EnableProxyProtocol
}

// GetEnableProxyProtocolOk returns a tuple with the EnableProxyProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefHostCheckObject) GetEnableProxyProtocolOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableProxyProtocol) {
		return nil, false
	}
	return o.EnableProxyProtocol, true
}

// HasEnableProxyProtocol returns a boolean if a field has been set.
func (o *ApidefHostCheckObject) HasEnableProxyProtocol() bool {
	if o != nil && !IsNil(o.EnableProxyProtocol) {
		return true
	}

	return false
}

// SetEnableProxyProtocol gets a reference to the given bool and assigns it to the EnableProxyProtocol field.
func (o *ApidefHostCheckObject) SetEnableProxyProtocol(v bool) {
	o.EnableProxyProtocol = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApidefHostCheckObject) GetHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApidefHostCheckObject) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return &o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *ApidefHostCheckObject) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *ApidefHostCheckObject) SetHeaders(v map[string]string) {
	o.Headers = v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *ApidefHostCheckObject) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefHostCheckObject) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *ApidefHostCheckObject) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *ApidefHostCheckObject) SetMethod(v string) {
	o.Method = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *ApidefHostCheckObject) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefHostCheckObject) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *ApidefHostCheckObject) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *ApidefHostCheckObject) SetProtocol(v string) {
	o.Protocol = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *ApidefHostCheckObject) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefHostCheckObject) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *ApidefHostCheckObject) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *ApidefHostCheckObject) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ApidefHostCheckObject) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefHostCheckObject) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ApidefHostCheckObject) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ApidefHostCheckObject) SetUrl(v string) {
	o.Url = &v
}

func (o ApidefHostCheckObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApidefHostCheckObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if o.Commands != nil {
		toSerialize["commands"] = o.Commands
	}
	if !IsNil(o.EnableProxyProtocol) {
		toSerialize["enable_proxy_protocol"] = o.EnableProxyProtocol
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableApidefHostCheckObject struct {
	value *ApidefHostCheckObject
	isSet bool
}

func (v NullableApidefHostCheckObject) Get() *ApidefHostCheckObject {
	return v.value
}

func (v *NullableApidefHostCheckObject) Set(val *ApidefHostCheckObject) {
	v.value = val
	v.isSet = true
}

func (v NullableApidefHostCheckObject) IsSet() bool {
	return v.isSet
}

func (v *NullableApidefHostCheckObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApidefHostCheckObject(val *ApidefHostCheckObject) *NullableApidefHostCheckObject {
	return &NullableApidefHostCheckObject{value: val, isSet: true}
}

func (v NullableApidefHostCheckObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApidefHostCheckObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
