/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the TykOAS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TykOAS{}

// TykOAS struct for TykOAS
type TykOAS struct {
	Components     *Openapi3Components          `json:"components,omitempty"`
	ExternalDocs   *Openapi3ExternalDocs        `json:"externalDocs,omitempty"`
	Info           *Openapi3Info                `json:"info,omitempty"`
	Openapi        *string                      `json:"openapi,omitempty"`
	Paths          *map[string]Openapi3PathItem `json:"paths,omitempty"`
	Security       []map[string][]string        `json:"security,omitempty"`
	Servers        []Openapi3Server             `json:"servers,omitempty"`
	Tags           []Openapi3Tag                `json:"tags,omitempty"`
	XTykApiGateway *OasXTykAPIGateway           `json:"x-tyk-api-gateway,omitempty"`
}

// NewTykOAS instantiates a new TykOAS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTykOAS() *TykOAS {
	this := TykOAS{}
	return &this
}

// NewTykOASWithDefaults instantiates a new TykOAS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTykOASWithDefaults() *TykOAS {
	this := TykOAS{}
	return &this
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *TykOAS) GetComponents() Openapi3Components {
	if o == nil || IsNil(o.Components) {
		var ret Openapi3Components
		return ret
	}
	return *o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TykOAS) GetComponentsOk() (*Openapi3Components, bool) {
	if o == nil || IsNil(o.Components) {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *TykOAS) HasComponents() bool {
	if o != nil && !IsNil(o.Components) {
		return true
	}

	return false
}

// SetComponents gets a reference to the given Openapi3Components and assigns it to the Components field.
func (o *TykOAS) SetComponents(v Openapi3Components) {
	o.Components = &v
}

// GetExternalDocs returns the ExternalDocs field value if set, zero value otherwise.
func (o *TykOAS) GetExternalDocs() Openapi3ExternalDocs {
	if o == nil || IsNil(o.ExternalDocs) {
		var ret Openapi3ExternalDocs
		return ret
	}
	return *o.ExternalDocs
}

// GetExternalDocsOk returns a tuple with the ExternalDocs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TykOAS) GetExternalDocsOk() (*Openapi3ExternalDocs, bool) {
	if o == nil || IsNil(o.ExternalDocs) {
		return nil, false
	}
	return o.ExternalDocs, true
}

// HasExternalDocs returns a boolean if a field has been set.
func (o *TykOAS) HasExternalDocs() bool {
	if o != nil && !IsNil(o.ExternalDocs) {
		return true
	}

	return false
}

// SetExternalDocs gets a reference to the given Openapi3ExternalDocs and assigns it to the ExternalDocs field.
func (o *TykOAS) SetExternalDocs(v Openapi3ExternalDocs) {
	o.ExternalDocs = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TykOAS) GetInfo() Openapi3Info {
	if o == nil || IsNil(o.Info) {
		var ret Openapi3Info
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TykOAS) GetInfoOk() (*Openapi3Info, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TykOAS) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given Openapi3Info and assigns it to the Info field.
func (o *TykOAS) SetInfo(v Openapi3Info) {
	o.Info = &v
}

// GetOpenapi returns the Openapi field value if set, zero value otherwise.
func (o *TykOAS) GetOpenapi() string {
	if o == nil || IsNil(o.Openapi) {
		var ret string
		return ret
	}
	return *o.Openapi
}

// GetOpenapiOk returns a tuple with the Openapi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TykOAS) GetOpenapiOk() (*string, bool) {
	if o == nil || IsNil(o.Openapi) {
		return nil, false
	}
	return o.Openapi, true
}

// HasOpenapi returns a boolean if a field has been set.
func (o *TykOAS) HasOpenapi() bool {
	if o != nil && !IsNil(o.Openapi) {
		return true
	}

	return false
}

// SetOpenapi gets a reference to the given string and assigns it to the Openapi field.
func (o *TykOAS) SetOpenapi(v string) {
	o.Openapi = &v
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *TykOAS) GetPaths() map[string]Openapi3PathItem {
	if o == nil || IsNil(o.Paths) {
		var ret map[string]Openapi3PathItem
		return ret
	}
	return *o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TykOAS) GetPathsOk() (*map[string]Openapi3PathItem, bool) {
	if o == nil || IsNil(o.Paths) {
		return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *TykOAS) HasPaths() bool {
	if o != nil && !IsNil(o.Paths) {
		return true
	}

	return false
}

// SetPaths gets a reference to the given map[string]Openapi3PathItem and assigns it to the Paths field.
func (o *TykOAS) SetPaths(v map[string]Openapi3PathItem) {
	o.Paths = &v
}

// GetSecurity returns the Security field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TykOAS) GetSecurity() []map[string][]string {
	if o == nil {
		var ret []map[string][]string
		return ret
	}
	return o.Security
}

// GetSecurityOk returns a tuple with the Security field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TykOAS) GetSecurityOk() ([]map[string][]string, bool) {
	if o == nil || IsNil(o.Security) {
		return nil, false
	}
	return o.Security, true
}

// HasSecurity returns a boolean if a field has been set.
func (o *TykOAS) HasSecurity() bool {
	if o != nil && !IsNil(o.Security) {
		return true
	}

	return false
}

// SetSecurity gets a reference to the given []map[string][]string and assigns it to the Security field.
func (o *TykOAS) SetSecurity(v []map[string][]string) {
	o.Security = v
}

// GetServers returns the Servers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TykOAS) GetServers() []Openapi3Server {
	if o == nil {
		var ret []Openapi3Server
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TykOAS) GetServersOk() ([]Openapi3Server, bool) {
	if o == nil || IsNil(o.Servers) {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *TykOAS) HasServers() bool {
	if o != nil && !IsNil(o.Servers) {
		return true
	}

	return false
}

// SetServers gets a reference to the given []Openapi3Server and assigns it to the Servers field.
func (o *TykOAS) SetServers(v []Openapi3Server) {
	o.Servers = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TykOAS) GetTags() []Openapi3Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Openapi3Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TykOAS) GetTagsOk() ([]Openapi3Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TykOAS) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Openapi3Tag and assigns it to the Tags field.
func (o *TykOAS) SetTags(v []Openapi3Tag) {
	o.Tags = v
}

// GetXTykApiGateway returns the XTykApiGateway field value if set, zero value otherwise.
func (o *TykOAS) GetXTykApiGateway() OasXTykAPIGateway {
	if o == nil || IsNil(o.XTykApiGateway) {
		var ret OasXTykAPIGateway
		return ret
	}
	return *o.XTykApiGateway
}

// GetXTykApiGatewayOk returns a tuple with the XTykApiGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TykOAS) GetXTykApiGatewayOk() (*OasXTykAPIGateway, bool) {
	if o == nil || IsNil(o.XTykApiGateway) {
		return nil, false
	}
	return o.XTykApiGateway, true
}

// HasXTykApiGateway returns a boolean if a field has been set.
func (o *TykOAS) HasXTykApiGateway() bool {
	if o != nil && !IsNil(o.XTykApiGateway) {
		return true
	}

	return false
}

// SetXTykApiGateway gets a reference to the given OasXTykAPIGateway and assigns it to the XTykApiGateway field.
func (o *TykOAS) SetXTykApiGateway(v OasXTykAPIGateway) {
	o.XTykApiGateway = &v
}

func (o TykOAS) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TykOAS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Components) {
		toSerialize["components"] = o.Components
	}
	if !IsNil(o.ExternalDocs) {
		toSerialize["externalDocs"] = o.ExternalDocs
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.Openapi) {
		toSerialize["openapi"] = o.Openapi
	}
	if !IsNil(o.Paths) {
		toSerialize["paths"] = o.Paths
	}
	if o.Security != nil {
		toSerialize["security"] = o.Security
	}
	if o.Servers != nil {
		toSerialize["servers"] = o.Servers
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.XTykApiGateway) {
		toSerialize["x-tyk-api-gateway"] = o.XTykApiGateway
	}
	return toSerialize, nil
}

type NullableTykOAS struct {
	value *TykOAS
	isSet bool
}

func (v NullableTykOAS) Get() *TykOAS {
	return v.value
}

func (v *NullableTykOAS) Set(val *TykOAS) {
	v.value = val
	v.isSet = true
}

func (v NullableTykOAS) IsSet() bool {
	return v.isSet
}

func (v *NullableTykOAS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTykOAS(val *TykOAS) *NullableTykOAS {
	return &NullableTykOAS{value: val, isSet: true}
}

func (v NullableTykOAS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTykOAS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
