/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the PortalConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortalConfig{}

// PortalConfig struct for PortalConfig
type PortalConfig struct {
	HashKeys             *bool                    `json:"HashKeys,omitempty"`
	CatalogueLoginOnly   *bool                    `json:"catalogue_login_only,omitempty"`
	DcrOptions           *DCROptions              `json:"dcr_options,omitempty"`
	DisableAutoLogin     *bool                    `json:"disable_auto_login,omitempty"`
	DisableLogin         *bool                    `json:"disable_login,omitempty"`
	DisableSignup        *bool                    `json:"disable_signup,omitempty"`
	Email                *string                  `json:"email,omitempty"`
	EnableDcr            *bool                    `json:"enable_dcr,omitempty"`
	EnableMultiSelection *bool                    `json:"enable_multi_selection,omitempty"`
	Id                   *string                  `json:"id,omitempty"`
	KeyRequestFields     []string                 `json:"key_request_fields,omitempty"`
	MailOptions          *PortalConfigMailOptions `json:"mail_options,omitempty"`
	OauthUsageLimit      *int32                   `json:"oauth_usage_limit,omitempty"`
	OrgId                *string                  `json:"org_id,omitempty"`
	Override             *bool                    `json:"override,omitempty"`
	RedirectOnKeyRequest *bool                    `json:"redirect_on_key_request,omitempty"`
	RedirectTo           *string                  `json:"redirect_to,omitempty"`
	RequireKeyApproval   *bool                    `json:"require_key_approval,omitempty"`
	SecureKeyApproval    *bool                    `json:"secure_key_approval,omitempty"`
	SignupFields         []string                 `json:"signup_fields,omitempty"`
}

// NewPortalConfig instantiates a new PortalConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortalConfig() *PortalConfig {
	this := PortalConfig{}
	return &this
}

// NewPortalConfigWithDefaults instantiates a new PortalConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortalConfigWithDefaults() *PortalConfig {
	this := PortalConfig{}
	return &this
}

// GetHashKeys returns the HashKeys field value if set, zero value otherwise.
func (o *PortalConfig) GetHashKeys() bool {
	if o == nil || IsNil(o.HashKeys) {
		var ret bool
		return ret
	}
	return *o.HashKeys
}

// GetHashKeysOk returns a tuple with the HashKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetHashKeysOk() (*bool, bool) {
	if o == nil || IsNil(o.HashKeys) {
		return nil, false
	}
	return o.HashKeys, true
}

// HasHashKeys returns a boolean if a field has been set.
func (o *PortalConfig) HasHashKeys() bool {
	if o != nil && !IsNil(o.HashKeys) {
		return true
	}

	return false
}

// SetHashKeys gets a reference to the given bool and assigns it to the HashKeys field.
func (o *PortalConfig) SetHashKeys(v bool) {
	o.HashKeys = &v
}

// GetCatalogueLoginOnly returns the CatalogueLoginOnly field value if set, zero value otherwise.
func (o *PortalConfig) GetCatalogueLoginOnly() bool {
	if o == nil || IsNil(o.CatalogueLoginOnly) {
		var ret bool
		return ret
	}
	return *o.CatalogueLoginOnly
}

// GetCatalogueLoginOnlyOk returns a tuple with the CatalogueLoginOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetCatalogueLoginOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.CatalogueLoginOnly) {
		return nil, false
	}
	return o.CatalogueLoginOnly, true
}

// HasCatalogueLoginOnly returns a boolean if a field has been set.
func (o *PortalConfig) HasCatalogueLoginOnly() bool {
	if o != nil && !IsNil(o.CatalogueLoginOnly) {
		return true
	}

	return false
}

// SetCatalogueLoginOnly gets a reference to the given bool and assigns it to the CatalogueLoginOnly field.
func (o *PortalConfig) SetCatalogueLoginOnly(v bool) {
	o.CatalogueLoginOnly = &v
}

// GetDcrOptions returns the DcrOptions field value if set, zero value otherwise.
func (o *PortalConfig) GetDcrOptions() DCROptions {
	if o == nil || IsNil(o.DcrOptions) {
		var ret DCROptions
		return ret
	}
	return *o.DcrOptions
}

// GetDcrOptionsOk returns a tuple with the DcrOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetDcrOptionsOk() (*DCROptions, bool) {
	if o == nil || IsNil(o.DcrOptions) {
		return nil, false
	}
	return o.DcrOptions, true
}

// HasDcrOptions returns a boolean if a field has been set.
func (o *PortalConfig) HasDcrOptions() bool {
	if o != nil && !IsNil(o.DcrOptions) {
		return true
	}

	return false
}

// SetDcrOptions gets a reference to the given DCROptions and assigns it to the DcrOptions field.
func (o *PortalConfig) SetDcrOptions(v DCROptions) {
	o.DcrOptions = &v
}

// GetDisableAutoLogin returns the DisableAutoLogin field value if set, zero value otherwise.
func (o *PortalConfig) GetDisableAutoLogin() bool {
	if o == nil || IsNil(o.DisableAutoLogin) {
		var ret bool
		return ret
	}
	return *o.DisableAutoLogin
}

// GetDisableAutoLoginOk returns a tuple with the DisableAutoLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetDisableAutoLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAutoLogin) {
		return nil, false
	}
	return o.DisableAutoLogin, true
}

// HasDisableAutoLogin returns a boolean if a field has been set.
func (o *PortalConfig) HasDisableAutoLogin() bool {
	if o != nil && !IsNil(o.DisableAutoLogin) {
		return true
	}

	return false
}

// SetDisableAutoLogin gets a reference to the given bool and assigns it to the DisableAutoLogin field.
func (o *PortalConfig) SetDisableAutoLogin(v bool) {
	o.DisableAutoLogin = &v
}

// GetDisableLogin returns the DisableLogin field value if set, zero value otherwise.
func (o *PortalConfig) GetDisableLogin() bool {
	if o == nil || IsNil(o.DisableLogin) {
		var ret bool
		return ret
	}
	return *o.DisableLogin
}

// GetDisableLoginOk returns a tuple with the DisableLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetDisableLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableLogin) {
		return nil, false
	}
	return o.DisableLogin, true
}

// HasDisableLogin returns a boolean if a field has been set.
func (o *PortalConfig) HasDisableLogin() bool {
	if o != nil && !IsNil(o.DisableLogin) {
		return true
	}

	return false
}

// SetDisableLogin gets a reference to the given bool and assigns it to the DisableLogin field.
func (o *PortalConfig) SetDisableLogin(v bool) {
	o.DisableLogin = &v
}

// GetDisableSignup returns the DisableSignup field value if set, zero value otherwise.
func (o *PortalConfig) GetDisableSignup() bool {
	if o == nil || IsNil(o.DisableSignup) {
		var ret bool
		return ret
	}
	return *o.DisableSignup
}

// GetDisableSignupOk returns a tuple with the DisableSignup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetDisableSignupOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableSignup) {
		return nil, false
	}
	return o.DisableSignup, true
}

// HasDisableSignup returns a boolean if a field has been set.
func (o *PortalConfig) HasDisableSignup() bool {
	if o != nil && !IsNil(o.DisableSignup) {
		return true
	}

	return false
}

// SetDisableSignup gets a reference to the given bool and assigns it to the DisableSignup field.
func (o *PortalConfig) SetDisableSignup(v bool) {
	o.DisableSignup = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *PortalConfig) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PortalConfig) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *PortalConfig) SetEmail(v string) {
	o.Email = &v
}

// GetEnableDcr returns the EnableDcr field value if set, zero value otherwise.
func (o *PortalConfig) GetEnableDcr() bool {
	if o == nil || IsNil(o.EnableDcr) {
		var ret bool
		return ret
	}
	return *o.EnableDcr
}

// GetEnableDcrOk returns a tuple with the EnableDcr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetEnableDcrOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDcr) {
		return nil, false
	}
	return o.EnableDcr, true
}

// HasEnableDcr returns a boolean if a field has been set.
func (o *PortalConfig) HasEnableDcr() bool {
	if o != nil && !IsNil(o.EnableDcr) {
		return true
	}

	return false
}

// SetEnableDcr gets a reference to the given bool and assigns it to the EnableDcr field.
func (o *PortalConfig) SetEnableDcr(v bool) {
	o.EnableDcr = &v
}

// GetEnableMultiSelection returns the EnableMultiSelection field value if set, zero value otherwise.
func (o *PortalConfig) GetEnableMultiSelection() bool {
	if o == nil || IsNil(o.EnableMultiSelection) {
		var ret bool
		return ret
	}
	return *o.EnableMultiSelection
}

// GetEnableMultiSelectionOk returns a tuple with the EnableMultiSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetEnableMultiSelectionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMultiSelection) {
		return nil, false
	}
	return o.EnableMultiSelection, true
}

// HasEnableMultiSelection returns a boolean if a field has been set.
func (o *PortalConfig) HasEnableMultiSelection() bool {
	if o != nil && !IsNil(o.EnableMultiSelection) {
		return true
	}

	return false
}

// SetEnableMultiSelection gets a reference to the given bool and assigns it to the EnableMultiSelection field.
func (o *PortalConfig) SetEnableMultiSelection(v bool) {
	o.EnableMultiSelection = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortalConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortalConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PortalConfig) SetId(v string) {
	o.Id = &v
}

// GetKeyRequestFields returns the KeyRequestFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalConfig) GetKeyRequestFields() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.KeyRequestFields
}

// GetKeyRequestFieldsOk returns a tuple with the KeyRequestFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalConfig) GetKeyRequestFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyRequestFields) {
		return nil, false
	}
	return o.KeyRequestFields, true
}

// HasKeyRequestFields returns a boolean if a field has been set.
func (o *PortalConfig) HasKeyRequestFields() bool {
	if o != nil && !IsNil(o.KeyRequestFields) {
		return true
	}

	return false
}

// SetKeyRequestFields gets a reference to the given []string and assigns it to the KeyRequestFields field.
func (o *PortalConfig) SetKeyRequestFields(v []string) {
	o.KeyRequestFields = v
}

// GetMailOptions returns the MailOptions field value if set, zero value otherwise.
func (o *PortalConfig) GetMailOptions() PortalConfigMailOptions {
	if o == nil || IsNil(o.MailOptions) {
		var ret PortalConfigMailOptions
		return ret
	}
	return *o.MailOptions
}

// GetMailOptionsOk returns a tuple with the MailOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetMailOptionsOk() (*PortalConfigMailOptions, bool) {
	if o == nil || IsNil(o.MailOptions) {
		return nil, false
	}
	return o.MailOptions, true
}

// HasMailOptions returns a boolean if a field has been set.
func (o *PortalConfig) HasMailOptions() bool {
	if o != nil && !IsNil(o.MailOptions) {
		return true
	}

	return false
}

// SetMailOptions gets a reference to the given PortalConfigMailOptions and assigns it to the MailOptions field.
func (o *PortalConfig) SetMailOptions(v PortalConfigMailOptions) {
	o.MailOptions = &v
}

// GetOauthUsageLimit returns the OauthUsageLimit field value if set, zero value otherwise.
func (o *PortalConfig) GetOauthUsageLimit() int32 {
	if o == nil || IsNil(o.OauthUsageLimit) {
		var ret int32
		return ret
	}
	return *o.OauthUsageLimit
}

// GetOauthUsageLimitOk returns a tuple with the OauthUsageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetOauthUsageLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.OauthUsageLimit) {
		return nil, false
	}
	return o.OauthUsageLimit, true
}

// HasOauthUsageLimit returns a boolean if a field has been set.
func (o *PortalConfig) HasOauthUsageLimit() bool {
	if o != nil && !IsNil(o.OauthUsageLimit) {
		return true
	}

	return false
}

// SetOauthUsageLimit gets a reference to the given int32 and assigns it to the OauthUsageLimit field.
func (o *PortalConfig) SetOauthUsageLimit(v int32) {
	o.OauthUsageLimit = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *PortalConfig) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *PortalConfig) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *PortalConfig) SetOrgId(v string) {
	o.OrgId = &v
}

// GetOverride returns the Override field value if set, zero value otherwise.
func (o *PortalConfig) GetOverride() bool {
	if o == nil || IsNil(o.Override) {
		var ret bool
		return ret
	}
	return *o.Override
}

// GetOverrideOk returns a tuple with the Override field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.Override) {
		return nil, false
	}
	return o.Override, true
}

// HasOverride returns a boolean if a field has been set.
func (o *PortalConfig) HasOverride() bool {
	if o != nil && !IsNil(o.Override) {
		return true
	}

	return false
}

// SetOverride gets a reference to the given bool and assigns it to the Override field.
func (o *PortalConfig) SetOverride(v bool) {
	o.Override = &v
}

// GetRedirectOnKeyRequest returns the RedirectOnKeyRequest field value if set, zero value otherwise.
func (o *PortalConfig) GetRedirectOnKeyRequest() bool {
	if o == nil || IsNil(o.RedirectOnKeyRequest) {
		var ret bool
		return ret
	}
	return *o.RedirectOnKeyRequest
}

// GetRedirectOnKeyRequestOk returns a tuple with the RedirectOnKeyRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetRedirectOnKeyRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.RedirectOnKeyRequest) {
		return nil, false
	}
	return o.RedirectOnKeyRequest, true
}

// HasRedirectOnKeyRequest returns a boolean if a field has been set.
func (o *PortalConfig) HasRedirectOnKeyRequest() bool {
	if o != nil && !IsNil(o.RedirectOnKeyRequest) {
		return true
	}

	return false
}

// SetRedirectOnKeyRequest gets a reference to the given bool and assigns it to the RedirectOnKeyRequest field.
func (o *PortalConfig) SetRedirectOnKeyRequest(v bool) {
	o.RedirectOnKeyRequest = &v
}

// GetRedirectTo returns the RedirectTo field value if set, zero value otherwise.
func (o *PortalConfig) GetRedirectTo() string {
	if o == nil || IsNil(o.RedirectTo) {
		var ret string
		return ret
	}
	return *o.RedirectTo
}

// GetRedirectToOk returns a tuple with the RedirectTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetRedirectToOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectTo) {
		return nil, false
	}
	return o.RedirectTo, true
}

// HasRedirectTo returns a boolean if a field has been set.
func (o *PortalConfig) HasRedirectTo() bool {
	if o != nil && !IsNil(o.RedirectTo) {
		return true
	}

	return false
}

// SetRedirectTo gets a reference to the given string and assigns it to the RedirectTo field.
func (o *PortalConfig) SetRedirectTo(v string) {
	o.RedirectTo = &v
}

// GetRequireKeyApproval returns the RequireKeyApproval field value if set, zero value otherwise.
func (o *PortalConfig) GetRequireKeyApproval() bool {
	if o == nil || IsNil(o.RequireKeyApproval) {
		var ret bool
		return ret
	}
	return *o.RequireKeyApproval
}

// GetRequireKeyApprovalOk returns a tuple with the RequireKeyApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetRequireKeyApprovalOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireKeyApproval) {
		return nil, false
	}
	return o.RequireKeyApproval, true
}

// HasRequireKeyApproval returns a boolean if a field has been set.
func (o *PortalConfig) HasRequireKeyApproval() bool {
	if o != nil && !IsNil(o.RequireKeyApproval) {
		return true
	}

	return false
}

// SetRequireKeyApproval gets a reference to the given bool and assigns it to the RequireKeyApproval field.
func (o *PortalConfig) SetRequireKeyApproval(v bool) {
	o.RequireKeyApproval = &v
}

// GetSecureKeyApproval returns the SecureKeyApproval field value if set, zero value otherwise.
func (o *PortalConfig) GetSecureKeyApproval() bool {
	if o == nil || IsNil(o.SecureKeyApproval) {
		var ret bool
		return ret
	}
	return *o.SecureKeyApproval
}

// GetSecureKeyApprovalOk returns a tuple with the SecureKeyApproval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfig) GetSecureKeyApprovalOk() (*bool, bool) {
	if o == nil || IsNil(o.SecureKeyApproval) {
		return nil, false
	}
	return o.SecureKeyApproval, true
}

// HasSecureKeyApproval returns a boolean if a field has been set.
func (o *PortalConfig) HasSecureKeyApproval() bool {
	if o != nil && !IsNil(o.SecureKeyApproval) {
		return true
	}

	return false
}

// SetSecureKeyApproval gets a reference to the given bool and assigns it to the SecureKeyApproval field.
func (o *PortalConfig) SetSecureKeyApproval(v bool) {
	o.SecureKeyApproval = &v
}

// GetSignupFields returns the SignupFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalConfig) GetSignupFields() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SignupFields
}

// GetSignupFieldsOk returns a tuple with the SignupFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalConfig) GetSignupFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.SignupFields) {
		return nil, false
	}
	return o.SignupFields, true
}

// HasSignupFields returns a boolean if a field has been set.
func (o *PortalConfig) HasSignupFields() bool {
	if o != nil && !IsNil(o.SignupFields) {
		return true
	}

	return false
}

// SetSignupFields gets a reference to the given []string and assigns it to the SignupFields field.
func (o *PortalConfig) SetSignupFields(v []string) {
	o.SignupFields = v
}

func (o PortalConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortalConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HashKeys) {
		toSerialize["HashKeys"] = o.HashKeys
	}
	if !IsNil(o.CatalogueLoginOnly) {
		toSerialize["catalogue_login_only"] = o.CatalogueLoginOnly
	}
	if !IsNil(o.DcrOptions) {
		toSerialize["dcr_options"] = o.DcrOptions
	}
	if !IsNil(o.DisableAutoLogin) {
		toSerialize["disable_auto_login"] = o.DisableAutoLogin
	}
	if !IsNil(o.DisableLogin) {
		toSerialize["disable_login"] = o.DisableLogin
	}
	if !IsNil(o.DisableSignup) {
		toSerialize["disable_signup"] = o.DisableSignup
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EnableDcr) {
		toSerialize["enable_dcr"] = o.EnableDcr
	}
	if !IsNil(o.EnableMultiSelection) {
		toSerialize["enable_multi_selection"] = o.EnableMultiSelection
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.KeyRequestFields != nil {
		toSerialize["key_request_fields"] = o.KeyRequestFields
	}
	if !IsNil(o.MailOptions) {
		toSerialize["mail_options"] = o.MailOptions
	}
	if !IsNil(o.OauthUsageLimit) {
		toSerialize["oauth_usage_limit"] = o.OauthUsageLimit
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.Override) {
		toSerialize["override"] = o.Override
	}
	if !IsNil(o.RedirectOnKeyRequest) {
		toSerialize["redirect_on_key_request"] = o.RedirectOnKeyRequest
	}
	if !IsNil(o.RedirectTo) {
		toSerialize["redirect_to"] = o.RedirectTo
	}
	if !IsNil(o.RequireKeyApproval) {
		toSerialize["require_key_approval"] = o.RequireKeyApproval
	}
	if !IsNil(o.SecureKeyApproval) {
		toSerialize["secure_key_approval"] = o.SecureKeyApproval
	}
	if o.SignupFields != nil {
		toSerialize["signup_fields"] = o.SignupFields
	}
	return toSerialize, nil
}

type NullablePortalConfig struct {
	value *PortalConfig
	isSet bool
}

func (v NullablePortalConfig) Get() *PortalConfig {
	return v.value
}

func (v *NullablePortalConfig) Set(val *PortalConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePortalConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePortalConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortalConfig(val *PortalConfig) *NullablePortalConfig {
	return &NullablePortalConfig{value: val, isSet: true}
}

func (v NullablePortalConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortalConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
