/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WebHookHandlerConf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebHookHandlerConf{}

// WebHookHandlerConf struct for WebHookHandlerConf
type WebHookHandlerConf struct {
	ApiModel     map[string]interface{} `json:"api_model,omitempty"`
	EventTimeout *int32                 `json:"event_timeout,omitempty"`
	HeaderMap    map[string]string      `json:"header_map,omitempty"`
	Id           *string                `json:"id,omitempty"`
	Method       string                 `json:"method"`
	Name         *string                `json:"name,omitempty"`
	OrgId        *string                `json:"org_id,omitempty"`
	TargetPath   string                 `json:"target_path"`
	TemplatePath *string                `json:"template_path,omitempty"`
	WebhookId    *string                `json:"webhook_id,omitempty"`
}

type _WebHookHandlerConf WebHookHandlerConf

// NewWebHookHandlerConf instantiates a new WebHookHandlerConf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebHookHandlerConf(method string, targetPath string) *WebHookHandlerConf {
	this := WebHookHandlerConf{}
	this.Method = method
	this.TargetPath = targetPath
	return &this
}

// NewWebHookHandlerConfWithDefaults instantiates a new WebHookHandlerConf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebHookHandlerConfWithDefaults() *WebHookHandlerConf {
	this := WebHookHandlerConf{}
	return &this
}

// GetApiModel returns the ApiModel field value if set, zero value otherwise.
func (o *WebHookHandlerConf) GetApiModel() map[string]interface{} {
	if o == nil || IsNil(o.ApiModel) {
		var ret map[string]interface{}
		return ret
	}
	return o.ApiModel
}

// GetApiModelOk returns a tuple with the ApiModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebHookHandlerConf) GetApiModelOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ApiModel) {
		return map[string]interface{}{}, false
	}
	return o.ApiModel, true
}

// HasApiModel returns a boolean if a field has been set.
func (o *WebHookHandlerConf) HasApiModel() bool {
	if o != nil && !IsNil(o.ApiModel) {
		return true
	}

	return false
}

// SetApiModel gets a reference to the given map[string]interface{} and assigns it to the ApiModel field.
func (o *WebHookHandlerConf) SetApiModel(v map[string]interface{}) {
	o.ApiModel = v
}

// GetEventTimeout returns the EventTimeout field value if set, zero value otherwise.
func (o *WebHookHandlerConf) GetEventTimeout() int32 {
	if o == nil || IsNil(o.EventTimeout) {
		var ret int32
		return ret
	}
	return *o.EventTimeout
}

// GetEventTimeoutOk returns a tuple with the EventTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebHookHandlerConf) GetEventTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.EventTimeout) {
		return nil, false
	}
	return o.EventTimeout, true
}

// HasEventTimeout returns a boolean if a field has been set.
func (o *WebHookHandlerConf) HasEventTimeout() bool {
	if o != nil && !IsNil(o.EventTimeout) {
		return true
	}

	return false
}

// SetEventTimeout gets a reference to the given int32 and assigns it to the EventTimeout field.
func (o *WebHookHandlerConf) SetEventTimeout(v int32) {
	o.EventTimeout = &v
}

// GetHeaderMap returns the HeaderMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebHookHandlerConf) GetHeaderMap() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.HeaderMap
}

// GetHeaderMapOk returns a tuple with the HeaderMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebHookHandlerConf) GetHeaderMapOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.HeaderMap) {
		return nil, false
	}
	return &o.HeaderMap, true
}

// HasHeaderMap returns a boolean if a field has been set.
func (o *WebHookHandlerConf) HasHeaderMap() bool {
	if o != nil && !IsNil(o.HeaderMap) {
		return true
	}

	return false
}

// SetHeaderMap gets a reference to the given map[string]string and assigns it to the HeaderMap field.
func (o *WebHookHandlerConf) SetHeaderMap(v map[string]string) {
	o.HeaderMap = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WebHookHandlerConf) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebHookHandlerConf) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WebHookHandlerConf) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WebHookHandlerConf) SetId(v string) {
	o.Id = &v
}

// GetMethod returns the Method field value
func (o *WebHookHandlerConf) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *WebHookHandlerConf) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *WebHookHandlerConf) SetMethod(v string) {
	o.Method = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WebHookHandlerConf) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebHookHandlerConf) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WebHookHandlerConf) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WebHookHandlerConf) SetName(v string) {
	o.Name = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *WebHookHandlerConf) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebHookHandlerConf) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *WebHookHandlerConf) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *WebHookHandlerConf) SetOrgId(v string) {
	o.OrgId = &v
}

// GetTargetPath returns the TargetPath field value
func (o *WebHookHandlerConf) GetTargetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetPath
}

// GetTargetPathOk returns a tuple with the TargetPath field value
// and a boolean to check if the value has been set.
func (o *WebHookHandlerConf) GetTargetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetPath, true
}

// SetTargetPath sets field value
func (o *WebHookHandlerConf) SetTargetPath(v string) {
	o.TargetPath = v
}

// GetTemplatePath returns the TemplatePath field value if set, zero value otherwise.
func (o *WebHookHandlerConf) GetTemplatePath() string {
	if o == nil || IsNil(o.TemplatePath) {
		var ret string
		return ret
	}
	return *o.TemplatePath
}

// GetTemplatePathOk returns a tuple with the TemplatePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebHookHandlerConf) GetTemplatePathOk() (*string, bool) {
	if o == nil || IsNil(o.TemplatePath) {
		return nil, false
	}
	return o.TemplatePath, true
}

// HasTemplatePath returns a boolean if a field has been set.
func (o *WebHookHandlerConf) HasTemplatePath() bool {
	if o != nil && !IsNil(o.TemplatePath) {
		return true
	}

	return false
}

// SetTemplatePath gets a reference to the given string and assigns it to the TemplatePath field.
func (o *WebHookHandlerConf) SetTemplatePath(v string) {
	o.TemplatePath = &v
}

// GetWebhookId returns the WebhookId field value if set, zero value otherwise.
func (o *WebHookHandlerConf) GetWebhookId() string {
	if o == nil || IsNil(o.WebhookId) {
		var ret string
		return ret
	}
	return *o.WebhookId
}

// GetWebhookIdOk returns a tuple with the WebhookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebHookHandlerConf) GetWebhookIdOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookId) {
		return nil, false
	}
	return o.WebhookId, true
}

// HasWebhookId returns a boolean if a field has been set.
func (o *WebHookHandlerConf) HasWebhookId() bool {
	if o != nil && !IsNil(o.WebhookId) {
		return true
	}

	return false
}

// SetWebhookId gets a reference to the given string and assigns it to the WebhookId field.
func (o *WebHookHandlerConf) SetWebhookId(v string) {
	o.WebhookId = &v
}

func (o WebHookHandlerConf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebHookHandlerConf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiModel) {
		toSerialize["api_model"] = o.ApiModel
	}
	if !IsNil(o.EventTimeout) {
		toSerialize["event_timeout"] = o.EventTimeout
	}
	if o.HeaderMap != nil {
		toSerialize["header_map"] = o.HeaderMap
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["method"] = o.Method
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	toSerialize["target_path"] = o.TargetPath
	if !IsNil(o.TemplatePath) {
		toSerialize["template_path"] = o.TemplatePath
	}
	if !IsNil(o.WebhookId) {
		toSerialize["webhook_id"] = o.WebhookId
	}
	return toSerialize, nil
}

func (o *WebHookHandlerConf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"method",
		"target_path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebHookHandlerConf := _WebHookHandlerConf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebHookHandlerConf)

	if err != nil {
		return err
	}

	*o = WebHookHandlerConf(varWebHookHandlerConf)

	return err
}

type NullableWebHookHandlerConf struct {
	value *WebHookHandlerConf
	isSet bool
}

func (v NullableWebHookHandlerConf) Get() *WebHookHandlerConf {
	return v.value
}

func (v *NullableWebHookHandlerConf) Set(val *WebHookHandlerConf) {
	v.value = val
	v.isSet = true
}

func (v NullableWebHookHandlerConf) IsSet() bool {
	return v.isSet
}

func (v *NullableWebHookHandlerConf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebHookHandlerConf(val *WebHookHandlerConf) *NullableWebHookHandlerConf {
	return &NullableWebHookHandlerConf{value: val, isSet: true}
}

func (v NullableWebHookHandlerConf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebHookHandlerConf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
