/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the ApidefExtendedPathsSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApidefExtendedPathsSet{}

// ApidefExtendedPathsSet struct for ApidefExtendedPathsSet
type ApidefExtendedPathsSet struct {
	AdvanceCacheConfig       []ApidefCacheMeta           `json:"advance_cache_config,omitempty"`
	BlackList                []ApidefEndPointMeta        `json:"black_list,omitempty"`
	Cache                    []string                    `json:"cache,omitempty"`
	CircuitBreakers          []ApidefCircuitBreakerMeta  `json:"circuit_breakers,omitempty"`
	DoNotTrackEndpoints      []ApidefTrackEndpointMeta   `json:"do_not_track_endpoints,omitempty"`
	GoPlugin                 []ApidefGoPluginMeta        `json:"go_plugin,omitempty"`
	HardTimeouts             []ApidefHardTimeoutMeta     `json:"hard_timeouts,omitempty"`
	Ignored                  []ApidefEndPointMeta        `json:"ignored,omitempty"`
	Internal                 []ApidefInternalMeta        `json:"internal,omitempty"`
	MethodTransforms         []ApidefMethodTransformMeta `json:"method_transforms,omitempty"`
	MockResponse             []ApidefMockResponseMeta    `json:"mock_response,omitempty"`
	PersistGraphql           []ApidefPersistGraphQLMeta  `json:"persist_graphql,omitempty"`
	SizeLimits               []ApidefRequestSizeMeta     `json:"size_limits,omitempty"`
	TrackEndpoints           []ApidefTrackEndpointMeta   `json:"track_endpoints,omitempty"`
	Transform                []ApidefTemplateMeta        `json:"transform,omitempty"`
	TransformHeaders         []ApidefHeaderInjectionMeta `json:"transform_headers,omitempty"`
	TransformJq              []ApidefTransformJQMeta     `json:"transform_jq,omitempty"`
	TransformJqResponse      []ApidefTransformJQMeta     `json:"transform_jq_response,omitempty"`
	TransformResponse        []ApidefTemplateMeta        `json:"transform_response,omitempty"`
	TransformResponseHeaders []ApidefHeaderInjectionMeta `json:"transform_response_headers,omitempty"`
	UrlRewrites              []ApidefURLRewriteMeta      `json:"url_rewrites,omitempty"`
	ValidateJson             []ApidefValidatePathMeta    `json:"validate_json,omitempty"`
	ValidateRequest          []ApidefValidateRequestMeta `json:"validate_request,omitempty"`
	Virtual                  []ApidefVirtualMeta         `json:"virtual,omitempty"`
	WhiteList                []ApidefEndPointMeta        `json:"white_list,omitempty"`
}

// NewApidefExtendedPathsSet instantiates a new ApidefExtendedPathsSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApidefExtendedPathsSet() *ApidefExtendedPathsSet {
	this := ApidefExtendedPathsSet{}
	return &this
}

// NewApidefExtendedPathsSetWithDefaults instantiates a new ApidefExtendedPathsSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApidefExtendedPathsSetWithDefaults() *ApidefExtendedPathsSet {
	this := ApidefExtendedPathsSet{}
	return &this
}

// GetAdvanceCacheConfig returns the AdvanceCacheConfig field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetAdvanceCacheConfig() []ApidefCacheMeta {
	if o == nil || IsNil(o.AdvanceCacheConfig) {
		var ret []ApidefCacheMeta
		return ret
	}
	return o.AdvanceCacheConfig
}

// GetAdvanceCacheConfigOk returns a tuple with the AdvanceCacheConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetAdvanceCacheConfigOk() ([]ApidefCacheMeta, bool) {
	if o == nil || IsNil(o.AdvanceCacheConfig) {
		return nil, false
	}
	return o.AdvanceCacheConfig, true
}

// HasAdvanceCacheConfig returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasAdvanceCacheConfig() bool {
	if o != nil && !IsNil(o.AdvanceCacheConfig) {
		return true
	}

	return false
}

// SetAdvanceCacheConfig gets a reference to the given []ApidefCacheMeta and assigns it to the AdvanceCacheConfig field.
func (o *ApidefExtendedPathsSet) SetAdvanceCacheConfig(v []ApidefCacheMeta) {
	o.AdvanceCacheConfig = v
}

// GetBlackList returns the BlackList field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetBlackList() []ApidefEndPointMeta {
	if o == nil || IsNil(o.BlackList) {
		var ret []ApidefEndPointMeta
		return ret
	}
	return o.BlackList
}

// GetBlackListOk returns a tuple with the BlackList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetBlackListOk() ([]ApidefEndPointMeta, bool) {
	if o == nil || IsNil(o.BlackList) {
		return nil, false
	}
	return o.BlackList, true
}

// HasBlackList returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasBlackList() bool {
	if o != nil && !IsNil(o.BlackList) {
		return true
	}

	return false
}

// SetBlackList gets a reference to the given []ApidefEndPointMeta and assigns it to the BlackList field.
func (o *ApidefExtendedPathsSet) SetBlackList(v []ApidefEndPointMeta) {
	o.BlackList = v
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetCache() []string {
	if o == nil || IsNil(o.Cache) {
		var ret []string
		return ret
	}
	return o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetCacheOk() ([]string, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given []string and assigns it to the Cache field.
func (o *ApidefExtendedPathsSet) SetCache(v []string) {
	o.Cache = v
}

// GetCircuitBreakers returns the CircuitBreakers field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetCircuitBreakers() []ApidefCircuitBreakerMeta {
	if o == nil || IsNil(o.CircuitBreakers) {
		var ret []ApidefCircuitBreakerMeta
		return ret
	}
	return o.CircuitBreakers
}

// GetCircuitBreakersOk returns a tuple with the CircuitBreakers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetCircuitBreakersOk() ([]ApidefCircuitBreakerMeta, bool) {
	if o == nil || IsNil(o.CircuitBreakers) {
		return nil, false
	}
	return o.CircuitBreakers, true
}

// HasCircuitBreakers returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasCircuitBreakers() bool {
	if o != nil && !IsNil(o.CircuitBreakers) {
		return true
	}

	return false
}

// SetCircuitBreakers gets a reference to the given []ApidefCircuitBreakerMeta and assigns it to the CircuitBreakers field.
func (o *ApidefExtendedPathsSet) SetCircuitBreakers(v []ApidefCircuitBreakerMeta) {
	o.CircuitBreakers = v
}

// GetDoNotTrackEndpoints returns the DoNotTrackEndpoints field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetDoNotTrackEndpoints() []ApidefTrackEndpointMeta {
	if o == nil || IsNil(o.DoNotTrackEndpoints) {
		var ret []ApidefTrackEndpointMeta
		return ret
	}
	return o.DoNotTrackEndpoints
}

// GetDoNotTrackEndpointsOk returns a tuple with the DoNotTrackEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetDoNotTrackEndpointsOk() ([]ApidefTrackEndpointMeta, bool) {
	if o == nil || IsNil(o.DoNotTrackEndpoints) {
		return nil, false
	}
	return o.DoNotTrackEndpoints, true
}

// HasDoNotTrackEndpoints returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasDoNotTrackEndpoints() bool {
	if o != nil && !IsNil(o.DoNotTrackEndpoints) {
		return true
	}

	return false
}

// SetDoNotTrackEndpoints gets a reference to the given []ApidefTrackEndpointMeta and assigns it to the DoNotTrackEndpoints field.
func (o *ApidefExtendedPathsSet) SetDoNotTrackEndpoints(v []ApidefTrackEndpointMeta) {
	o.DoNotTrackEndpoints = v
}

// GetGoPlugin returns the GoPlugin field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetGoPlugin() []ApidefGoPluginMeta {
	if o == nil || IsNil(o.GoPlugin) {
		var ret []ApidefGoPluginMeta
		return ret
	}
	return o.GoPlugin
}

// GetGoPluginOk returns a tuple with the GoPlugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetGoPluginOk() ([]ApidefGoPluginMeta, bool) {
	if o == nil || IsNil(o.GoPlugin) {
		return nil, false
	}
	return o.GoPlugin, true
}

// HasGoPlugin returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasGoPlugin() bool {
	if o != nil && !IsNil(o.GoPlugin) {
		return true
	}

	return false
}

// SetGoPlugin gets a reference to the given []ApidefGoPluginMeta and assigns it to the GoPlugin field.
func (o *ApidefExtendedPathsSet) SetGoPlugin(v []ApidefGoPluginMeta) {
	o.GoPlugin = v
}

// GetHardTimeouts returns the HardTimeouts field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetHardTimeouts() []ApidefHardTimeoutMeta {
	if o == nil || IsNil(o.HardTimeouts) {
		var ret []ApidefHardTimeoutMeta
		return ret
	}
	return o.HardTimeouts
}

// GetHardTimeoutsOk returns a tuple with the HardTimeouts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetHardTimeoutsOk() ([]ApidefHardTimeoutMeta, bool) {
	if o == nil || IsNil(o.HardTimeouts) {
		return nil, false
	}
	return o.HardTimeouts, true
}

// HasHardTimeouts returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasHardTimeouts() bool {
	if o != nil && !IsNil(o.HardTimeouts) {
		return true
	}

	return false
}

// SetHardTimeouts gets a reference to the given []ApidefHardTimeoutMeta and assigns it to the HardTimeouts field.
func (o *ApidefExtendedPathsSet) SetHardTimeouts(v []ApidefHardTimeoutMeta) {
	o.HardTimeouts = v
}

// GetIgnored returns the Ignored field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetIgnored() []ApidefEndPointMeta {
	if o == nil || IsNil(o.Ignored) {
		var ret []ApidefEndPointMeta
		return ret
	}
	return o.Ignored
}

// GetIgnoredOk returns a tuple with the Ignored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetIgnoredOk() ([]ApidefEndPointMeta, bool) {
	if o == nil || IsNil(o.Ignored) {
		return nil, false
	}
	return o.Ignored, true
}

// HasIgnored returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasIgnored() bool {
	if o != nil && !IsNil(o.Ignored) {
		return true
	}

	return false
}

// SetIgnored gets a reference to the given []ApidefEndPointMeta and assigns it to the Ignored field.
func (o *ApidefExtendedPathsSet) SetIgnored(v []ApidefEndPointMeta) {
	o.Ignored = v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetInternal() []ApidefInternalMeta {
	if o == nil || IsNil(o.Internal) {
		var ret []ApidefInternalMeta
		return ret
	}
	return o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetInternalOk() ([]ApidefInternalMeta, bool) {
	if o == nil || IsNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasInternal() bool {
	if o != nil && !IsNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given []ApidefInternalMeta and assigns it to the Internal field.
func (o *ApidefExtendedPathsSet) SetInternal(v []ApidefInternalMeta) {
	o.Internal = v
}

// GetMethodTransforms returns the MethodTransforms field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetMethodTransforms() []ApidefMethodTransformMeta {
	if o == nil || IsNil(o.MethodTransforms) {
		var ret []ApidefMethodTransformMeta
		return ret
	}
	return o.MethodTransforms
}

// GetMethodTransformsOk returns a tuple with the MethodTransforms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetMethodTransformsOk() ([]ApidefMethodTransformMeta, bool) {
	if o == nil || IsNil(o.MethodTransforms) {
		return nil, false
	}
	return o.MethodTransforms, true
}

// HasMethodTransforms returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasMethodTransforms() bool {
	if o != nil && !IsNil(o.MethodTransforms) {
		return true
	}

	return false
}

// SetMethodTransforms gets a reference to the given []ApidefMethodTransformMeta and assigns it to the MethodTransforms field.
func (o *ApidefExtendedPathsSet) SetMethodTransforms(v []ApidefMethodTransformMeta) {
	o.MethodTransforms = v
}

// GetMockResponse returns the MockResponse field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetMockResponse() []ApidefMockResponseMeta {
	if o == nil || IsNil(o.MockResponse) {
		var ret []ApidefMockResponseMeta
		return ret
	}
	return o.MockResponse
}

// GetMockResponseOk returns a tuple with the MockResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetMockResponseOk() ([]ApidefMockResponseMeta, bool) {
	if o == nil || IsNil(o.MockResponse) {
		return nil, false
	}
	return o.MockResponse, true
}

// HasMockResponse returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasMockResponse() bool {
	if o != nil && !IsNil(o.MockResponse) {
		return true
	}

	return false
}

// SetMockResponse gets a reference to the given []ApidefMockResponseMeta and assigns it to the MockResponse field.
func (o *ApidefExtendedPathsSet) SetMockResponse(v []ApidefMockResponseMeta) {
	o.MockResponse = v
}

// GetPersistGraphql returns the PersistGraphql field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApidefExtendedPathsSet) GetPersistGraphql() []ApidefPersistGraphQLMeta {
	if o == nil {
		var ret []ApidefPersistGraphQLMeta
		return ret
	}
	return o.PersistGraphql
}

// GetPersistGraphqlOk returns a tuple with the PersistGraphql field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApidefExtendedPathsSet) GetPersistGraphqlOk() ([]ApidefPersistGraphQLMeta, bool) {
	if o == nil || IsNil(o.PersistGraphql) {
		return nil, false
	}
	return o.PersistGraphql, true
}

// HasPersistGraphql returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasPersistGraphql() bool {
	if o != nil && !IsNil(o.PersistGraphql) {
		return true
	}

	return false
}

// SetPersistGraphql gets a reference to the given []ApidefPersistGraphQLMeta and assigns it to the PersistGraphql field.
func (o *ApidefExtendedPathsSet) SetPersistGraphql(v []ApidefPersistGraphQLMeta) {
	o.PersistGraphql = v
}

// GetSizeLimits returns the SizeLimits field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetSizeLimits() []ApidefRequestSizeMeta {
	if o == nil || IsNil(o.SizeLimits) {
		var ret []ApidefRequestSizeMeta
		return ret
	}
	return o.SizeLimits
}

// GetSizeLimitsOk returns a tuple with the SizeLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetSizeLimitsOk() ([]ApidefRequestSizeMeta, bool) {
	if o == nil || IsNil(o.SizeLimits) {
		return nil, false
	}
	return o.SizeLimits, true
}

// HasSizeLimits returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasSizeLimits() bool {
	if o != nil && !IsNil(o.SizeLimits) {
		return true
	}

	return false
}

// SetSizeLimits gets a reference to the given []ApidefRequestSizeMeta and assigns it to the SizeLimits field.
func (o *ApidefExtendedPathsSet) SetSizeLimits(v []ApidefRequestSizeMeta) {
	o.SizeLimits = v
}

// GetTrackEndpoints returns the TrackEndpoints field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetTrackEndpoints() []ApidefTrackEndpointMeta {
	if o == nil || IsNil(o.TrackEndpoints) {
		var ret []ApidefTrackEndpointMeta
		return ret
	}
	return o.TrackEndpoints
}

// GetTrackEndpointsOk returns a tuple with the TrackEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetTrackEndpointsOk() ([]ApidefTrackEndpointMeta, bool) {
	if o == nil || IsNil(o.TrackEndpoints) {
		return nil, false
	}
	return o.TrackEndpoints, true
}

// HasTrackEndpoints returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasTrackEndpoints() bool {
	if o != nil && !IsNil(o.TrackEndpoints) {
		return true
	}

	return false
}

// SetTrackEndpoints gets a reference to the given []ApidefTrackEndpointMeta and assigns it to the TrackEndpoints field.
func (o *ApidefExtendedPathsSet) SetTrackEndpoints(v []ApidefTrackEndpointMeta) {
	o.TrackEndpoints = v
}

// GetTransform returns the Transform field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetTransform() []ApidefTemplateMeta {
	if o == nil || IsNil(o.Transform) {
		var ret []ApidefTemplateMeta
		return ret
	}
	return o.Transform
}

// GetTransformOk returns a tuple with the Transform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetTransformOk() ([]ApidefTemplateMeta, bool) {
	if o == nil || IsNil(o.Transform) {
		return nil, false
	}
	return o.Transform, true
}

// HasTransform returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasTransform() bool {
	if o != nil && !IsNil(o.Transform) {
		return true
	}

	return false
}

// SetTransform gets a reference to the given []ApidefTemplateMeta and assigns it to the Transform field.
func (o *ApidefExtendedPathsSet) SetTransform(v []ApidefTemplateMeta) {
	o.Transform = v
}

// GetTransformHeaders returns the TransformHeaders field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetTransformHeaders() []ApidefHeaderInjectionMeta {
	if o == nil || IsNil(o.TransformHeaders) {
		var ret []ApidefHeaderInjectionMeta
		return ret
	}
	return o.TransformHeaders
}

// GetTransformHeadersOk returns a tuple with the TransformHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetTransformHeadersOk() ([]ApidefHeaderInjectionMeta, bool) {
	if o == nil || IsNil(o.TransformHeaders) {
		return nil, false
	}
	return o.TransformHeaders, true
}

// HasTransformHeaders returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasTransformHeaders() bool {
	if o != nil && !IsNil(o.TransformHeaders) {
		return true
	}

	return false
}

// SetTransformHeaders gets a reference to the given []ApidefHeaderInjectionMeta and assigns it to the TransformHeaders field.
func (o *ApidefExtendedPathsSet) SetTransformHeaders(v []ApidefHeaderInjectionMeta) {
	o.TransformHeaders = v
}

// GetTransformJq returns the TransformJq field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetTransformJq() []ApidefTransformJQMeta {
	if o == nil || IsNil(o.TransformJq) {
		var ret []ApidefTransformJQMeta
		return ret
	}
	return o.TransformJq
}

// GetTransformJqOk returns a tuple with the TransformJq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetTransformJqOk() ([]ApidefTransformJQMeta, bool) {
	if o == nil || IsNil(o.TransformJq) {
		return nil, false
	}
	return o.TransformJq, true
}

// HasTransformJq returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasTransformJq() bool {
	if o != nil && !IsNil(o.TransformJq) {
		return true
	}

	return false
}

// SetTransformJq gets a reference to the given []ApidefTransformJQMeta and assigns it to the TransformJq field.
func (o *ApidefExtendedPathsSet) SetTransformJq(v []ApidefTransformJQMeta) {
	o.TransformJq = v
}

// GetTransformJqResponse returns the TransformJqResponse field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetTransformJqResponse() []ApidefTransformJQMeta {
	if o == nil || IsNil(o.TransformJqResponse) {
		var ret []ApidefTransformJQMeta
		return ret
	}
	return o.TransformJqResponse
}

// GetTransformJqResponseOk returns a tuple with the TransformJqResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetTransformJqResponseOk() ([]ApidefTransformJQMeta, bool) {
	if o == nil || IsNil(o.TransformJqResponse) {
		return nil, false
	}
	return o.TransformJqResponse, true
}

// HasTransformJqResponse returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasTransformJqResponse() bool {
	if o != nil && !IsNil(o.TransformJqResponse) {
		return true
	}

	return false
}

// SetTransformJqResponse gets a reference to the given []ApidefTransformJQMeta and assigns it to the TransformJqResponse field.
func (o *ApidefExtendedPathsSet) SetTransformJqResponse(v []ApidefTransformJQMeta) {
	o.TransformJqResponse = v
}

// GetTransformResponse returns the TransformResponse field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetTransformResponse() []ApidefTemplateMeta {
	if o == nil || IsNil(o.TransformResponse) {
		var ret []ApidefTemplateMeta
		return ret
	}
	return o.TransformResponse
}

// GetTransformResponseOk returns a tuple with the TransformResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetTransformResponseOk() ([]ApidefTemplateMeta, bool) {
	if o == nil || IsNil(o.TransformResponse) {
		return nil, false
	}
	return o.TransformResponse, true
}

// HasTransformResponse returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasTransformResponse() bool {
	if o != nil && !IsNil(o.TransformResponse) {
		return true
	}

	return false
}

// SetTransformResponse gets a reference to the given []ApidefTemplateMeta and assigns it to the TransformResponse field.
func (o *ApidefExtendedPathsSet) SetTransformResponse(v []ApidefTemplateMeta) {
	o.TransformResponse = v
}

// GetTransformResponseHeaders returns the TransformResponseHeaders field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetTransformResponseHeaders() []ApidefHeaderInjectionMeta {
	if o == nil || IsNil(o.TransformResponseHeaders) {
		var ret []ApidefHeaderInjectionMeta
		return ret
	}
	return o.TransformResponseHeaders
}

// GetTransformResponseHeadersOk returns a tuple with the TransformResponseHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetTransformResponseHeadersOk() ([]ApidefHeaderInjectionMeta, bool) {
	if o == nil || IsNil(o.TransformResponseHeaders) {
		return nil, false
	}
	return o.TransformResponseHeaders, true
}

// HasTransformResponseHeaders returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasTransformResponseHeaders() bool {
	if o != nil && !IsNil(o.TransformResponseHeaders) {
		return true
	}

	return false
}

// SetTransformResponseHeaders gets a reference to the given []ApidefHeaderInjectionMeta and assigns it to the TransformResponseHeaders field.
func (o *ApidefExtendedPathsSet) SetTransformResponseHeaders(v []ApidefHeaderInjectionMeta) {
	o.TransformResponseHeaders = v
}

// GetUrlRewrites returns the UrlRewrites field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetUrlRewrites() []ApidefURLRewriteMeta {
	if o == nil || IsNil(o.UrlRewrites) {
		var ret []ApidefURLRewriteMeta
		return ret
	}
	return o.UrlRewrites
}

// GetUrlRewritesOk returns a tuple with the UrlRewrites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetUrlRewritesOk() ([]ApidefURLRewriteMeta, bool) {
	if o == nil || IsNil(o.UrlRewrites) {
		return nil, false
	}
	return o.UrlRewrites, true
}

// HasUrlRewrites returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasUrlRewrites() bool {
	if o != nil && !IsNil(o.UrlRewrites) {
		return true
	}

	return false
}

// SetUrlRewrites gets a reference to the given []ApidefURLRewriteMeta and assigns it to the UrlRewrites field.
func (o *ApidefExtendedPathsSet) SetUrlRewrites(v []ApidefURLRewriteMeta) {
	o.UrlRewrites = v
}

// GetValidateJson returns the ValidateJson field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetValidateJson() []ApidefValidatePathMeta {
	if o == nil || IsNil(o.ValidateJson) {
		var ret []ApidefValidatePathMeta
		return ret
	}
	return o.ValidateJson
}

// GetValidateJsonOk returns a tuple with the ValidateJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetValidateJsonOk() ([]ApidefValidatePathMeta, bool) {
	if o == nil || IsNil(o.ValidateJson) {
		return nil, false
	}
	return o.ValidateJson, true
}

// HasValidateJson returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasValidateJson() bool {
	if o != nil && !IsNil(o.ValidateJson) {
		return true
	}

	return false
}

// SetValidateJson gets a reference to the given []ApidefValidatePathMeta and assigns it to the ValidateJson field.
func (o *ApidefExtendedPathsSet) SetValidateJson(v []ApidefValidatePathMeta) {
	o.ValidateJson = v
}

// GetValidateRequest returns the ValidateRequest field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetValidateRequest() []ApidefValidateRequestMeta {
	if o == nil || IsNil(o.ValidateRequest) {
		var ret []ApidefValidateRequestMeta
		return ret
	}
	return o.ValidateRequest
}

// GetValidateRequestOk returns a tuple with the ValidateRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetValidateRequestOk() ([]ApidefValidateRequestMeta, bool) {
	if o == nil || IsNil(o.ValidateRequest) {
		return nil, false
	}
	return o.ValidateRequest, true
}

// HasValidateRequest returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasValidateRequest() bool {
	if o != nil && !IsNil(o.ValidateRequest) {
		return true
	}

	return false
}

// SetValidateRequest gets a reference to the given []ApidefValidateRequestMeta and assigns it to the ValidateRequest field.
func (o *ApidefExtendedPathsSet) SetValidateRequest(v []ApidefValidateRequestMeta) {
	o.ValidateRequest = v
}

// GetVirtual returns the Virtual field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetVirtual() []ApidefVirtualMeta {
	if o == nil || IsNil(o.Virtual) {
		var ret []ApidefVirtualMeta
		return ret
	}
	return o.Virtual
}

// GetVirtualOk returns a tuple with the Virtual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetVirtualOk() ([]ApidefVirtualMeta, bool) {
	if o == nil || IsNil(o.Virtual) {
		return nil, false
	}
	return o.Virtual, true
}

// HasVirtual returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasVirtual() bool {
	if o != nil && !IsNil(o.Virtual) {
		return true
	}

	return false
}

// SetVirtual gets a reference to the given []ApidefVirtualMeta and assigns it to the Virtual field.
func (o *ApidefExtendedPathsSet) SetVirtual(v []ApidefVirtualMeta) {
	o.Virtual = v
}

// GetWhiteList returns the WhiteList field value if set, zero value otherwise.
func (o *ApidefExtendedPathsSet) GetWhiteList() []ApidefEndPointMeta {
	if o == nil || IsNil(o.WhiteList) {
		var ret []ApidefEndPointMeta
		return ret
	}
	return o.WhiteList
}

// GetWhiteListOk returns a tuple with the WhiteList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefExtendedPathsSet) GetWhiteListOk() ([]ApidefEndPointMeta, bool) {
	if o == nil || IsNil(o.WhiteList) {
		return nil, false
	}
	return o.WhiteList, true
}

// HasWhiteList returns a boolean if a field has been set.
func (o *ApidefExtendedPathsSet) HasWhiteList() bool {
	if o != nil && !IsNil(o.WhiteList) {
		return true
	}

	return false
}

// SetWhiteList gets a reference to the given []ApidefEndPointMeta and assigns it to the WhiteList field.
func (o *ApidefExtendedPathsSet) SetWhiteList(v []ApidefEndPointMeta) {
	o.WhiteList = v
}

func (o ApidefExtendedPathsSet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApidefExtendedPathsSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdvanceCacheConfig) {
		toSerialize["advance_cache_config"] = o.AdvanceCacheConfig
	}
	if !IsNil(o.BlackList) {
		toSerialize["black_list"] = o.BlackList
	}
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	if !IsNil(o.CircuitBreakers) {
		toSerialize["circuit_breakers"] = o.CircuitBreakers
	}
	if !IsNil(o.DoNotTrackEndpoints) {
		toSerialize["do_not_track_endpoints"] = o.DoNotTrackEndpoints
	}
	if !IsNil(o.GoPlugin) {
		toSerialize["go_plugin"] = o.GoPlugin
	}
	if !IsNil(o.HardTimeouts) {
		toSerialize["hard_timeouts"] = o.HardTimeouts
	}
	if !IsNil(o.Ignored) {
		toSerialize["ignored"] = o.Ignored
	}
	if !IsNil(o.Internal) {
		toSerialize["internal"] = o.Internal
	}
	if !IsNil(o.MethodTransforms) {
		toSerialize["method_transforms"] = o.MethodTransforms
	}
	if !IsNil(o.MockResponse) {
		toSerialize["mock_response"] = o.MockResponse
	}
	if o.PersistGraphql != nil {
		toSerialize["persist_graphql"] = o.PersistGraphql
	}
	if !IsNil(o.SizeLimits) {
		toSerialize["size_limits"] = o.SizeLimits
	}
	if !IsNil(o.TrackEndpoints) {
		toSerialize["track_endpoints"] = o.TrackEndpoints
	}
	if !IsNil(o.Transform) {
		toSerialize["transform"] = o.Transform
	}
	if !IsNil(o.TransformHeaders) {
		toSerialize["transform_headers"] = o.TransformHeaders
	}
	if !IsNil(o.TransformJq) {
		toSerialize["transform_jq"] = o.TransformJq
	}
	if !IsNil(o.TransformJqResponse) {
		toSerialize["transform_jq_response"] = o.TransformJqResponse
	}
	if !IsNil(o.TransformResponse) {
		toSerialize["transform_response"] = o.TransformResponse
	}
	if !IsNil(o.TransformResponseHeaders) {
		toSerialize["transform_response_headers"] = o.TransformResponseHeaders
	}
	if !IsNil(o.UrlRewrites) {
		toSerialize["url_rewrites"] = o.UrlRewrites
	}
	if !IsNil(o.ValidateJson) {
		toSerialize["validate_json"] = o.ValidateJson
	}
	if !IsNil(o.ValidateRequest) {
		toSerialize["validate_request"] = o.ValidateRequest
	}
	if !IsNil(o.Virtual) {
		toSerialize["virtual"] = o.Virtual
	}
	if !IsNil(o.WhiteList) {
		toSerialize["white_list"] = o.WhiteList
	}
	return toSerialize, nil
}

type NullableApidefExtendedPathsSet struct {
	value *ApidefExtendedPathsSet
	isSet bool
}

func (v NullableApidefExtendedPathsSet) Get() *ApidefExtendedPathsSet {
	return v.value
}

func (v *NullableApidefExtendedPathsSet) Set(val *ApidefExtendedPathsSet) {
	v.value = val
	v.isSet = true
}

func (v NullableApidefExtendedPathsSet) IsSet() bool {
	return v.isSet
}

func (v *NullableApidefExtendedPathsSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApidefExtendedPathsSet(val *ApidefExtendedPathsSet) *NullableApidefExtendedPathsSet {
	return &NullableApidefExtendedPathsSet{value: val, isSet: true}
}

func (v NullableApidefExtendedPathsSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApidefExtendedPathsSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
