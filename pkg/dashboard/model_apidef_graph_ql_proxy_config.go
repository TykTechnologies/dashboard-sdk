/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the ApidefGraphQLProxyConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApidefGraphQLProxyConfig{}

// ApidefGraphQLProxyConfig struct for ApidefGraphQLProxyConfig
type ApidefGraphQLProxyConfig struct {
	AuthHeaders           map[string]string                            `json:"auth_headers,omitempty"`
	Features              *ApidefGraphQLProxyFeaturesConfig            `json:"features,omitempty"`
	RequestHeaders        map[string]string                            `json:"request_headers,omitempty"`
	RequestHeadersRewrite map[string]ApidefRequestHeadersRewriteConfig `json:"request_headers_rewrite,omitempty"`
	SubscriptionType      *string                                      `json:"subscription_type,omitempty"`
	UseResponseExtensions *ApidefGraphQLResponseExtensions             `json:"use_response_extensions,omitempty"`
}

// NewApidefGraphQLProxyConfig instantiates a new ApidefGraphQLProxyConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApidefGraphQLProxyConfig() *ApidefGraphQLProxyConfig {
	this := ApidefGraphQLProxyConfig{}
	return &this
}

// NewApidefGraphQLProxyConfigWithDefaults instantiates a new ApidefGraphQLProxyConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApidefGraphQLProxyConfigWithDefaults() *ApidefGraphQLProxyConfig {
	this := ApidefGraphQLProxyConfig{}
	return &this
}

// GetAuthHeaders returns the AuthHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApidefGraphQLProxyConfig) GetAuthHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.AuthHeaders
}

// GetAuthHeadersOk returns a tuple with the AuthHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApidefGraphQLProxyConfig) GetAuthHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AuthHeaders) {
		return nil, false
	}
	return &o.AuthHeaders, true
}

// HasAuthHeaders returns a boolean if a field has been set.
func (o *ApidefGraphQLProxyConfig) HasAuthHeaders() bool {
	if o != nil && !IsNil(o.AuthHeaders) {
		return true
	}

	return false
}

// SetAuthHeaders gets a reference to the given map[string]string and assigns it to the AuthHeaders field.
func (o *ApidefGraphQLProxyConfig) SetAuthHeaders(v map[string]string) {
	o.AuthHeaders = v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *ApidefGraphQLProxyConfig) GetFeatures() ApidefGraphQLProxyFeaturesConfig {
	if o == nil || IsNil(o.Features) {
		var ret ApidefGraphQLProxyFeaturesConfig
		return ret
	}
	return *o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefGraphQLProxyConfig) GetFeaturesOk() (*ApidefGraphQLProxyFeaturesConfig, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *ApidefGraphQLProxyConfig) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given ApidefGraphQLProxyFeaturesConfig and assigns it to the Features field.
func (o *ApidefGraphQLProxyConfig) SetFeatures(v ApidefGraphQLProxyFeaturesConfig) {
	o.Features = &v
}

// GetRequestHeaders returns the RequestHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApidefGraphQLProxyConfig) GetRequestHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.RequestHeaders
}

// GetRequestHeadersOk returns a tuple with the RequestHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApidefGraphQLProxyConfig) GetRequestHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.RequestHeaders) {
		return nil, false
	}
	return &o.RequestHeaders, true
}

// HasRequestHeaders returns a boolean if a field has been set.
func (o *ApidefGraphQLProxyConfig) HasRequestHeaders() bool {
	if o != nil && !IsNil(o.RequestHeaders) {
		return true
	}

	return false
}

// SetRequestHeaders gets a reference to the given map[string]string and assigns it to the RequestHeaders field.
func (o *ApidefGraphQLProxyConfig) SetRequestHeaders(v map[string]string) {
	o.RequestHeaders = v
}

// GetRequestHeadersRewrite returns the RequestHeadersRewrite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApidefGraphQLProxyConfig) GetRequestHeadersRewrite() map[string]ApidefRequestHeadersRewriteConfig {
	if o == nil {
		var ret map[string]ApidefRequestHeadersRewriteConfig
		return ret
	}
	return o.RequestHeadersRewrite
}

// GetRequestHeadersRewriteOk returns a tuple with the RequestHeadersRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApidefGraphQLProxyConfig) GetRequestHeadersRewriteOk() (*map[string]ApidefRequestHeadersRewriteConfig, bool) {
	if o == nil || IsNil(o.RequestHeadersRewrite) {
		return nil, false
	}
	return &o.RequestHeadersRewrite, true
}

// HasRequestHeadersRewrite returns a boolean if a field has been set.
func (o *ApidefGraphQLProxyConfig) HasRequestHeadersRewrite() bool {
	if o != nil && !IsNil(o.RequestHeadersRewrite) {
		return true
	}

	return false
}

// SetRequestHeadersRewrite gets a reference to the given map[string]ApidefRequestHeadersRewriteConfig and assigns it to the RequestHeadersRewrite field.
func (o *ApidefGraphQLProxyConfig) SetRequestHeadersRewrite(v map[string]ApidefRequestHeadersRewriteConfig) {
	o.RequestHeadersRewrite = v
}

// GetSubscriptionType returns the SubscriptionType field value if set, zero value otherwise.
func (o *ApidefGraphQLProxyConfig) GetSubscriptionType() string {
	if o == nil || IsNil(o.SubscriptionType) {
		var ret string
		return ret
	}
	return *o.SubscriptionType
}

// GetSubscriptionTypeOk returns a tuple with the SubscriptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefGraphQLProxyConfig) GetSubscriptionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionType) {
		return nil, false
	}
	return o.SubscriptionType, true
}

// HasSubscriptionType returns a boolean if a field has been set.
func (o *ApidefGraphQLProxyConfig) HasSubscriptionType() bool {
	if o != nil && !IsNil(o.SubscriptionType) {
		return true
	}

	return false
}

// SetSubscriptionType gets a reference to the given string and assigns it to the SubscriptionType field.
func (o *ApidefGraphQLProxyConfig) SetSubscriptionType(v string) {
	o.SubscriptionType = &v
}

// GetUseResponseExtensions returns the UseResponseExtensions field value if set, zero value otherwise.
func (o *ApidefGraphQLProxyConfig) GetUseResponseExtensions() ApidefGraphQLResponseExtensions {
	if o == nil || IsNil(o.UseResponseExtensions) {
		var ret ApidefGraphQLResponseExtensions
		return ret
	}
	return *o.UseResponseExtensions
}

// GetUseResponseExtensionsOk returns a tuple with the UseResponseExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefGraphQLProxyConfig) GetUseResponseExtensionsOk() (*ApidefGraphQLResponseExtensions, bool) {
	if o == nil || IsNil(o.UseResponseExtensions) {
		return nil, false
	}
	return o.UseResponseExtensions, true
}

// HasUseResponseExtensions returns a boolean if a field has been set.
func (o *ApidefGraphQLProxyConfig) HasUseResponseExtensions() bool {
	if o != nil && !IsNil(o.UseResponseExtensions) {
		return true
	}

	return false
}

// SetUseResponseExtensions gets a reference to the given ApidefGraphQLResponseExtensions and assigns it to the UseResponseExtensions field.
func (o *ApidefGraphQLProxyConfig) SetUseResponseExtensions(v ApidefGraphQLResponseExtensions) {
	o.UseResponseExtensions = &v
}

func (o ApidefGraphQLProxyConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApidefGraphQLProxyConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthHeaders != nil {
		toSerialize["auth_headers"] = o.AuthHeaders
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if o.RequestHeaders != nil {
		toSerialize["request_headers"] = o.RequestHeaders
	}
	if o.RequestHeadersRewrite != nil {
		toSerialize["request_headers_rewrite"] = o.RequestHeadersRewrite
	}
	if !IsNil(o.SubscriptionType) {
		toSerialize["subscription_type"] = o.SubscriptionType
	}
	if !IsNil(o.UseResponseExtensions) {
		toSerialize["use_response_extensions"] = o.UseResponseExtensions
	}
	return toSerialize, nil
}

type NullableApidefGraphQLProxyConfig struct {
	value *ApidefGraphQLProxyConfig
	isSet bool
}

func (v NullableApidefGraphQLProxyConfig) Get() *ApidefGraphQLProxyConfig {
	return v.value
}

func (v *NullableApidefGraphQLProxyConfig) Set(val *ApidefGraphQLProxyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApidefGraphQLProxyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApidefGraphQLProxyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApidefGraphQLProxyConfig(val *ApidefGraphQLProxyConfig) *NullableApidefGraphQLProxyConfig {
	return &NullableApidefGraphQLProxyConfig{value: val, isSet: true}
}

func (v NullableApidefGraphQLProxyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApidefGraphQLProxyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
