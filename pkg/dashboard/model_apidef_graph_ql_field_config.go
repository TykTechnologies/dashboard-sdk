/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the ApidefGraphQLFieldConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApidefGraphQLFieldConfig{}

// ApidefGraphQLFieldConfig struct for ApidefGraphQLFieldConfig
type ApidefGraphQLFieldConfig struct {
	DisableDefaultMapping *bool    `json:"disable_default_mapping,omitempty"`
	FieldName             *string  `json:"field_name,omitempty"`
	Path                  []string `json:"path,omitempty"`
	TypeName              *string  `json:"type_name,omitempty"`
}

// NewApidefGraphQLFieldConfig instantiates a new ApidefGraphQLFieldConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApidefGraphQLFieldConfig() *ApidefGraphQLFieldConfig {
	this := ApidefGraphQLFieldConfig{}
	return &this
}

// NewApidefGraphQLFieldConfigWithDefaults instantiates a new ApidefGraphQLFieldConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApidefGraphQLFieldConfigWithDefaults() *ApidefGraphQLFieldConfig {
	this := ApidefGraphQLFieldConfig{}
	return &this
}

// GetDisableDefaultMapping returns the DisableDefaultMapping field value if set, zero value otherwise.
func (o *ApidefGraphQLFieldConfig) GetDisableDefaultMapping() bool {
	if o == nil || IsNil(o.DisableDefaultMapping) {
		var ret bool
		return ret
	}
	return *o.DisableDefaultMapping
}

// GetDisableDefaultMappingOk returns a tuple with the DisableDefaultMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefGraphQLFieldConfig) GetDisableDefaultMappingOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableDefaultMapping) {
		return nil, false
	}
	return o.DisableDefaultMapping, true
}

// HasDisableDefaultMapping returns a boolean if a field has been set.
func (o *ApidefGraphQLFieldConfig) HasDisableDefaultMapping() bool {
	if o != nil && !IsNil(o.DisableDefaultMapping) {
		return true
	}

	return false
}

// SetDisableDefaultMapping gets a reference to the given bool and assigns it to the DisableDefaultMapping field.
func (o *ApidefGraphQLFieldConfig) SetDisableDefaultMapping(v bool) {
	o.DisableDefaultMapping = &v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *ApidefGraphQLFieldConfig) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefGraphQLFieldConfig) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *ApidefGraphQLFieldConfig) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *ApidefGraphQLFieldConfig) SetFieldName(v string) {
	o.FieldName = &v
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApidefGraphQLFieldConfig) GetPath() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApidefGraphQLFieldConfig) GetPathOk() ([]string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ApidefGraphQLFieldConfig) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given []string and assigns it to the Path field.
func (o *ApidefGraphQLFieldConfig) SetPath(v []string) {
	o.Path = v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *ApidefGraphQLFieldConfig) GetTypeName() string {
	if o == nil || IsNil(o.TypeName) {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefGraphQLFieldConfig) GetTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.TypeName) {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *ApidefGraphQLFieldConfig) HasTypeName() bool {
	if o != nil && !IsNil(o.TypeName) {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *ApidefGraphQLFieldConfig) SetTypeName(v string) {
	o.TypeName = &v
}

func (o ApidefGraphQLFieldConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApidefGraphQLFieldConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableDefaultMapping) {
		toSerialize["disable_default_mapping"] = o.DisableDefaultMapping
	}
	if !IsNil(o.FieldName) {
		toSerialize["field_name"] = o.FieldName
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.TypeName) {
		toSerialize["type_name"] = o.TypeName
	}
	return toSerialize, nil
}

type NullableApidefGraphQLFieldConfig struct {
	value *ApidefGraphQLFieldConfig
	isSet bool
}

func (v NullableApidefGraphQLFieldConfig) Get() *ApidefGraphQLFieldConfig {
	return v.value
}

func (v *NullableApidefGraphQLFieldConfig) Set(val *ApidefGraphQLFieldConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApidefGraphQLFieldConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApidefGraphQLFieldConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApidefGraphQLFieldConfig(val *ApidefGraphQLFieldConfig) *NullableApidefGraphQLFieldConfig {
	return &NullableApidefGraphQLFieldConfig{value: val, isSet: true}
}

func (v NullableApidefGraphQLFieldConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApidefGraphQLFieldConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
