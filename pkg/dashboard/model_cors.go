/*
Tyk Dashboard API

 ## <a name=\"introduction\"></a> Introduction  The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.  A common question around using a database-backed configuration is how to programmatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.  The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).  ## <a name=\"security-hierarchy\"></a> Security Hierarchy  The Dashboard API provides a more structured security layer to managing Tyk nodes.  ### Organisations, APIs and Users  With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming and creating definitions), the following security model is applied to the management of Upstream APIs:  * **Organisations**: All APIs are *owned* by an organisation, this is designated by the 'OrgID' parameter in the API Definition. * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access). * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations. * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation. * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.  In order to use the Dashboard API, you'll need to get the 'Tyk Dashboard API Access Credentials' secret from your user profile on the Dashboard UI.  The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:   authorization: <your-secret>

API version: 5.7.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the CORS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CORS{}

// CORS struct for CORS
type CORS struct {
	AllowCredentials   *bool    `json:"allowCredentials,omitempty"`
	AllowedHeaders     []string `json:"allowedHeaders,omitempty"`
	AllowedMethods     []string `json:"allowedMethods,omitempty"`
	AllowedOrigins     []string `json:"allowedOrigins,omitempty"`
	Debug              *bool    `json:"debug,omitempty"`
	Enabled            *bool    `json:"enabled,omitempty"`
	ExposedHeaders     []string `json:"exposedHeaders,omitempty"`
	MaxAge             *int32   `json:"maxAge,omitempty"`
	OptionsPassthrough *bool    `json:"optionsPassthrough,omitempty"`
}

// NewCORS instantiates a new CORS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCORS() *CORS {
	this := CORS{}
	return &this
}

// NewCORSWithDefaults instantiates a new CORS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCORSWithDefaults() *CORS {
	this := CORS{}
	return &this
}

// GetAllowCredentials returns the AllowCredentials field value if set, zero value otherwise.
func (o *CORS) GetAllowCredentials() bool {
	if o == nil || IsNil(o.AllowCredentials) {
		var ret bool
		return ret
	}
	return *o.AllowCredentials
}

// GetAllowCredentialsOk returns a tuple with the AllowCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORS) GetAllowCredentialsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowCredentials) {
		return nil, false
	}
	return o.AllowCredentials, true
}

// HasAllowCredentials returns a boolean if a field has been set.
func (o *CORS) HasAllowCredentials() bool {
	if o != nil && !IsNil(o.AllowCredentials) {
		return true
	}

	return false
}

// SetAllowCredentials gets a reference to the given bool and assigns it to the AllowCredentials field.
func (o *CORS) SetAllowCredentials(v bool) {
	o.AllowCredentials = &v
}

// GetAllowedHeaders returns the AllowedHeaders field value if set, zero value otherwise.
func (o *CORS) GetAllowedHeaders() []string {
	if o == nil || IsNil(o.AllowedHeaders) {
		var ret []string
		return ret
	}
	return o.AllowedHeaders
}

// GetAllowedHeadersOk returns a tuple with the AllowedHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORS) GetAllowedHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedHeaders) {
		return nil, false
	}
	return o.AllowedHeaders, true
}

// HasAllowedHeaders returns a boolean if a field has been set.
func (o *CORS) HasAllowedHeaders() bool {
	if o != nil && !IsNil(o.AllowedHeaders) {
		return true
	}

	return false
}

// SetAllowedHeaders gets a reference to the given []string and assigns it to the AllowedHeaders field.
func (o *CORS) SetAllowedHeaders(v []string) {
	o.AllowedHeaders = v
}

// GetAllowedMethods returns the AllowedMethods field value if set, zero value otherwise.
func (o *CORS) GetAllowedMethods() []string {
	if o == nil || IsNil(o.AllowedMethods) {
		var ret []string
		return ret
	}
	return o.AllowedMethods
}

// GetAllowedMethodsOk returns a tuple with the AllowedMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORS) GetAllowedMethodsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedMethods) {
		return nil, false
	}
	return o.AllowedMethods, true
}

// HasAllowedMethods returns a boolean if a field has been set.
func (o *CORS) HasAllowedMethods() bool {
	if o != nil && !IsNil(o.AllowedMethods) {
		return true
	}

	return false
}

// SetAllowedMethods gets a reference to the given []string and assigns it to the AllowedMethods field.
func (o *CORS) SetAllowedMethods(v []string) {
	o.AllowedMethods = v
}

// GetAllowedOrigins returns the AllowedOrigins field value if set, zero value otherwise.
func (o *CORS) GetAllowedOrigins() []string {
	if o == nil || IsNil(o.AllowedOrigins) {
		var ret []string
		return ret
	}
	return o.AllowedOrigins
}

// GetAllowedOriginsOk returns a tuple with the AllowedOrigins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORS) GetAllowedOriginsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedOrigins) {
		return nil, false
	}
	return o.AllowedOrigins, true
}

// HasAllowedOrigins returns a boolean if a field has been set.
func (o *CORS) HasAllowedOrigins() bool {
	if o != nil && !IsNil(o.AllowedOrigins) {
		return true
	}

	return false
}

// SetAllowedOrigins gets a reference to the given []string and assigns it to the AllowedOrigins field.
func (o *CORS) SetAllowedOrigins(v []string) {
	o.AllowedOrigins = v
}

// GetDebug returns the Debug field value if set, zero value otherwise.
func (o *CORS) GetDebug() bool {
	if o == nil || IsNil(o.Debug) {
		var ret bool
		return ret
	}
	return *o.Debug
}

// GetDebugOk returns a tuple with the Debug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORS) GetDebugOk() (*bool, bool) {
	if o == nil || IsNil(o.Debug) {
		return nil, false
	}
	return o.Debug, true
}

// HasDebug returns a boolean if a field has been set.
func (o *CORS) HasDebug() bool {
	if o != nil && !IsNil(o.Debug) {
		return true
	}

	return false
}

// SetDebug gets a reference to the given bool and assigns it to the Debug field.
func (o *CORS) SetDebug(v bool) {
	o.Debug = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CORS) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORS) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CORS) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CORS) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExposedHeaders returns the ExposedHeaders field value if set, zero value otherwise.
func (o *CORS) GetExposedHeaders() []string {
	if o == nil || IsNil(o.ExposedHeaders) {
		var ret []string
		return ret
	}
	return o.ExposedHeaders
}

// GetExposedHeadersOk returns a tuple with the ExposedHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORS) GetExposedHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.ExposedHeaders) {
		return nil, false
	}
	return o.ExposedHeaders, true
}

// HasExposedHeaders returns a boolean if a field has been set.
func (o *CORS) HasExposedHeaders() bool {
	if o != nil && !IsNil(o.ExposedHeaders) {
		return true
	}

	return false
}

// SetExposedHeaders gets a reference to the given []string and assigns it to the ExposedHeaders field.
func (o *CORS) SetExposedHeaders(v []string) {
	o.ExposedHeaders = v
}

// GetMaxAge returns the MaxAge field value if set, zero value otherwise.
func (o *CORS) GetMaxAge() int32 {
	if o == nil || IsNil(o.MaxAge) {
		var ret int32
		return ret
	}
	return *o.MaxAge
}

// GetMaxAgeOk returns a tuple with the MaxAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORS) GetMaxAgeOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAge) {
		return nil, false
	}
	return o.MaxAge, true
}

// HasMaxAge returns a boolean if a field has been set.
func (o *CORS) HasMaxAge() bool {
	if o != nil && !IsNil(o.MaxAge) {
		return true
	}

	return false
}

// SetMaxAge gets a reference to the given int32 and assigns it to the MaxAge field.
func (o *CORS) SetMaxAge(v int32) {
	o.MaxAge = &v
}

// GetOptionsPassthrough returns the OptionsPassthrough field value if set, zero value otherwise.
func (o *CORS) GetOptionsPassthrough() bool {
	if o == nil || IsNil(o.OptionsPassthrough) {
		var ret bool
		return ret
	}
	return *o.OptionsPassthrough
}

// GetOptionsPassthroughOk returns a tuple with the OptionsPassthrough field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CORS) GetOptionsPassthroughOk() (*bool, bool) {
	if o == nil || IsNil(o.OptionsPassthrough) {
		return nil, false
	}
	return o.OptionsPassthrough, true
}

// HasOptionsPassthrough returns a boolean if a field has been set.
func (o *CORS) HasOptionsPassthrough() bool {
	if o != nil && !IsNil(o.OptionsPassthrough) {
		return true
	}

	return false
}

// SetOptionsPassthrough gets a reference to the given bool and assigns it to the OptionsPassthrough field.
func (o *CORS) SetOptionsPassthrough(v bool) {
	o.OptionsPassthrough = &v
}

func (o CORS) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CORS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowCredentials) {
		toSerialize["allowCredentials"] = o.AllowCredentials
	}
	if !IsNil(o.AllowedHeaders) {
		toSerialize["allowedHeaders"] = o.AllowedHeaders
	}
	if !IsNil(o.AllowedMethods) {
		toSerialize["allowedMethods"] = o.AllowedMethods
	}
	if !IsNil(o.AllowedOrigins) {
		toSerialize["allowedOrigins"] = o.AllowedOrigins
	}
	if !IsNil(o.Debug) {
		toSerialize["debug"] = o.Debug
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExposedHeaders) {
		toSerialize["exposedHeaders"] = o.ExposedHeaders
	}
	if !IsNil(o.MaxAge) {
		toSerialize["maxAge"] = o.MaxAge
	}
	if !IsNil(o.OptionsPassthrough) {
		toSerialize["optionsPassthrough"] = o.OptionsPassthrough
	}
	return toSerialize, nil
}

type NullableCORS struct {
	value *CORS
	isSet bool
}

func (v NullableCORS) Get() *CORS {
	return v.value
}

func (v *NullableCORS) Set(val *CORS) {
	v.value = val
	v.isSet = true
}

func (v NullableCORS) IsSet() bool {
	return v.isSet
}

func (v *NullableCORS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCORS(val *CORS) *NullableCORS {
	return &NullableCORS{value: val, isSet: true}
}

func (v NullableCORS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCORS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
