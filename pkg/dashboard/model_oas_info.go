/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the OasInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OasInfo{}

// OasInfo struct for OasInfo
type OasInfo struct {
	DbId       *string        `json:"dbId,omitempty"`
	Expiration *string        `json:"expiration,omitempty"`
	Id         *string        `json:"id,omitempty"`
	Name       *string        `json:"name,omitempty"`
	OrgId      *string        `json:"orgId,omitempty"`
	State      *OasState      `json:"state,omitempty"`
	Versioning *OasVersioning `json:"versioning,omitempty"`
}

// NewOasInfo instantiates a new OasInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOasInfo() *OasInfo {
	this := OasInfo{}
	return &this
}

// NewOasInfoWithDefaults instantiates a new OasInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOasInfoWithDefaults() *OasInfo {
	this := OasInfo{}
	return &this
}

// GetDbId returns the DbId field value if set, zero value otherwise.
func (o *OasInfo) GetDbId() string {
	if o == nil || IsNil(o.DbId) {
		var ret string
		return ret
	}
	return *o.DbId
}

// GetDbIdOk returns a tuple with the DbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasInfo) GetDbIdOk() (*string, bool) {
	if o == nil || IsNil(o.DbId) {
		return nil, false
	}
	return o.DbId, true
}

// HasDbId returns a boolean if a field has been set.
func (o *OasInfo) HasDbId() bool {
	if o != nil && !IsNil(o.DbId) {
		return true
	}

	return false
}

// SetDbId gets a reference to the given string and assigns it to the DbId field.
func (o *OasInfo) SetDbId(v string) {
	o.DbId = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *OasInfo) GetExpiration() string {
	if o == nil || IsNil(o.Expiration) {
		var ret string
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasInfo) GetExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *OasInfo) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given string and assigns it to the Expiration field.
func (o *OasInfo) SetExpiration(v string) {
	o.Expiration = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OasInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OasInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OasInfo) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OasInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OasInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OasInfo) SetName(v string) {
	o.Name = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *OasInfo) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasInfo) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *OasInfo) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *OasInfo) SetOrgId(v string) {
	o.OrgId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *OasInfo) GetState() OasState {
	if o == nil || IsNil(o.State) {
		var ret OasState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasInfo) GetStateOk() (*OasState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *OasInfo) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given OasState and assigns it to the State field.
func (o *OasInfo) SetState(v OasState) {
	o.State = &v
}

// GetVersioning returns the Versioning field value if set, zero value otherwise.
func (o *OasInfo) GetVersioning() OasVersioning {
	if o == nil || IsNil(o.Versioning) {
		var ret OasVersioning
		return ret
	}
	return *o.Versioning
}

// GetVersioningOk returns a tuple with the Versioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasInfo) GetVersioningOk() (*OasVersioning, bool) {
	if o == nil || IsNil(o.Versioning) {
		return nil, false
	}
	return o.Versioning, true
}

// HasVersioning returns a boolean if a field has been set.
func (o *OasInfo) HasVersioning() bool {
	if o != nil && !IsNil(o.Versioning) {
		return true
	}

	return false
}

// SetVersioning gets a reference to the given OasVersioning and assigns it to the Versioning field.
func (o *OasInfo) SetVersioning(v OasVersioning) {
	o.Versioning = &v
}

func (o OasInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OasInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DbId) {
		toSerialize["dbId"] = o.DbId
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Versioning) {
		toSerialize["versioning"] = o.Versioning
	}
	return toSerialize, nil
}

type NullableOasInfo struct {
	value *OasInfo
	isSet bool
}

func (v NullableOasInfo) Get() *OasInfo {
	return v.value
}

func (v *NullableOasInfo) Set(val *OasInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOasInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOasInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOasInfo(val *OasInfo) *NullableOasInfo {
	return &NullableOasInfo{value: val, isSet: true}
}

func (v NullableOasInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOasInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
