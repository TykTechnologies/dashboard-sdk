/*
Tyk Dashboard API

 ## <a name=\"introduction\"></a> Introduction  The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.  A common question around using a database-backed configuration is how to programmatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.  The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).  ## <a name=\"security-hierarchy\"></a> Security Hierarchy  The Dashboard API provides a more structured security layer to managing Tyk nodes.  ### Organisations, APIs and Users  With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming and creating definitions), the following security model is applied to the management of Upstream APIs:  * **Organisations**: All APIs are *owned* by an organisation, this is designated by the 'OrgID' parameter in the API Definition. * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access). * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations. * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation. * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.  In order to use the Dashboard API, you'll need to get the 'Tyk Dashboard API Access Credentials' secret from your user profile on the Dashboard UI.  The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:   authorization: <your-secret>

API version: 5.7.1
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the Global type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Global{}

// Global struct for Global
type Global struct {
	Cache                     NullableCache                    `json:"cache,omitempty"`
	ContextVariables          NullableContextVariables         `json:"contextVariables,omitempty"`
	Cors                      NullableCORS                     `json:"cors,omitempty"`
	PluginConfig              NullablePluginConfig             `json:"pluginConfig,omitempty"`
	PostAuthenticationPlugin  NullablePostAuthenticationPlugin `json:"postAuthenticationPlugin,omitempty"`
	PostAuthenticationPlugins []CustomPlugin                   `json:"postAuthenticationPlugins,omitempty"`
	PostPlugin                NullablePostPlugin               `json:"postPlugin,omitempty"`
	PostPlugins               []CustomPlugin                   `json:"postPlugins,omitempty"`
	PrePlugin                 NullablePrePlugin                `json:"prePlugin,omitempty"`
	PrePlugins                []CustomPlugin                   `json:"prePlugins,omitempty"`
	ResponsePlugin            NullableResponsePlugin           `json:"responsePlugin,omitempty"`
	ResponsePlugins           []CustomPlugin                   `json:"responsePlugins,omitempty"`
	TrafficLogs               NullableTrafficLogs              `json:"trafficLogs,omitempty"`
	TransformRequestHeaders   NullableTransformHeaders         `json:"transformRequestHeaders,omitempty"`
	TransformResponseHeaders  NullableTransformHeaders         `json:"transformResponseHeaders,omitempty"`
}

// NewGlobal instantiates a new Global object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobal() *Global {
	this := Global{}
	return &this
}

// NewGlobalWithDefaults instantiates a new Global object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalWithDefaults() *Global {
	this := Global{}
	return &this
}

// GetCache returns the Cache field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Global) GetCache() Cache {
	if o == nil || IsNil(o.Cache.Get()) {
		var ret Cache
		return ret
	}
	return *o.Cache.Get()
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Global) GetCacheOk() (*Cache, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cache.Get(), o.Cache.IsSet()
}

// HasCache returns a boolean if a field has been set.
func (o *Global) HasCache() bool {
	if o != nil && o.Cache.IsSet() {
		return true
	}

	return false
}

// SetCache gets a reference to the given NullableCache and assigns it to the Cache field.
func (o *Global) SetCache(v Cache) {
	o.Cache.Set(&v)
}

// SetCacheNil sets the value for Cache to be an explicit nil
func (o *Global) SetCacheNil() {
	o.Cache.Set(nil)
}

// UnsetCache ensures that no value is present for Cache, not even an explicit nil
func (o *Global) UnsetCache() {
	o.Cache.Unset()
}

// GetContextVariables returns the ContextVariables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Global) GetContextVariables() ContextVariables {
	if o == nil || IsNil(o.ContextVariables.Get()) {
		var ret ContextVariables
		return ret
	}
	return *o.ContextVariables.Get()
}

// GetContextVariablesOk returns a tuple with the ContextVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Global) GetContextVariablesOk() (*ContextVariables, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContextVariables.Get(), o.ContextVariables.IsSet()
}

// HasContextVariables returns a boolean if a field has been set.
func (o *Global) HasContextVariables() bool {
	if o != nil && o.ContextVariables.IsSet() {
		return true
	}

	return false
}

// SetContextVariables gets a reference to the given NullableContextVariables and assigns it to the ContextVariables field.
func (o *Global) SetContextVariables(v ContextVariables) {
	o.ContextVariables.Set(&v)
}

// SetContextVariablesNil sets the value for ContextVariables to be an explicit nil
func (o *Global) SetContextVariablesNil() {
	o.ContextVariables.Set(nil)
}

// UnsetContextVariables ensures that no value is present for ContextVariables, not even an explicit nil
func (o *Global) UnsetContextVariables() {
	o.ContextVariables.Unset()
}

// GetCors returns the Cors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Global) GetCors() CORS {
	if o == nil || IsNil(o.Cors.Get()) {
		var ret CORS
		return ret
	}
	return *o.Cors.Get()
}

// GetCorsOk returns a tuple with the Cors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Global) GetCorsOk() (*CORS, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cors.Get(), o.Cors.IsSet()
}

// HasCors returns a boolean if a field has been set.
func (o *Global) HasCors() bool {
	if o != nil && o.Cors.IsSet() {
		return true
	}

	return false
}

// SetCors gets a reference to the given NullableCORS and assigns it to the Cors field.
func (o *Global) SetCors(v CORS) {
	o.Cors.Set(&v)
}

// SetCorsNil sets the value for Cors to be an explicit nil
func (o *Global) SetCorsNil() {
	o.Cors.Set(nil)
}

// UnsetCors ensures that no value is present for Cors, not even an explicit nil
func (o *Global) UnsetCors() {
	o.Cors.Unset()
}

// GetPluginConfig returns the PluginConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Global) GetPluginConfig() PluginConfig {
	if o == nil || IsNil(o.PluginConfig.Get()) {
		var ret PluginConfig
		return ret
	}
	return *o.PluginConfig.Get()
}

// GetPluginConfigOk returns a tuple with the PluginConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Global) GetPluginConfigOk() (*PluginConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.PluginConfig.Get(), o.PluginConfig.IsSet()
}

// HasPluginConfig returns a boolean if a field has been set.
func (o *Global) HasPluginConfig() bool {
	if o != nil && o.PluginConfig.IsSet() {
		return true
	}

	return false
}

// SetPluginConfig gets a reference to the given NullablePluginConfig and assigns it to the PluginConfig field.
func (o *Global) SetPluginConfig(v PluginConfig) {
	o.PluginConfig.Set(&v)
}

// SetPluginConfigNil sets the value for PluginConfig to be an explicit nil
func (o *Global) SetPluginConfigNil() {
	o.PluginConfig.Set(nil)
}

// UnsetPluginConfig ensures that no value is present for PluginConfig, not even an explicit nil
func (o *Global) UnsetPluginConfig() {
	o.PluginConfig.Unset()
}

// GetPostAuthenticationPlugin returns the PostAuthenticationPlugin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Global) GetPostAuthenticationPlugin() PostAuthenticationPlugin {
	if o == nil || IsNil(o.PostAuthenticationPlugin.Get()) {
		var ret PostAuthenticationPlugin
		return ret
	}
	return *o.PostAuthenticationPlugin.Get()
}

// GetPostAuthenticationPluginOk returns a tuple with the PostAuthenticationPlugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Global) GetPostAuthenticationPluginOk() (*PostAuthenticationPlugin, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostAuthenticationPlugin.Get(), o.PostAuthenticationPlugin.IsSet()
}

// HasPostAuthenticationPlugin returns a boolean if a field has been set.
func (o *Global) HasPostAuthenticationPlugin() bool {
	if o != nil && o.PostAuthenticationPlugin.IsSet() {
		return true
	}

	return false
}

// SetPostAuthenticationPlugin gets a reference to the given NullablePostAuthenticationPlugin and assigns it to the PostAuthenticationPlugin field.
func (o *Global) SetPostAuthenticationPlugin(v PostAuthenticationPlugin) {
	o.PostAuthenticationPlugin.Set(&v)
}

// SetPostAuthenticationPluginNil sets the value for PostAuthenticationPlugin to be an explicit nil
func (o *Global) SetPostAuthenticationPluginNil() {
	o.PostAuthenticationPlugin.Set(nil)
}

// UnsetPostAuthenticationPlugin ensures that no value is present for PostAuthenticationPlugin, not even an explicit nil
func (o *Global) UnsetPostAuthenticationPlugin() {
	o.PostAuthenticationPlugin.Unset()
}

// GetPostAuthenticationPlugins returns the PostAuthenticationPlugins field value if set, zero value otherwise.
func (o *Global) GetPostAuthenticationPlugins() []CustomPlugin {
	if o == nil || IsNil(o.PostAuthenticationPlugins) {
		var ret []CustomPlugin
		return ret
	}
	return o.PostAuthenticationPlugins
}

// GetPostAuthenticationPluginsOk returns a tuple with the PostAuthenticationPlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Global) GetPostAuthenticationPluginsOk() ([]CustomPlugin, bool) {
	if o == nil || IsNil(o.PostAuthenticationPlugins) {
		return nil, false
	}
	return o.PostAuthenticationPlugins, true
}

// HasPostAuthenticationPlugins returns a boolean if a field has been set.
func (o *Global) HasPostAuthenticationPlugins() bool {
	if o != nil && !IsNil(o.PostAuthenticationPlugins) {
		return true
	}

	return false
}

// SetPostAuthenticationPlugins gets a reference to the given []CustomPlugin and assigns it to the PostAuthenticationPlugins field.
func (o *Global) SetPostAuthenticationPlugins(v []CustomPlugin) {
	o.PostAuthenticationPlugins = v
}

// GetPostPlugin returns the PostPlugin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Global) GetPostPlugin() PostPlugin {
	if o == nil || IsNil(o.PostPlugin.Get()) {
		var ret PostPlugin
		return ret
	}
	return *o.PostPlugin.Get()
}

// GetPostPluginOk returns a tuple with the PostPlugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Global) GetPostPluginOk() (*PostPlugin, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostPlugin.Get(), o.PostPlugin.IsSet()
}

// HasPostPlugin returns a boolean if a field has been set.
func (o *Global) HasPostPlugin() bool {
	if o != nil && o.PostPlugin.IsSet() {
		return true
	}

	return false
}

// SetPostPlugin gets a reference to the given NullablePostPlugin and assigns it to the PostPlugin field.
func (o *Global) SetPostPlugin(v PostPlugin) {
	o.PostPlugin.Set(&v)
}

// SetPostPluginNil sets the value for PostPlugin to be an explicit nil
func (o *Global) SetPostPluginNil() {
	o.PostPlugin.Set(nil)
}

// UnsetPostPlugin ensures that no value is present for PostPlugin, not even an explicit nil
func (o *Global) UnsetPostPlugin() {
	o.PostPlugin.Unset()
}

// GetPostPlugins returns the PostPlugins field value if set, zero value otherwise.
func (o *Global) GetPostPlugins() []CustomPlugin {
	if o == nil || IsNil(o.PostPlugins) {
		var ret []CustomPlugin
		return ret
	}
	return o.PostPlugins
}

// GetPostPluginsOk returns a tuple with the PostPlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Global) GetPostPluginsOk() ([]CustomPlugin, bool) {
	if o == nil || IsNil(o.PostPlugins) {
		return nil, false
	}
	return o.PostPlugins, true
}

// HasPostPlugins returns a boolean if a field has been set.
func (o *Global) HasPostPlugins() bool {
	if o != nil && !IsNil(o.PostPlugins) {
		return true
	}

	return false
}

// SetPostPlugins gets a reference to the given []CustomPlugin and assigns it to the PostPlugins field.
func (o *Global) SetPostPlugins(v []CustomPlugin) {
	o.PostPlugins = v
}

// GetPrePlugin returns the PrePlugin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Global) GetPrePlugin() PrePlugin {
	if o == nil || IsNil(o.PrePlugin.Get()) {
		var ret PrePlugin
		return ret
	}
	return *o.PrePlugin.Get()
}

// GetPrePluginOk returns a tuple with the PrePlugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Global) GetPrePluginOk() (*PrePlugin, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrePlugin.Get(), o.PrePlugin.IsSet()
}

// HasPrePlugin returns a boolean if a field has been set.
func (o *Global) HasPrePlugin() bool {
	if o != nil && o.PrePlugin.IsSet() {
		return true
	}

	return false
}

// SetPrePlugin gets a reference to the given NullablePrePlugin and assigns it to the PrePlugin field.
func (o *Global) SetPrePlugin(v PrePlugin) {
	o.PrePlugin.Set(&v)
}

// SetPrePluginNil sets the value for PrePlugin to be an explicit nil
func (o *Global) SetPrePluginNil() {
	o.PrePlugin.Set(nil)
}

// UnsetPrePlugin ensures that no value is present for PrePlugin, not even an explicit nil
func (o *Global) UnsetPrePlugin() {
	o.PrePlugin.Unset()
}

// GetPrePlugins returns the PrePlugins field value if set, zero value otherwise.
func (o *Global) GetPrePlugins() []CustomPlugin {
	if o == nil || IsNil(o.PrePlugins) {
		var ret []CustomPlugin
		return ret
	}
	return o.PrePlugins
}

// GetPrePluginsOk returns a tuple with the PrePlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Global) GetPrePluginsOk() ([]CustomPlugin, bool) {
	if o == nil || IsNil(o.PrePlugins) {
		return nil, false
	}
	return o.PrePlugins, true
}

// HasPrePlugins returns a boolean if a field has been set.
func (o *Global) HasPrePlugins() bool {
	if o != nil && !IsNil(o.PrePlugins) {
		return true
	}

	return false
}

// SetPrePlugins gets a reference to the given []CustomPlugin and assigns it to the PrePlugins field.
func (o *Global) SetPrePlugins(v []CustomPlugin) {
	o.PrePlugins = v
}

// GetResponsePlugin returns the ResponsePlugin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Global) GetResponsePlugin() ResponsePlugin {
	if o == nil || IsNil(o.ResponsePlugin.Get()) {
		var ret ResponsePlugin
		return ret
	}
	return *o.ResponsePlugin.Get()
}

// GetResponsePluginOk returns a tuple with the ResponsePlugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Global) GetResponsePluginOk() (*ResponsePlugin, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResponsePlugin.Get(), o.ResponsePlugin.IsSet()
}

// HasResponsePlugin returns a boolean if a field has been set.
func (o *Global) HasResponsePlugin() bool {
	if o != nil && o.ResponsePlugin.IsSet() {
		return true
	}

	return false
}

// SetResponsePlugin gets a reference to the given NullableResponsePlugin and assigns it to the ResponsePlugin field.
func (o *Global) SetResponsePlugin(v ResponsePlugin) {
	o.ResponsePlugin.Set(&v)
}

// SetResponsePluginNil sets the value for ResponsePlugin to be an explicit nil
func (o *Global) SetResponsePluginNil() {
	o.ResponsePlugin.Set(nil)
}

// UnsetResponsePlugin ensures that no value is present for ResponsePlugin, not even an explicit nil
func (o *Global) UnsetResponsePlugin() {
	o.ResponsePlugin.Unset()
}

// GetResponsePlugins returns the ResponsePlugins field value if set, zero value otherwise.
func (o *Global) GetResponsePlugins() []CustomPlugin {
	if o == nil || IsNil(o.ResponsePlugins) {
		var ret []CustomPlugin
		return ret
	}
	return o.ResponsePlugins
}

// GetResponsePluginsOk returns a tuple with the ResponsePlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Global) GetResponsePluginsOk() ([]CustomPlugin, bool) {
	if o == nil || IsNil(o.ResponsePlugins) {
		return nil, false
	}
	return o.ResponsePlugins, true
}

// HasResponsePlugins returns a boolean if a field has been set.
func (o *Global) HasResponsePlugins() bool {
	if o != nil && !IsNil(o.ResponsePlugins) {
		return true
	}

	return false
}

// SetResponsePlugins gets a reference to the given []CustomPlugin and assigns it to the ResponsePlugins field.
func (o *Global) SetResponsePlugins(v []CustomPlugin) {
	o.ResponsePlugins = v
}

// GetTrafficLogs returns the TrafficLogs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Global) GetTrafficLogs() TrafficLogs {
	if o == nil || IsNil(o.TrafficLogs.Get()) {
		var ret TrafficLogs
		return ret
	}
	return *o.TrafficLogs.Get()
}

// GetTrafficLogsOk returns a tuple with the TrafficLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Global) GetTrafficLogsOk() (*TrafficLogs, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrafficLogs.Get(), o.TrafficLogs.IsSet()
}

// HasTrafficLogs returns a boolean if a field has been set.
func (o *Global) HasTrafficLogs() bool {
	if o != nil && o.TrafficLogs.IsSet() {
		return true
	}

	return false
}

// SetTrafficLogs gets a reference to the given NullableTrafficLogs and assigns it to the TrafficLogs field.
func (o *Global) SetTrafficLogs(v TrafficLogs) {
	o.TrafficLogs.Set(&v)
}

// SetTrafficLogsNil sets the value for TrafficLogs to be an explicit nil
func (o *Global) SetTrafficLogsNil() {
	o.TrafficLogs.Set(nil)
}

// UnsetTrafficLogs ensures that no value is present for TrafficLogs, not even an explicit nil
func (o *Global) UnsetTrafficLogs() {
	o.TrafficLogs.Unset()
}

// GetTransformRequestHeaders returns the TransformRequestHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Global) GetTransformRequestHeaders() TransformHeaders {
	if o == nil || IsNil(o.TransformRequestHeaders.Get()) {
		var ret TransformHeaders
		return ret
	}
	return *o.TransformRequestHeaders.Get()
}

// GetTransformRequestHeadersOk returns a tuple with the TransformRequestHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Global) GetTransformRequestHeadersOk() (*TransformHeaders, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransformRequestHeaders.Get(), o.TransformRequestHeaders.IsSet()
}

// HasTransformRequestHeaders returns a boolean if a field has been set.
func (o *Global) HasTransformRequestHeaders() bool {
	if o != nil && o.TransformRequestHeaders.IsSet() {
		return true
	}

	return false
}

// SetTransformRequestHeaders gets a reference to the given NullableTransformHeaders and assigns it to the TransformRequestHeaders field.
func (o *Global) SetTransformRequestHeaders(v TransformHeaders) {
	o.TransformRequestHeaders.Set(&v)
}

// SetTransformRequestHeadersNil sets the value for TransformRequestHeaders to be an explicit nil
func (o *Global) SetTransformRequestHeadersNil() {
	o.TransformRequestHeaders.Set(nil)
}

// UnsetTransformRequestHeaders ensures that no value is present for TransformRequestHeaders, not even an explicit nil
func (o *Global) UnsetTransformRequestHeaders() {
	o.TransformRequestHeaders.Unset()
}

// GetTransformResponseHeaders returns the TransformResponseHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Global) GetTransformResponseHeaders() TransformHeaders {
	if o == nil || IsNil(o.TransformResponseHeaders.Get()) {
		var ret TransformHeaders
		return ret
	}
	return *o.TransformResponseHeaders.Get()
}

// GetTransformResponseHeadersOk returns a tuple with the TransformResponseHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Global) GetTransformResponseHeadersOk() (*TransformHeaders, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransformResponseHeaders.Get(), o.TransformResponseHeaders.IsSet()
}

// HasTransformResponseHeaders returns a boolean if a field has been set.
func (o *Global) HasTransformResponseHeaders() bool {
	if o != nil && o.TransformResponseHeaders.IsSet() {
		return true
	}

	return false
}

// SetTransformResponseHeaders gets a reference to the given NullableTransformHeaders and assigns it to the TransformResponseHeaders field.
func (o *Global) SetTransformResponseHeaders(v TransformHeaders) {
	o.TransformResponseHeaders.Set(&v)
}

// SetTransformResponseHeadersNil sets the value for TransformResponseHeaders to be an explicit nil
func (o *Global) SetTransformResponseHeadersNil() {
	o.TransformResponseHeaders.Set(nil)
}

// UnsetTransformResponseHeaders ensures that no value is present for TransformResponseHeaders, not even an explicit nil
func (o *Global) UnsetTransformResponseHeaders() {
	o.TransformResponseHeaders.Unset()
}

func (o Global) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Global) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cache.IsSet() {
		toSerialize["cache"] = o.Cache.Get()
	}
	if o.ContextVariables.IsSet() {
		toSerialize["contextVariables"] = o.ContextVariables.Get()
	}
	if o.Cors.IsSet() {
		toSerialize["cors"] = o.Cors.Get()
	}
	if o.PluginConfig.IsSet() {
		toSerialize["pluginConfig"] = o.PluginConfig.Get()
	}
	if o.PostAuthenticationPlugin.IsSet() {
		toSerialize["postAuthenticationPlugin"] = o.PostAuthenticationPlugin.Get()
	}
	if !IsNil(o.PostAuthenticationPlugins) {
		toSerialize["postAuthenticationPlugins"] = o.PostAuthenticationPlugins
	}
	if o.PostPlugin.IsSet() {
		toSerialize["postPlugin"] = o.PostPlugin.Get()
	}
	if !IsNil(o.PostPlugins) {
		toSerialize["postPlugins"] = o.PostPlugins
	}
	if o.PrePlugin.IsSet() {
		toSerialize["prePlugin"] = o.PrePlugin.Get()
	}
	if !IsNil(o.PrePlugins) {
		toSerialize["prePlugins"] = o.PrePlugins
	}
	if o.ResponsePlugin.IsSet() {
		toSerialize["responsePlugin"] = o.ResponsePlugin.Get()
	}
	if !IsNil(o.ResponsePlugins) {
		toSerialize["responsePlugins"] = o.ResponsePlugins
	}
	if o.TrafficLogs.IsSet() {
		toSerialize["trafficLogs"] = o.TrafficLogs.Get()
	}
	if o.TransformRequestHeaders.IsSet() {
		toSerialize["transformRequestHeaders"] = o.TransformRequestHeaders.Get()
	}
	if o.TransformResponseHeaders.IsSet() {
		toSerialize["transformResponseHeaders"] = o.TransformResponseHeaders.Get()
	}
	return toSerialize, nil
}

type NullableGlobal struct {
	value *Global
	isSet bool
}

func (v NullableGlobal) Get() *Global {
	return v.value
}

func (v *NullableGlobal) Set(val *Global) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobal) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobal(val *Global) *NullableGlobal {
	return &NullableGlobal{value: val, isSet: true}
}

func (v NullableGlobal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
