/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the ApidefVersionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApidefVersionInfo{}

// ApidefVersionInfo struct for ApidefVersionInfo
type ApidefVersionInfo struct {
	Expires                       *string                 `json:"expires,omitempty"`
	ExtendedPaths                 *ApidefExtendedPathsSet `json:"extended_paths,omitempty"`
	GlobalHeaders                 map[string]string       `json:"global_headers,omitempty"`
	GlobalHeadersDisabled         *bool                   `json:"global_headers_disabled,omitempty"`
	GlobalHeadersRemove           []string                `json:"global_headers_remove,omitempty"`
	GlobalResponseHeaders         map[string]string       `json:"global_response_headers,omitempty"`
	GlobalResponseHeadersDisabled *bool                   `json:"global_response_headers_disabled,omitempty"`
	GlobalResponseHeadersRemove   []string                `json:"global_response_headers_remove,omitempty"`
	GlobalSizeLimit               *int32                  `json:"global_size_limit,omitempty"`
	IgnoreEndpointCase            *bool                   `json:"ignore_endpoint_case,omitempty"`
	Name                          *string                 `json:"name,omitempty"`
	OverrideTarget                *string                 `json:"override_target,omitempty"`
	Paths                         *ApidefVersionInfoPaths `json:"paths,omitempty"`
	UseExtendedPaths              *bool                   `json:"use_extended_paths,omitempty"`
}

// NewApidefVersionInfo instantiates a new ApidefVersionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApidefVersionInfo() *ApidefVersionInfo {
	this := ApidefVersionInfo{}
	return &this
}

// NewApidefVersionInfoWithDefaults instantiates a new ApidefVersionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApidefVersionInfoWithDefaults() *ApidefVersionInfo {
	this := ApidefVersionInfo{}
	return &this
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *ApidefVersionInfo) GetExpires() string {
	if o == nil || IsNil(o.Expires) {
		var ret string
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefVersionInfo) GetExpiresOk() (*string, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given string and assigns it to the Expires field.
func (o *ApidefVersionInfo) SetExpires(v string) {
	o.Expires = &v
}

// GetExtendedPaths returns the ExtendedPaths field value if set, zero value otherwise.
func (o *ApidefVersionInfo) GetExtendedPaths() ApidefExtendedPathsSet {
	if o == nil || IsNil(o.ExtendedPaths) {
		var ret ApidefExtendedPathsSet
		return ret
	}
	return *o.ExtendedPaths
}

// GetExtendedPathsOk returns a tuple with the ExtendedPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefVersionInfo) GetExtendedPathsOk() (*ApidefExtendedPathsSet, bool) {
	if o == nil || IsNil(o.ExtendedPaths) {
		return nil, false
	}
	return o.ExtendedPaths, true
}

// HasExtendedPaths returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasExtendedPaths() bool {
	if o != nil && !IsNil(o.ExtendedPaths) {
		return true
	}

	return false
}

// SetExtendedPaths gets a reference to the given ApidefExtendedPathsSet and assigns it to the ExtendedPaths field.
func (o *ApidefVersionInfo) SetExtendedPaths(v ApidefExtendedPathsSet) {
	o.ExtendedPaths = &v
}

// GetGlobalHeaders returns the GlobalHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApidefVersionInfo) GetGlobalHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.GlobalHeaders
}

// GetGlobalHeadersOk returns a tuple with the GlobalHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApidefVersionInfo) GetGlobalHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.GlobalHeaders) {
		return nil, false
	}
	return &o.GlobalHeaders, true
}

// HasGlobalHeaders returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasGlobalHeaders() bool {
	if o != nil && !IsNil(o.GlobalHeaders) {
		return true
	}

	return false
}

// SetGlobalHeaders gets a reference to the given map[string]string and assigns it to the GlobalHeaders field.
func (o *ApidefVersionInfo) SetGlobalHeaders(v map[string]string) {
	o.GlobalHeaders = v
}

// GetGlobalHeadersDisabled returns the GlobalHeadersDisabled field value if set, zero value otherwise.
func (o *ApidefVersionInfo) GetGlobalHeadersDisabled() bool {
	if o == nil || IsNil(o.GlobalHeadersDisabled) {
		var ret bool
		return ret
	}
	return *o.GlobalHeadersDisabled
}

// GetGlobalHeadersDisabledOk returns a tuple with the GlobalHeadersDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefVersionInfo) GetGlobalHeadersDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalHeadersDisabled) {
		return nil, false
	}
	return o.GlobalHeadersDisabled, true
}

// HasGlobalHeadersDisabled returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasGlobalHeadersDisabled() bool {
	if o != nil && !IsNil(o.GlobalHeadersDisabled) {
		return true
	}

	return false
}

// SetGlobalHeadersDisabled gets a reference to the given bool and assigns it to the GlobalHeadersDisabled field.
func (o *ApidefVersionInfo) SetGlobalHeadersDisabled(v bool) {
	o.GlobalHeadersDisabled = &v
}

// GetGlobalHeadersRemove returns the GlobalHeadersRemove field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApidefVersionInfo) GetGlobalHeadersRemove() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.GlobalHeadersRemove
}

// GetGlobalHeadersRemoveOk returns a tuple with the GlobalHeadersRemove field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApidefVersionInfo) GetGlobalHeadersRemoveOk() ([]string, bool) {
	if o == nil || IsNil(o.GlobalHeadersRemove) {
		return nil, false
	}
	return o.GlobalHeadersRemove, true
}

// HasGlobalHeadersRemove returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasGlobalHeadersRemove() bool {
	if o != nil && !IsNil(o.GlobalHeadersRemove) {
		return true
	}

	return false
}

// SetGlobalHeadersRemove gets a reference to the given []string and assigns it to the GlobalHeadersRemove field.
func (o *ApidefVersionInfo) SetGlobalHeadersRemove(v []string) {
	o.GlobalHeadersRemove = v
}

// GetGlobalResponseHeaders returns the GlobalResponseHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApidefVersionInfo) GetGlobalResponseHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.GlobalResponseHeaders
}

// GetGlobalResponseHeadersOk returns a tuple with the GlobalResponseHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApidefVersionInfo) GetGlobalResponseHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.GlobalResponseHeaders) {
		return nil, false
	}
	return &o.GlobalResponseHeaders, true
}

// HasGlobalResponseHeaders returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasGlobalResponseHeaders() bool {
	if o != nil && !IsNil(o.GlobalResponseHeaders) {
		return true
	}

	return false
}

// SetGlobalResponseHeaders gets a reference to the given map[string]string and assigns it to the GlobalResponseHeaders field.
func (o *ApidefVersionInfo) SetGlobalResponseHeaders(v map[string]string) {
	o.GlobalResponseHeaders = v
}

// GetGlobalResponseHeadersDisabled returns the GlobalResponseHeadersDisabled field value if set, zero value otherwise.
func (o *ApidefVersionInfo) GetGlobalResponseHeadersDisabled() bool {
	if o == nil || IsNil(o.GlobalResponseHeadersDisabled) {
		var ret bool
		return ret
	}
	return *o.GlobalResponseHeadersDisabled
}

// GetGlobalResponseHeadersDisabledOk returns a tuple with the GlobalResponseHeadersDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefVersionInfo) GetGlobalResponseHeadersDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalResponseHeadersDisabled) {
		return nil, false
	}
	return o.GlobalResponseHeadersDisabled, true
}

// HasGlobalResponseHeadersDisabled returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasGlobalResponseHeadersDisabled() bool {
	if o != nil && !IsNil(o.GlobalResponseHeadersDisabled) {
		return true
	}

	return false
}

// SetGlobalResponseHeadersDisabled gets a reference to the given bool and assigns it to the GlobalResponseHeadersDisabled field.
func (o *ApidefVersionInfo) SetGlobalResponseHeadersDisabled(v bool) {
	o.GlobalResponseHeadersDisabled = &v
}

// GetGlobalResponseHeadersRemove returns the GlobalResponseHeadersRemove field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApidefVersionInfo) GetGlobalResponseHeadersRemove() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.GlobalResponseHeadersRemove
}

// GetGlobalResponseHeadersRemoveOk returns a tuple with the GlobalResponseHeadersRemove field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApidefVersionInfo) GetGlobalResponseHeadersRemoveOk() ([]string, bool) {
	if o == nil || IsNil(o.GlobalResponseHeadersRemove) {
		return nil, false
	}
	return o.GlobalResponseHeadersRemove, true
}

// HasGlobalResponseHeadersRemove returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasGlobalResponseHeadersRemove() bool {
	if o != nil && !IsNil(o.GlobalResponseHeadersRemove) {
		return true
	}

	return false
}

// SetGlobalResponseHeadersRemove gets a reference to the given []string and assigns it to the GlobalResponseHeadersRemove field.
func (o *ApidefVersionInfo) SetGlobalResponseHeadersRemove(v []string) {
	o.GlobalResponseHeadersRemove = v
}

// GetGlobalSizeLimit returns the GlobalSizeLimit field value if set, zero value otherwise.
func (o *ApidefVersionInfo) GetGlobalSizeLimit() int32 {
	if o == nil || IsNil(o.GlobalSizeLimit) {
		var ret int32
		return ret
	}
	return *o.GlobalSizeLimit
}

// GetGlobalSizeLimitOk returns a tuple with the GlobalSizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefVersionInfo) GetGlobalSizeLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.GlobalSizeLimit) {
		return nil, false
	}
	return o.GlobalSizeLimit, true
}

// HasGlobalSizeLimit returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasGlobalSizeLimit() bool {
	if o != nil && !IsNil(o.GlobalSizeLimit) {
		return true
	}

	return false
}

// SetGlobalSizeLimit gets a reference to the given int32 and assigns it to the GlobalSizeLimit field.
func (o *ApidefVersionInfo) SetGlobalSizeLimit(v int32) {
	o.GlobalSizeLimit = &v
}

// GetIgnoreEndpointCase returns the IgnoreEndpointCase field value if set, zero value otherwise.
func (o *ApidefVersionInfo) GetIgnoreEndpointCase() bool {
	if o == nil || IsNil(o.IgnoreEndpointCase) {
		var ret bool
		return ret
	}
	return *o.IgnoreEndpointCase
}

// GetIgnoreEndpointCaseOk returns a tuple with the IgnoreEndpointCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefVersionInfo) GetIgnoreEndpointCaseOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreEndpointCase) {
		return nil, false
	}
	return o.IgnoreEndpointCase, true
}

// HasIgnoreEndpointCase returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasIgnoreEndpointCase() bool {
	if o != nil && !IsNil(o.IgnoreEndpointCase) {
		return true
	}

	return false
}

// SetIgnoreEndpointCase gets a reference to the given bool and assigns it to the IgnoreEndpointCase field.
func (o *ApidefVersionInfo) SetIgnoreEndpointCase(v bool) {
	o.IgnoreEndpointCase = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApidefVersionInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefVersionInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApidefVersionInfo) SetName(v string) {
	o.Name = &v
}

// GetOverrideTarget returns the OverrideTarget field value if set, zero value otherwise.
func (o *ApidefVersionInfo) GetOverrideTarget() string {
	if o == nil || IsNil(o.OverrideTarget) {
		var ret string
		return ret
	}
	return *o.OverrideTarget
}

// GetOverrideTargetOk returns a tuple with the OverrideTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefVersionInfo) GetOverrideTargetOk() (*string, bool) {
	if o == nil || IsNil(o.OverrideTarget) {
		return nil, false
	}
	return o.OverrideTarget, true
}

// HasOverrideTarget returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasOverrideTarget() bool {
	if o != nil && !IsNil(o.OverrideTarget) {
		return true
	}

	return false
}

// SetOverrideTarget gets a reference to the given string and assigns it to the OverrideTarget field.
func (o *ApidefVersionInfo) SetOverrideTarget(v string) {
	o.OverrideTarget = &v
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *ApidefVersionInfo) GetPaths() ApidefVersionInfoPaths {
	if o == nil || IsNil(o.Paths) {
		var ret ApidefVersionInfoPaths
		return ret
	}
	return *o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefVersionInfo) GetPathsOk() (*ApidefVersionInfoPaths, bool) {
	if o == nil || IsNil(o.Paths) {
		return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasPaths() bool {
	if o != nil && !IsNil(o.Paths) {
		return true
	}

	return false
}

// SetPaths gets a reference to the given ApidefVersionInfoPaths and assigns it to the Paths field.
func (o *ApidefVersionInfo) SetPaths(v ApidefVersionInfoPaths) {
	o.Paths = &v
}

// GetUseExtendedPaths returns the UseExtendedPaths field value if set, zero value otherwise.
func (o *ApidefVersionInfo) GetUseExtendedPaths() bool {
	if o == nil || IsNil(o.UseExtendedPaths) {
		var ret bool
		return ret
	}
	return *o.UseExtendedPaths
}

// GetUseExtendedPathsOk returns a tuple with the UseExtendedPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApidefVersionInfo) GetUseExtendedPathsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseExtendedPaths) {
		return nil, false
	}
	return o.UseExtendedPaths, true
}

// HasUseExtendedPaths returns a boolean if a field has been set.
func (o *ApidefVersionInfo) HasUseExtendedPaths() bool {
	if o != nil && !IsNil(o.UseExtendedPaths) {
		return true
	}

	return false
}

// SetUseExtendedPaths gets a reference to the given bool and assigns it to the UseExtendedPaths field.
func (o *ApidefVersionInfo) SetUseExtendedPaths(v bool) {
	o.UseExtendedPaths = &v
}

func (o ApidefVersionInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApidefVersionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.ExtendedPaths) {
		toSerialize["extended_paths"] = o.ExtendedPaths
	}
	if o.GlobalHeaders != nil {
		toSerialize["global_headers"] = o.GlobalHeaders
	}
	if !IsNil(o.GlobalHeadersDisabled) {
		toSerialize["global_headers_disabled"] = o.GlobalHeadersDisabled
	}
	if o.GlobalHeadersRemove != nil {
		toSerialize["global_headers_remove"] = o.GlobalHeadersRemove
	}
	if o.GlobalResponseHeaders != nil {
		toSerialize["global_response_headers"] = o.GlobalResponseHeaders
	}
	if !IsNil(o.GlobalResponseHeadersDisabled) {
		toSerialize["global_response_headers_disabled"] = o.GlobalResponseHeadersDisabled
	}
	if o.GlobalResponseHeadersRemove != nil {
		toSerialize["global_response_headers_remove"] = o.GlobalResponseHeadersRemove
	}
	if !IsNil(o.GlobalSizeLimit) {
		toSerialize["global_size_limit"] = o.GlobalSizeLimit
	}
	if !IsNil(o.IgnoreEndpointCase) {
		toSerialize["ignore_endpoint_case"] = o.IgnoreEndpointCase
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OverrideTarget) {
		toSerialize["override_target"] = o.OverrideTarget
	}
	if !IsNil(o.Paths) {
		toSerialize["paths"] = o.Paths
	}
	if !IsNil(o.UseExtendedPaths) {
		toSerialize["use_extended_paths"] = o.UseExtendedPaths
	}
	return toSerialize, nil
}

type NullableApidefVersionInfo struct {
	value *ApidefVersionInfo
	isSet bool
}

func (v NullableApidefVersionInfo) Get() *ApidefVersionInfo {
	return v.value
}

func (v *NullableApidefVersionInfo) Set(val *ApidefVersionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableApidefVersionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableApidefVersionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApidefVersionInfo(val *ApidefVersionInfo) *NullableApidefVersionInfo {
	return &NullableApidefVersionInfo{value: val, isSet: true}
}

func (v NullableApidefVersionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApidefVersionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
