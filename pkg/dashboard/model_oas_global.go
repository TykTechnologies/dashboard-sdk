/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the OasGlobal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OasGlobal{}

// OasGlobal struct for OasGlobal
type OasGlobal struct {
	Cache                     *OasCache                    `json:"cache,omitempty"`
	ContextVariables          *OasContextVariables         `json:"contextVariables,omitempty"`
	Cors                      *OasCORS                     `json:"cors,omitempty"`
	PluginConfig              *OasPluginConfig             `json:"pluginConfig,omitempty"`
	PostAuthenticationPlugin  *OasPostAuthenticationPlugin `json:"postAuthenticationPlugin,omitempty"`
	PostAuthenticationPlugins []OasCustomPlugin            `json:"postAuthenticationPlugins,omitempty"`
	PostPlugin                *OasPostPlugin               `json:"postPlugin,omitempty"`
	PostPlugins               []OasCustomPlugin            `json:"postPlugins,omitempty"`
	PrePlugin                 *OasPrePlugin                `json:"prePlugin,omitempty"`
	PrePlugins                []OasCustomPlugin            `json:"prePlugins,omitempty"`
	ResponsePlugin            *OasResponsePlugin           `json:"responsePlugin,omitempty"`
	ResponsePlugins           []OasCustomPlugin            `json:"responsePlugins,omitempty"`
	TrafficLogs               *OasTrafficLogs              `json:"trafficLogs,omitempty"`
	TransformRequestHeaders   *OasTransformHeaders         `json:"transformRequestHeaders,omitempty"`
	TransformResponseHeaders  *OasTransformHeaders         `json:"transformResponseHeaders,omitempty"`
}

// NewOasGlobal instantiates a new OasGlobal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOasGlobal() *OasGlobal {
	this := OasGlobal{}
	return &this
}

// NewOasGlobalWithDefaults instantiates a new OasGlobal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOasGlobalWithDefaults() *OasGlobal {
	this := OasGlobal{}
	return &this
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *OasGlobal) GetCache() OasCache {
	if o == nil || IsNil(o.Cache) {
		var ret OasCache
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetCacheOk() (*OasCache, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *OasGlobal) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given OasCache and assigns it to the Cache field.
func (o *OasGlobal) SetCache(v OasCache) {
	o.Cache = &v
}

// GetContextVariables returns the ContextVariables field value if set, zero value otherwise.
func (o *OasGlobal) GetContextVariables() OasContextVariables {
	if o == nil || IsNil(o.ContextVariables) {
		var ret OasContextVariables
		return ret
	}
	return *o.ContextVariables
}

// GetContextVariablesOk returns a tuple with the ContextVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetContextVariablesOk() (*OasContextVariables, bool) {
	if o == nil || IsNil(o.ContextVariables) {
		return nil, false
	}
	return o.ContextVariables, true
}

// HasContextVariables returns a boolean if a field has been set.
func (o *OasGlobal) HasContextVariables() bool {
	if o != nil && !IsNil(o.ContextVariables) {
		return true
	}

	return false
}

// SetContextVariables gets a reference to the given OasContextVariables and assigns it to the ContextVariables field.
func (o *OasGlobal) SetContextVariables(v OasContextVariables) {
	o.ContextVariables = &v
}

// GetCors returns the Cors field value if set, zero value otherwise.
func (o *OasGlobal) GetCors() OasCORS {
	if o == nil || IsNil(o.Cors) {
		var ret OasCORS
		return ret
	}
	return *o.Cors
}

// GetCorsOk returns a tuple with the Cors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetCorsOk() (*OasCORS, bool) {
	if o == nil || IsNil(o.Cors) {
		return nil, false
	}
	return o.Cors, true
}

// HasCors returns a boolean if a field has been set.
func (o *OasGlobal) HasCors() bool {
	if o != nil && !IsNil(o.Cors) {
		return true
	}

	return false
}

// SetCors gets a reference to the given OasCORS and assigns it to the Cors field.
func (o *OasGlobal) SetCors(v OasCORS) {
	o.Cors = &v
}

// GetPluginConfig returns the PluginConfig field value if set, zero value otherwise.
func (o *OasGlobal) GetPluginConfig() OasPluginConfig {
	if o == nil || IsNil(o.PluginConfig) {
		var ret OasPluginConfig
		return ret
	}
	return *o.PluginConfig
}

// GetPluginConfigOk returns a tuple with the PluginConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetPluginConfigOk() (*OasPluginConfig, bool) {
	if o == nil || IsNil(o.PluginConfig) {
		return nil, false
	}
	return o.PluginConfig, true
}

// HasPluginConfig returns a boolean if a field has been set.
func (o *OasGlobal) HasPluginConfig() bool {
	if o != nil && !IsNil(o.PluginConfig) {
		return true
	}

	return false
}

// SetPluginConfig gets a reference to the given OasPluginConfig and assigns it to the PluginConfig field.
func (o *OasGlobal) SetPluginConfig(v OasPluginConfig) {
	o.PluginConfig = &v
}

// GetPostAuthenticationPlugin returns the PostAuthenticationPlugin field value if set, zero value otherwise.
func (o *OasGlobal) GetPostAuthenticationPlugin() OasPostAuthenticationPlugin {
	if o == nil || IsNil(o.PostAuthenticationPlugin) {
		var ret OasPostAuthenticationPlugin
		return ret
	}
	return *o.PostAuthenticationPlugin
}

// GetPostAuthenticationPluginOk returns a tuple with the PostAuthenticationPlugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetPostAuthenticationPluginOk() (*OasPostAuthenticationPlugin, bool) {
	if o == nil || IsNil(o.PostAuthenticationPlugin) {
		return nil, false
	}
	return o.PostAuthenticationPlugin, true
}

// HasPostAuthenticationPlugin returns a boolean if a field has been set.
func (o *OasGlobal) HasPostAuthenticationPlugin() bool {
	if o != nil && !IsNil(o.PostAuthenticationPlugin) {
		return true
	}

	return false
}

// SetPostAuthenticationPlugin gets a reference to the given OasPostAuthenticationPlugin and assigns it to the PostAuthenticationPlugin field.
func (o *OasGlobal) SetPostAuthenticationPlugin(v OasPostAuthenticationPlugin) {
	o.PostAuthenticationPlugin = &v
}

// GetPostAuthenticationPlugins returns the PostAuthenticationPlugins field value if set, zero value otherwise.
func (o *OasGlobal) GetPostAuthenticationPlugins() []OasCustomPlugin {
	if o == nil || IsNil(o.PostAuthenticationPlugins) {
		var ret []OasCustomPlugin
		return ret
	}
	return o.PostAuthenticationPlugins
}

// GetPostAuthenticationPluginsOk returns a tuple with the PostAuthenticationPlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetPostAuthenticationPluginsOk() ([]OasCustomPlugin, bool) {
	if o == nil || IsNil(o.PostAuthenticationPlugins) {
		return nil, false
	}
	return o.PostAuthenticationPlugins, true
}

// HasPostAuthenticationPlugins returns a boolean if a field has been set.
func (o *OasGlobal) HasPostAuthenticationPlugins() bool {
	if o != nil && !IsNil(o.PostAuthenticationPlugins) {
		return true
	}

	return false
}

// SetPostAuthenticationPlugins gets a reference to the given []OasCustomPlugin and assigns it to the PostAuthenticationPlugins field.
func (o *OasGlobal) SetPostAuthenticationPlugins(v []OasCustomPlugin) {
	o.PostAuthenticationPlugins = v
}

// GetPostPlugin returns the PostPlugin field value if set, zero value otherwise.
func (o *OasGlobal) GetPostPlugin() OasPostPlugin {
	if o == nil || IsNil(o.PostPlugin) {
		var ret OasPostPlugin
		return ret
	}
	return *o.PostPlugin
}

// GetPostPluginOk returns a tuple with the PostPlugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetPostPluginOk() (*OasPostPlugin, bool) {
	if o == nil || IsNil(o.PostPlugin) {
		return nil, false
	}
	return o.PostPlugin, true
}

// HasPostPlugin returns a boolean if a field has been set.
func (o *OasGlobal) HasPostPlugin() bool {
	if o != nil && !IsNil(o.PostPlugin) {
		return true
	}

	return false
}

// SetPostPlugin gets a reference to the given OasPostPlugin and assigns it to the PostPlugin field.
func (o *OasGlobal) SetPostPlugin(v OasPostPlugin) {
	o.PostPlugin = &v
}

// GetPostPlugins returns the PostPlugins field value if set, zero value otherwise.
func (o *OasGlobal) GetPostPlugins() []OasCustomPlugin {
	if o == nil || IsNil(o.PostPlugins) {
		var ret []OasCustomPlugin
		return ret
	}
	return o.PostPlugins
}

// GetPostPluginsOk returns a tuple with the PostPlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetPostPluginsOk() ([]OasCustomPlugin, bool) {
	if o == nil || IsNil(o.PostPlugins) {
		return nil, false
	}
	return o.PostPlugins, true
}

// HasPostPlugins returns a boolean if a field has been set.
func (o *OasGlobal) HasPostPlugins() bool {
	if o != nil && !IsNil(o.PostPlugins) {
		return true
	}

	return false
}

// SetPostPlugins gets a reference to the given []OasCustomPlugin and assigns it to the PostPlugins field.
func (o *OasGlobal) SetPostPlugins(v []OasCustomPlugin) {
	o.PostPlugins = v
}

// GetPrePlugin returns the PrePlugin field value if set, zero value otherwise.
func (o *OasGlobal) GetPrePlugin() OasPrePlugin {
	if o == nil || IsNil(o.PrePlugin) {
		var ret OasPrePlugin
		return ret
	}
	return *o.PrePlugin
}

// GetPrePluginOk returns a tuple with the PrePlugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetPrePluginOk() (*OasPrePlugin, bool) {
	if o == nil || IsNil(o.PrePlugin) {
		return nil, false
	}
	return o.PrePlugin, true
}

// HasPrePlugin returns a boolean if a field has been set.
func (o *OasGlobal) HasPrePlugin() bool {
	if o != nil && !IsNil(o.PrePlugin) {
		return true
	}

	return false
}

// SetPrePlugin gets a reference to the given OasPrePlugin and assigns it to the PrePlugin field.
func (o *OasGlobal) SetPrePlugin(v OasPrePlugin) {
	o.PrePlugin = &v
}

// GetPrePlugins returns the PrePlugins field value if set, zero value otherwise.
func (o *OasGlobal) GetPrePlugins() []OasCustomPlugin {
	if o == nil || IsNil(o.PrePlugins) {
		var ret []OasCustomPlugin
		return ret
	}
	return o.PrePlugins
}

// GetPrePluginsOk returns a tuple with the PrePlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetPrePluginsOk() ([]OasCustomPlugin, bool) {
	if o == nil || IsNil(o.PrePlugins) {
		return nil, false
	}
	return o.PrePlugins, true
}

// HasPrePlugins returns a boolean if a field has been set.
func (o *OasGlobal) HasPrePlugins() bool {
	if o != nil && !IsNil(o.PrePlugins) {
		return true
	}

	return false
}

// SetPrePlugins gets a reference to the given []OasCustomPlugin and assigns it to the PrePlugins field.
func (o *OasGlobal) SetPrePlugins(v []OasCustomPlugin) {
	o.PrePlugins = v
}

// GetResponsePlugin returns the ResponsePlugin field value if set, zero value otherwise.
func (o *OasGlobal) GetResponsePlugin() OasResponsePlugin {
	if o == nil || IsNil(o.ResponsePlugin) {
		var ret OasResponsePlugin
		return ret
	}
	return *o.ResponsePlugin
}

// GetResponsePluginOk returns a tuple with the ResponsePlugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetResponsePluginOk() (*OasResponsePlugin, bool) {
	if o == nil || IsNil(o.ResponsePlugin) {
		return nil, false
	}
	return o.ResponsePlugin, true
}

// HasResponsePlugin returns a boolean if a field has been set.
func (o *OasGlobal) HasResponsePlugin() bool {
	if o != nil && !IsNil(o.ResponsePlugin) {
		return true
	}

	return false
}

// SetResponsePlugin gets a reference to the given OasResponsePlugin and assigns it to the ResponsePlugin field.
func (o *OasGlobal) SetResponsePlugin(v OasResponsePlugin) {
	o.ResponsePlugin = &v
}

// GetResponsePlugins returns the ResponsePlugins field value if set, zero value otherwise.
func (o *OasGlobal) GetResponsePlugins() []OasCustomPlugin {
	if o == nil || IsNil(o.ResponsePlugins) {
		var ret []OasCustomPlugin
		return ret
	}
	return o.ResponsePlugins
}

// GetResponsePluginsOk returns a tuple with the ResponsePlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetResponsePluginsOk() ([]OasCustomPlugin, bool) {
	if o == nil || IsNil(o.ResponsePlugins) {
		return nil, false
	}
	return o.ResponsePlugins, true
}

// HasResponsePlugins returns a boolean if a field has been set.
func (o *OasGlobal) HasResponsePlugins() bool {
	if o != nil && !IsNil(o.ResponsePlugins) {
		return true
	}

	return false
}

// SetResponsePlugins gets a reference to the given []OasCustomPlugin and assigns it to the ResponsePlugins field.
func (o *OasGlobal) SetResponsePlugins(v []OasCustomPlugin) {
	o.ResponsePlugins = v
}

// GetTrafficLogs returns the TrafficLogs field value if set, zero value otherwise.
func (o *OasGlobal) GetTrafficLogs() OasTrafficLogs {
	if o == nil || IsNil(o.TrafficLogs) {
		var ret OasTrafficLogs
		return ret
	}
	return *o.TrafficLogs
}

// GetTrafficLogsOk returns a tuple with the TrafficLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetTrafficLogsOk() (*OasTrafficLogs, bool) {
	if o == nil || IsNil(o.TrafficLogs) {
		return nil, false
	}
	return o.TrafficLogs, true
}

// HasTrafficLogs returns a boolean if a field has been set.
func (o *OasGlobal) HasTrafficLogs() bool {
	if o != nil && !IsNil(o.TrafficLogs) {
		return true
	}

	return false
}

// SetTrafficLogs gets a reference to the given OasTrafficLogs and assigns it to the TrafficLogs field.
func (o *OasGlobal) SetTrafficLogs(v OasTrafficLogs) {
	o.TrafficLogs = &v
}

// GetTransformRequestHeaders returns the TransformRequestHeaders field value if set, zero value otherwise.
func (o *OasGlobal) GetTransformRequestHeaders() OasTransformHeaders {
	if o == nil || IsNil(o.TransformRequestHeaders) {
		var ret OasTransformHeaders
		return ret
	}
	return *o.TransformRequestHeaders
}

// GetTransformRequestHeadersOk returns a tuple with the TransformRequestHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetTransformRequestHeadersOk() (*OasTransformHeaders, bool) {
	if o == nil || IsNil(o.TransformRequestHeaders) {
		return nil, false
	}
	return o.TransformRequestHeaders, true
}

// HasTransformRequestHeaders returns a boolean if a field has been set.
func (o *OasGlobal) HasTransformRequestHeaders() bool {
	if o != nil && !IsNil(o.TransformRequestHeaders) {
		return true
	}

	return false
}

// SetTransformRequestHeaders gets a reference to the given OasTransformHeaders and assigns it to the TransformRequestHeaders field.
func (o *OasGlobal) SetTransformRequestHeaders(v OasTransformHeaders) {
	o.TransformRequestHeaders = &v
}

// GetTransformResponseHeaders returns the TransformResponseHeaders field value if set, zero value otherwise.
func (o *OasGlobal) GetTransformResponseHeaders() OasTransformHeaders {
	if o == nil || IsNil(o.TransformResponseHeaders) {
		var ret OasTransformHeaders
		return ret
	}
	return *o.TransformResponseHeaders
}

// GetTransformResponseHeadersOk returns a tuple with the TransformResponseHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasGlobal) GetTransformResponseHeadersOk() (*OasTransformHeaders, bool) {
	if o == nil || IsNil(o.TransformResponseHeaders) {
		return nil, false
	}
	return o.TransformResponseHeaders, true
}

// HasTransformResponseHeaders returns a boolean if a field has been set.
func (o *OasGlobal) HasTransformResponseHeaders() bool {
	if o != nil && !IsNil(o.TransformResponseHeaders) {
		return true
	}

	return false
}

// SetTransformResponseHeaders gets a reference to the given OasTransformHeaders and assigns it to the TransformResponseHeaders field.
func (o *OasGlobal) SetTransformResponseHeaders(v OasTransformHeaders) {
	o.TransformResponseHeaders = &v
}

func (o OasGlobal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OasGlobal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	if !IsNil(o.ContextVariables) {
		toSerialize["contextVariables"] = o.ContextVariables
	}
	if !IsNil(o.Cors) {
		toSerialize["cors"] = o.Cors
	}
	if !IsNil(o.PluginConfig) {
		toSerialize["pluginConfig"] = o.PluginConfig
	}
	if !IsNil(o.PostAuthenticationPlugin) {
		toSerialize["postAuthenticationPlugin"] = o.PostAuthenticationPlugin
	}
	if !IsNil(o.PostAuthenticationPlugins) {
		toSerialize["postAuthenticationPlugins"] = o.PostAuthenticationPlugins
	}
	if !IsNil(o.PostPlugin) {
		toSerialize["postPlugin"] = o.PostPlugin
	}
	if !IsNil(o.PostPlugins) {
		toSerialize["postPlugins"] = o.PostPlugins
	}
	if !IsNil(o.PrePlugin) {
		toSerialize["prePlugin"] = o.PrePlugin
	}
	if !IsNil(o.PrePlugins) {
		toSerialize["prePlugins"] = o.PrePlugins
	}
	if !IsNil(o.ResponsePlugin) {
		toSerialize["responsePlugin"] = o.ResponsePlugin
	}
	if !IsNil(o.ResponsePlugins) {
		toSerialize["responsePlugins"] = o.ResponsePlugins
	}
	if !IsNil(o.TrafficLogs) {
		toSerialize["trafficLogs"] = o.TrafficLogs
	}
	if !IsNil(o.TransformRequestHeaders) {
		toSerialize["transformRequestHeaders"] = o.TransformRequestHeaders
	}
	if !IsNil(o.TransformResponseHeaders) {
		toSerialize["transformResponseHeaders"] = o.TransformResponseHeaders
	}
	return toSerialize, nil
}

type NullableOasGlobal struct {
	value *OasGlobal
	isSet bool
}

func (v NullableOasGlobal) Get() *OasGlobal {
	return v.value
}

func (v *NullableOasGlobal) Set(val *OasGlobal) {
	v.value = val
	v.isSet = true
}

func (v NullableOasGlobal) IsSet() bool {
	return v.isSet
}

func (v *NullableOasGlobal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOasGlobal(val *OasGlobal) *NullableOasGlobal {
	return &NullableOasGlobal{value: val, isSet: true}
}

func (v NullableOasGlobal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOasGlobal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
