/*
Tyk Dashboard API

 ## <a name=\"introduction\"></a> Introduction  The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.  A common question around using a database-backed configuration is how to programmatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.  The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).  ## <a name=\"security-hierarchy\"></a> Security Hierarchy  The Dashboard API provides a more structured security layer to managing Tyk nodes.  ### Organisations, APIs and Users  With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming and creating definitions), the following security model is applied to the management of Upstream APIs:  * **Organisations**: All APIs are *owned* by an organisation, this is designated by the 'OrgID' parameter in the API Definition. * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access). * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations. * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation. * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.  In order to use the Dashboard API, you'll need to get the 'Tyk Dashboard API Access Credentials' secret from your user profile on the Dashboard UI.  The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:   authorization: <your-secret>

API version: 5.7.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the Operation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Operation{}

// Operation struct for Operation
type Operation struct {
	Allow                    NullableAllowance              `json:"allow,omitempty"`
	Block                    NullableAllowance              `json:"block,omitempty"`
	Cache                    NullableCachePlugin            `json:"cache,omitempty"`
	CircuitBreaker           NullableCircuitBreaker         `json:"circuitBreaker,omitempty"`
	DoNotTrackEndpoint       NullableTrackEndpoint          `json:"doNotTrackEndpoint,omitempty"`
	EnforceTimeout           NullableEnforceTimeout         `json:"enforceTimeout,omitempty"`
	IgnoreAuthentication     NullableAllowance              `json:"ignoreAuthentication,omitempty"`
	Internal                 NullableInternal               `json:"internal,omitempty"`
	MockResponse             NullableMockResponse           `json:"mockResponse,omitempty"`
	PostPlugins              []EndpointPostPlugin           `json:"postPlugins,omitempty"`
	RateLimit                NullableRateLimitEndpoint      `json:"rateLimit,omitempty"`
	RequestSizeLimit         NullableRequestSizeLimit       `json:"requestSizeLimit,omitempty"`
	TrackEndpoint            NullableTrackEndpoint          `json:"trackEndpoint,omitempty"`
	TransformRequestBody     NullableTransformBody          `json:"transformRequestBody,omitempty"`
	TransformRequestHeaders  NullableTransformHeaders       `json:"transformRequestHeaders,omitempty"`
	TransformRequestMethod   NullableTransformRequestMethod `json:"transformRequestMethod,omitempty"`
	TransformResponseBody    NullableTransformBody          `json:"transformResponseBody,omitempty"`
	TransformResponseHeaders NullableTransformHeaders       `json:"transformResponseHeaders,omitempty"`
	UrlRewrite               NullableURLRewrite             `json:"urlRewrite,omitempty"`
	ValidateRequest          NullableValidateRequest        `json:"validateRequest,omitempty"`
	VirtualEndpoint          NullableVirtualEndpoint        `json:"virtualEndpoint,omitempty"`
}

// NewOperation instantiates a new Operation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperation() *Operation {
	this := Operation{}
	return &this
}

// NewOperationWithDefaults instantiates a new Operation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationWithDefaults() *Operation {
	this := Operation{}
	return &this
}

// GetAllow returns the Allow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetAllow() Allowance {
	if o == nil || IsNil(o.Allow.Get()) {
		var ret Allowance
		return ret
	}
	return *o.Allow.Get()
}

// GetAllowOk returns a tuple with the Allow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetAllowOk() (*Allowance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Allow.Get(), o.Allow.IsSet()
}

// HasAllow returns a boolean if a field has been set.
func (o *Operation) HasAllow() bool {
	if o != nil && o.Allow.IsSet() {
		return true
	}

	return false
}

// SetAllow gets a reference to the given NullableAllowance and assigns it to the Allow field.
func (o *Operation) SetAllow(v Allowance) {
	o.Allow.Set(&v)
}

// SetAllowNil sets the value for Allow to be an explicit nil
func (o *Operation) SetAllowNil() {
	o.Allow.Set(nil)
}

// UnsetAllow ensures that no value is present for Allow, not even an explicit nil
func (o *Operation) UnsetAllow() {
	o.Allow.Unset()
}

// GetBlock returns the Block field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetBlock() Allowance {
	if o == nil || IsNil(o.Block.Get()) {
		var ret Allowance
		return ret
	}
	return *o.Block.Get()
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetBlockOk() (*Allowance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Block.Get(), o.Block.IsSet()
}

// HasBlock returns a boolean if a field has been set.
func (o *Operation) HasBlock() bool {
	if o != nil && o.Block.IsSet() {
		return true
	}

	return false
}

// SetBlock gets a reference to the given NullableAllowance and assigns it to the Block field.
func (o *Operation) SetBlock(v Allowance) {
	o.Block.Set(&v)
}

// SetBlockNil sets the value for Block to be an explicit nil
func (o *Operation) SetBlockNil() {
	o.Block.Set(nil)
}

// UnsetBlock ensures that no value is present for Block, not even an explicit nil
func (o *Operation) UnsetBlock() {
	o.Block.Unset()
}

// GetCache returns the Cache field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetCache() CachePlugin {
	if o == nil || IsNil(o.Cache.Get()) {
		var ret CachePlugin
		return ret
	}
	return *o.Cache.Get()
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetCacheOk() (*CachePlugin, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cache.Get(), o.Cache.IsSet()
}

// HasCache returns a boolean if a field has been set.
func (o *Operation) HasCache() bool {
	if o != nil && o.Cache.IsSet() {
		return true
	}

	return false
}

// SetCache gets a reference to the given NullableCachePlugin and assigns it to the Cache field.
func (o *Operation) SetCache(v CachePlugin) {
	o.Cache.Set(&v)
}

// SetCacheNil sets the value for Cache to be an explicit nil
func (o *Operation) SetCacheNil() {
	o.Cache.Set(nil)
}

// UnsetCache ensures that no value is present for Cache, not even an explicit nil
func (o *Operation) UnsetCache() {
	o.Cache.Unset()
}

// GetCircuitBreaker returns the CircuitBreaker field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetCircuitBreaker() CircuitBreaker {
	if o == nil || IsNil(o.CircuitBreaker.Get()) {
		var ret CircuitBreaker
		return ret
	}
	return *o.CircuitBreaker.Get()
}

// GetCircuitBreakerOk returns a tuple with the CircuitBreaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetCircuitBreakerOk() (*CircuitBreaker, bool) {
	if o == nil {
		return nil, false
	}
	return o.CircuitBreaker.Get(), o.CircuitBreaker.IsSet()
}

// HasCircuitBreaker returns a boolean if a field has been set.
func (o *Operation) HasCircuitBreaker() bool {
	if o != nil && o.CircuitBreaker.IsSet() {
		return true
	}

	return false
}

// SetCircuitBreaker gets a reference to the given NullableCircuitBreaker and assigns it to the CircuitBreaker field.
func (o *Operation) SetCircuitBreaker(v CircuitBreaker) {
	o.CircuitBreaker.Set(&v)
}

// SetCircuitBreakerNil sets the value for CircuitBreaker to be an explicit nil
func (o *Operation) SetCircuitBreakerNil() {
	o.CircuitBreaker.Set(nil)
}

// UnsetCircuitBreaker ensures that no value is present for CircuitBreaker, not even an explicit nil
func (o *Operation) UnsetCircuitBreaker() {
	o.CircuitBreaker.Unset()
}

// GetDoNotTrackEndpoint returns the DoNotTrackEndpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetDoNotTrackEndpoint() TrackEndpoint {
	if o == nil || IsNil(o.DoNotTrackEndpoint.Get()) {
		var ret TrackEndpoint
		return ret
	}
	return *o.DoNotTrackEndpoint.Get()
}

// GetDoNotTrackEndpointOk returns a tuple with the DoNotTrackEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetDoNotTrackEndpointOk() (*TrackEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.DoNotTrackEndpoint.Get(), o.DoNotTrackEndpoint.IsSet()
}

// HasDoNotTrackEndpoint returns a boolean if a field has been set.
func (o *Operation) HasDoNotTrackEndpoint() bool {
	if o != nil && o.DoNotTrackEndpoint.IsSet() {
		return true
	}

	return false
}

// SetDoNotTrackEndpoint gets a reference to the given NullableTrackEndpoint and assigns it to the DoNotTrackEndpoint field.
func (o *Operation) SetDoNotTrackEndpoint(v TrackEndpoint) {
	o.DoNotTrackEndpoint.Set(&v)
}

// SetDoNotTrackEndpointNil sets the value for DoNotTrackEndpoint to be an explicit nil
func (o *Operation) SetDoNotTrackEndpointNil() {
	o.DoNotTrackEndpoint.Set(nil)
}

// UnsetDoNotTrackEndpoint ensures that no value is present for DoNotTrackEndpoint, not even an explicit nil
func (o *Operation) UnsetDoNotTrackEndpoint() {
	o.DoNotTrackEndpoint.Unset()
}

// GetEnforceTimeout returns the EnforceTimeout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetEnforceTimeout() EnforceTimeout {
	if o == nil || IsNil(o.EnforceTimeout.Get()) {
		var ret EnforceTimeout
		return ret
	}
	return *o.EnforceTimeout.Get()
}

// GetEnforceTimeoutOk returns a tuple with the EnforceTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetEnforceTimeoutOk() (*EnforceTimeout, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnforceTimeout.Get(), o.EnforceTimeout.IsSet()
}

// HasEnforceTimeout returns a boolean if a field has been set.
func (o *Operation) HasEnforceTimeout() bool {
	if o != nil && o.EnforceTimeout.IsSet() {
		return true
	}

	return false
}

// SetEnforceTimeout gets a reference to the given NullableEnforceTimeout and assigns it to the EnforceTimeout field.
func (o *Operation) SetEnforceTimeout(v EnforceTimeout) {
	o.EnforceTimeout.Set(&v)
}

// SetEnforceTimeoutNil sets the value for EnforceTimeout to be an explicit nil
func (o *Operation) SetEnforceTimeoutNil() {
	o.EnforceTimeout.Set(nil)
}

// UnsetEnforceTimeout ensures that no value is present for EnforceTimeout, not even an explicit nil
func (o *Operation) UnsetEnforceTimeout() {
	o.EnforceTimeout.Unset()
}

// GetIgnoreAuthentication returns the IgnoreAuthentication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetIgnoreAuthentication() Allowance {
	if o == nil || IsNil(o.IgnoreAuthentication.Get()) {
		var ret Allowance
		return ret
	}
	return *o.IgnoreAuthentication.Get()
}

// GetIgnoreAuthenticationOk returns a tuple with the IgnoreAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetIgnoreAuthenticationOk() (*Allowance, bool) {
	if o == nil {
		return nil, false
	}
	return o.IgnoreAuthentication.Get(), o.IgnoreAuthentication.IsSet()
}

// HasIgnoreAuthentication returns a boolean if a field has been set.
func (o *Operation) HasIgnoreAuthentication() bool {
	if o != nil && o.IgnoreAuthentication.IsSet() {
		return true
	}

	return false
}

// SetIgnoreAuthentication gets a reference to the given NullableAllowance and assigns it to the IgnoreAuthentication field.
func (o *Operation) SetIgnoreAuthentication(v Allowance) {
	o.IgnoreAuthentication.Set(&v)
}

// SetIgnoreAuthenticationNil sets the value for IgnoreAuthentication to be an explicit nil
func (o *Operation) SetIgnoreAuthenticationNil() {
	o.IgnoreAuthentication.Set(nil)
}

// UnsetIgnoreAuthentication ensures that no value is present for IgnoreAuthentication, not even an explicit nil
func (o *Operation) UnsetIgnoreAuthentication() {
	o.IgnoreAuthentication.Unset()
}

// GetInternal returns the Internal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetInternal() Internal {
	if o == nil || IsNil(o.Internal.Get()) {
		var ret Internal
		return ret
	}
	return *o.Internal.Get()
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetInternalOk() (*Internal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Internal.Get(), o.Internal.IsSet()
}

// HasInternal returns a boolean if a field has been set.
func (o *Operation) HasInternal() bool {
	if o != nil && o.Internal.IsSet() {
		return true
	}

	return false
}

// SetInternal gets a reference to the given NullableInternal and assigns it to the Internal field.
func (o *Operation) SetInternal(v Internal) {
	o.Internal.Set(&v)
}

// SetInternalNil sets the value for Internal to be an explicit nil
func (o *Operation) SetInternalNil() {
	o.Internal.Set(nil)
}

// UnsetInternal ensures that no value is present for Internal, not even an explicit nil
func (o *Operation) UnsetInternal() {
	o.Internal.Unset()
}

// GetMockResponse returns the MockResponse field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetMockResponse() MockResponse {
	if o == nil || IsNil(o.MockResponse.Get()) {
		var ret MockResponse
		return ret
	}
	return *o.MockResponse.Get()
}

// GetMockResponseOk returns a tuple with the MockResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetMockResponseOk() (*MockResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.MockResponse.Get(), o.MockResponse.IsSet()
}

// HasMockResponse returns a boolean if a field has been set.
func (o *Operation) HasMockResponse() bool {
	if o != nil && o.MockResponse.IsSet() {
		return true
	}

	return false
}

// SetMockResponse gets a reference to the given NullableMockResponse and assigns it to the MockResponse field.
func (o *Operation) SetMockResponse(v MockResponse) {
	o.MockResponse.Set(&v)
}

// SetMockResponseNil sets the value for MockResponse to be an explicit nil
func (o *Operation) SetMockResponseNil() {
	o.MockResponse.Set(nil)
}

// UnsetMockResponse ensures that no value is present for MockResponse, not even an explicit nil
func (o *Operation) UnsetMockResponse() {
	o.MockResponse.Unset()
}

// GetPostPlugins returns the PostPlugins field value if set, zero value otherwise.
func (o *Operation) GetPostPlugins() []EndpointPostPlugin {
	if o == nil || IsNil(o.PostPlugins) {
		var ret []EndpointPostPlugin
		return ret
	}
	return o.PostPlugins
}

// GetPostPluginsOk returns a tuple with the PostPlugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Operation) GetPostPluginsOk() ([]EndpointPostPlugin, bool) {
	if o == nil || IsNil(o.PostPlugins) {
		return nil, false
	}
	return o.PostPlugins, true
}

// HasPostPlugins returns a boolean if a field has been set.
func (o *Operation) HasPostPlugins() bool {
	if o != nil && !IsNil(o.PostPlugins) {
		return true
	}

	return false
}

// SetPostPlugins gets a reference to the given []EndpointPostPlugin and assigns it to the PostPlugins field.
func (o *Operation) SetPostPlugins(v []EndpointPostPlugin) {
	o.PostPlugins = v
}

// GetRateLimit returns the RateLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetRateLimit() RateLimitEndpoint {
	if o == nil || IsNil(o.RateLimit.Get()) {
		var ret RateLimitEndpoint
		return ret
	}
	return *o.RateLimit.Get()
}

// GetRateLimitOk returns a tuple with the RateLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetRateLimitOk() (*RateLimitEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.RateLimit.Get(), o.RateLimit.IsSet()
}

// HasRateLimit returns a boolean if a field has been set.
func (o *Operation) HasRateLimit() bool {
	if o != nil && o.RateLimit.IsSet() {
		return true
	}

	return false
}

// SetRateLimit gets a reference to the given NullableRateLimitEndpoint and assigns it to the RateLimit field.
func (o *Operation) SetRateLimit(v RateLimitEndpoint) {
	o.RateLimit.Set(&v)
}

// SetRateLimitNil sets the value for RateLimit to be an explicit nil
func (o *Operation) SetRateLimitNil() {
	o.RateLimit.Set(nil)
}

// UnsetRateLimit ensures that no value is present for RateLimit, not even an explicit nil
func (o *Operation) UnsetRateLimit() {
	o.RateLimit.Unset()
}

// GetRequestSizeLimit returns the RequestSizeLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetRequestSizeLimit() RequestSizeLimit {
	if o == nil || IsNil(o.RequestSizeLimit.Get()) {
		var ret RequestSizeLimit
		return ret
	}
	return *o.RequestSizeLimit.Get()
}

// GetRequestSizeLimitOk returns a tuple with the RequestSizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetRequestSizeLimitOk() (*RequestSizeLimit, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestSizeLimit.Get(), o.RequestSizeLimit.IsSet()
}

// HasRequestSizeLimit returns a boolean if a field has been set.
func (o *Operation) HasRequestSizeLimit() bool {
	if o != nil && o.RequestSizeLimit.IsSet() {
		return true
	}

	return false
}

// SetRequestSizeLimit gets a reference to the given NullableRequestSizeLimit and assigns it to the RequestSizeLimit field.
func (o *Operation) SetRequestSizeLimit(v RequestSizeLimit) {
	o.RequestSizeLimit.Set(&v)
}

// SetRequestSizeLimitNil sets the value for RequestSizeLimit to be an explicit nil
func (o *Operation) SetRequestSizeLimitNil() {
	o.RequestSizeLimit.Set(nil)
}

// UnsetRequestSizeLimit ensures that no value is present for RequestSizeLimit, not even an explicit nil
func (o *Operation) UnsetRequestSizeLimit() {
	o.RequestSizeLimit.Unset()
}

// GetTrackEndpoint returns the TrackEndpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetTrackEndpoint() TrackEndpoint {
	if o == nil || IsNil(o.TrackEndpoint.Get()) {
		var ret TrackEndpoint
		return ret
	}
	return *o.TrackEndpoint.Get()
}

// GetTrackEndpointOk returns a tuple with the TrackEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetTrackEndpointOk() (*TrackEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrackEndpoint.Get(), o.TrackEndpoint.IsSet()
}

// HasTrackEndpoint returns a boolean if a field has been set.
func (o *Operation) HasTrackEndpoint() bool {
	if o != nil && o.TrackEndpoint.IsSet() {
		return true
	}

	return false
}

// SetTrackEndpoint gets a reference to the given NullableTrackEndpoint and assigns it to the TrackEndpoint field.
func (o *Operation) SetTrackEndpoint(v TrackEndpoint) {
	o.TrackEndpoint.Set(&v)
}

// SetTrackEndpointNil sets the value for TrackEndpoint to be an explicit nil
func (o *Operation) SetTrackEndpointNil() {
	o.TrackEndpoint.Set(nil)
}

// UnsetTrackEndpoint ensures that no value is present for TrackEndpoint, not even an explicit nil
func (o *Operation) UnsetTrackEndpoint() {
	o.TrackEndpoint.Unset()
}

// GetTransformRequestBody returns the TransformRequestBody field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetTransformRequestBody() TransformBody {
	if o == nil || IsNil(o.TransformRequestBody.Get()) {
		var ret TransformBody
		return ret
	}
	return *o.TransformRequestBody.Get()
}

// GetTransformRequestBodyOk returns a tuple with the TransformRequestBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetTransformRequestBodyOk() (*TransformBody, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransformRequestBody.Get(), o.TransformRequestBody.IsSet()
}

// HasTransformRequestBody returns a boolean if a field has been set.
func (o *Operation) HasTransformRequestBody() bool {
	if o != nil && o.TransformRequestBody.IsSet() {
		return true
	}

	return false
}

// SetTransformRequestBody gets a reference to the given NullableTransformBody and assigns it to the TransformRequestBody field.
func (o *Operation) SetTransformRequestBody(v TransformBody) {
	o.TransformRequestBody.Set(&v)
}

// SetTransformRequestBodyNil sets the value for TransformRequestBody to be an explicit nil
func (o *Operation) SetTransformRequestBodyNil() {
	o.TransformRequestBody.Set(nil)
}

// UnsetTransformRequestBody ensures that no value is present for TransformRequestBody, not even an explicit nil
func (o *Operation) UnsetTransformRequestBody() {
	o.TransformRequestBody.Unset()
}

// GetTransformRequestHeaders returns the TransformRequestHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetTransformRequestHeaders() TransformHeaders {
	if o == nil || IsNil(o.TransformRequestHeaders.Get()) {
		var ret TransformHeaders
		return ret
	}
	return *o.TransformRequestHeaders.Get()
}

// GetTransformRequestHeadersOk returns a tuple with the TransformRequestHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetTransformRequestHeadersOk() (*TransformHeaders, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransformRequestHeaders.Get(), o.TransformRequestHeaders.IsSet()
}

// HasTransformRequestHeaders returns a boolean if a field has been set.
func (o *Operation) HasTransformRequestHeaders() bool {
	if o != nil && o.TransformRequestHeaders.IsSet() {
		return true
	}

	return false
}

// SetTransformRequestHeaders gets a reference to the given NullableTransformHeaders and assigns it to the TransformRequestHeaders field.
func (o *Operation) SetTransformRequestHeaders(v TransformHeaders) {
	o.TransformRequestHeaders.Set(&v)
}

// SetTransformRequestHeadersNil sets the value for TransformRequestHeaders to be an explicit nil
func (o *Operation) SetTransformRequestHeadersNil() {
	o.TransformRequestHeaders.Set(nil)
}

// UnsetTransformRequestHeaders ensures that no value is present for TransformRequestHeaders, not even an explicit nil
func (o *Operation) UnsetTransformRequestHeaders() {
	o.TransformRequestHeaders.Unset()
}

// GetTransformRequestMethod returns the TransformRequestMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetTransformRequestMethod() TransformRequestMethod {
	if o == nil || IsNil(o.TransformRequestMethod.Get()) {
		var ret TransformRequestMethod
		return ret
	}
	return *o.TransformRequestMethod.Get()
}

// GetTransformRequestMethodOk returns a tuple with the TransformRequestMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetTransformRequestMethodOk() (*TransformRequestMethod, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransformRequestMethod.Get(), o.TransformRequestMethod.IsSet()
}

// HasTransformRequestMethod returns a boolean if a field has been set.
func (o *Operation) HasTransformRequestMethod() bool {
	if o != nil && o.TransformRequestMethod.IsSet() {
		return true
	}

	return false
}

// SetTransformRequestMethod gets a reference to the given NullableTransformRequestMethod and assigns it to the TransformRequestMethod field.
func (o *Operation) SetTransformRequestMethod(v TransformRequestMethod) {
	o.TransformRequestMethod.Set(&v)
}

// SetTransformRequestMethodNil sets the value for TransformRequestMethod to be an explicit nil
func (o *Operation) SetTransformRequestMethodNil() {
	o.TransformRequestMethod.Set(nil)
}

// UnsetTransformRequestMethod ensures that no value is present for TransformRequestMethod, not even an explicit nil
func (o *Operation) UnsetTransformRequestMethod() {
	o.TransformRequestMethod.Unset()
}

// GetTransformResponseBody returns the TransformResponseBody field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetTransformResponseBody() TransformBody {
	if o == nil || IsNil(o.TransformResponseBody.Get()) {
		var ret TransformBody
		return ret
	}
	return *o.TransformResponseBody.Get()
}

// GetTransformResponseBodyOk returns a tuple with the TransformResponseBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetTransformResponseBodyOk() (*TransformBody, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransformResponseBody.Get(), o.TransformResponseBody.IsSet()
}

// HasTransformResponseBody returns a boolean if a field has been set.
func (o *Operation) HasTransformResponseBody() bool {
	if o != nil && o.TransformResponseBody.IsSet() {
		return true
	}

	return false
}

// SetTransformResponseBody gets a reference to the given NullableTransformBody and assigns it to the TransformResponseBody field.
func (o *Operation) SetTransformResponseBody(v TransformBody) {
	o.TransformResponseBody.Set(&v)
}

// SetTransformResponseBodyNil sets the value for TransformResponseBody to be an explicit nil
func (o *Operation) SetTransformResponseBodyNil() {
	o.TransformResponseBody.Set(nil)
}

// UnsetTransformResponseBody ensures that no value is present for TransformResponseBody, not even an explicit nil
func (o *Operation) UnsetTransformResponseBody() {
	o.TransformResponseBody.Unset()
}

// GetTransformResponseHeaders returns the TransformResponseHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetTransformResponseHeaders() TransformHeaders {
	if o == nil || IsNil(o.TransformResponseHeaders.Get()) {
		var ret TransformHeaders
		return ret
	}
	return *o.TransformResponseHeaders.Get()
}

// GetTransformResponseHeadersOk returns a tuple with the TransformResponseHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetTransformResponseHeadersOk() (*TransformHeaders, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransformResponseHeaders.Get(), o.TransformResponseHeaders.IsSet()
}

// HasTransformResponseHeaders returns a boolean if a field has been set.
func (o *Operation) HasTransformResponseHeaders() bool {
	if o != nil && o.TransformResponseHeaders.IsSet() {
		return true
	}

	return false
}

// SetTransformResponseHeaders gets a reference to the given NullableTransformHeaders and assigns it to the TransformResponseHeaders field.
func (o *Operation) SetTransformResponseHeaders(v TransformHeaders) {
	o.TransformResponseHeaders.Set(&v)
}

// SetTransformResponseHeadersNil sets the value for TransformResponseHeaders to be an explicit nil
func (o *Operation) SetTransformResponseHeadersNil() {
	o.TransformResponseHeaders.Set(nil)
}

// UnsetTransformResponseHeaders ensures that no value is present for TransformResponseHeaders, not even an explicit nil
func (o *Operation) UnsetTransformResponseHeaders() {
	o.TransformResponseHeaders.Unset()
}

// GetUrlRewrite returns the UrlRewrite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetUrlRewrite() URLRewrite {
	if o == nil || IsNil(o.UrlRewrite.Get()) {
		var ret URLRewrite
		return ret
	}
	return *o.UrlRewrite.Get()
}

// GetUrlRewriteOk returns a tuple with the UrlRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetUrlRewriteOk() (*URLRewrite, bool) {
	if o == nil {
		return nil, false
	}
	return o.UrlRewrite.Get(), o.UrlRewrite.IsSet()
}

// HasUrlRewrite returns a boolean if a field has been set.
func (o *Operation) HasUrlRewrite() bool {
	if o != nil && o.UrlRewrite.IsSet() {
		return true
	}

	return false
}

// SetUrlRewrite gets a reference to the given NullableURLRewrite and assigns it to the UrlRewrite field.
func (o *Operation) SetUrlRewrite(v URLRewrite) {
	o.UrlRewrite.Set(&v)
}

// SetUrlRewriteNil sets the value for UrlRewrite to be an explicit nil
func (o *Operation) SetUrlRewriteNil() {
	o.UrlRewrite.Set(nil)
}

// UnsetUrlRewrite ensures that no value is present for UrlRewrite, not even an explicit nil
func (o *Operation) UnsetUrlRewrite() {
	o.UrlRewrite.Unset()
}

// GetValidateRequest returns the ValidateRequest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetValidateRequest() ValidateRequest {
	if o == nil || IsNil(o.ValidateRequest.Get()) {
		var ret ValidateRequest
		return ret
	}
	return *o.ValidateRequest.Get()
}

// GetValidateRequestOk returns a tuple with the ValidateRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetValidateRequestOk() (*ValidateRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidateRequest.Get(), o.ValidateRequest.IsSet()
}

// HasValidateRequest returns a boolean if a field has been set.
func (o *Operation) HasValidateRequest() bool {
	if o != nil && o.ValidateRequest.IsSet() {
		return true
	}

	return false
}

// SetValidateRequest gets a reference to the given NullableValidateRequest and assigns it to the ValidateRequest field.
func (o *Operation) SetValidateRequest(v ValidateRequest) {
	o.ValidateRequest.Set(&v)
}

// SetValidateRequestNil sets the value for ValidateRequest to be an explicit nil
func (o *Operation) SetValidateRequestNil() {
	o.ValidateRequest.Set(nil)
}

// UnsetValidateRequest ensures that no value is present for ValidateRequest, not even an explicit nil
func (o *Operation) UnsetValidateRequest() {
	o.ValidateRequest.Unset()
}

// GetVirtualEndpoint returns the VirtualEndpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Operation) GetVirtualEndpoint() VirtualEndpoint {
	if o == nil || IsNil(o.VirtualEndpoint.Get()) {
		var ret VirtualEndpoint
		return ret
	}
	return *o.VirtualEndpoint.Get()
}

// GetVirtualEndpointOk returns a tuple with the VirtualEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Operation) GetVirtualEndpointOk() (*VirtualEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.VirtualEndpoint.Get(), o.VirtualEndpoint.IsSet()
}

// HasVirtualEndpoint returns a boolean if a field has been set.
func (o *Operation) HasVirtualEndpoint() bool {
	if o != nil && o.VirtualEndpoint.IsSet() {
		return true
	}

	return false
}

// SetVirtualEndpoint gets a reference to the given NullableVirtualEndpoint and assigns it to the VirtualEndpoint field.
func (o *Operation) SetVirtualEndpoint(v VirtualEndpoint) {
	o.VirtualEndpoint.Set(&v)
}

// SetVirtualEndpointNil sets the value for VirtualEndpoint to be an explicit nil
func (o *Operation) SetVirtualEndpointNil() {
	o.VirtualEndpoint.Set(nil)
}

// UnsetVirtualEndpoint ensures that no value is present for VirtualEndpoint, not even an explicit nil
func (o *Operation) UnsetVirtualEndpoint() {
	o.VirtualEndpoint.Unset()
}

func (o Operation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Operation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Allow.IsSet() {
		toSerialize["allow"] = o.Allow.Get()
	}
	if o.Block.IsSet() {
		toSerialize["block"] = o.Block.Get()
	}
	if o.Cache.IsSet() {
		toSerialize["cache"] = o.Cache.Get()
	}
	if o.CircuitBreaker.IsSet() {
		toSerialize["circuitBreaker"] = o.CircuitBreaker.Get()
	}
	if o.DoNotTrackEndpoint.IsSet() {
		toSerialize["doNotTrackEndpoint"] = o.DoNotTrackEndpoint.Get()
	}
	if o.EnforceTimeout.IsSet() {
		toSerialize["enforceTimeout"] = o.EnforceTimeout.Get()
	}
	if o.IgnoreAuthentication.IsSet() {
		toSerialize["ignoreAuthentication"] = o.IgnoreAuthentication.Get()
	}
	if o.Internal.IsSet() {
		toSerialize["internal"] = o.Internal.Get()
	}
	if o.MockResponse.IsSet() {
		toSerialize["mockResponse"] = o.MockResponse.Get()
	}
	if !IsNil(o.PostPlugins) {
		toSerialize["postPlugins"] = o.PostPlugins
	}
	if o.RateLimit.IsSet() {
		toSerialize["rateLimit"] = o.RateLimit.Get()
	}
	if o.RequestSizeLimit.IsSet() {
		toSerialize["requestSizeLimit"] = o.RequestSizeLimit.Get()
	}
	if o.TrackEndpoint.IsSet() {
		toSerialize["trackEndpoint"] = o.TrackEndpoint.Get()
	}
	if o.TransformRequestBody.IsSet() {
		toSerialize["transformRequestBody"] = o.TransformRequestBody.Get()
	}
	if o.TransformRequestHeaders.IsSet() {
		toSerialize["transformRequestHeaders"] = o.TransformRequestHeaders.Get()
	}
	if o.TransformRequestMethod.IsSet() {
		toSerialize["transformRequestMethod"] = o.TransformRequestMethod.Get()
	}
	if o.TransformResponseBody.IsSet() {
		toSerialize["transformResponseBody"] = o.TransformResponseBody.Get()
	}
	if o.TransformResponseHeaders.IsSet() {
		toSerialize["transformResponseHeaders"] = o.TransformResponseHeaders.Get()
	}
	if o.UrlRewrite.IsSet() {
		toSerialize["urlRewrite"] = o.UrlRewrite.Get()
	}
	if o.ValidateRequest.IsSet() {
		toSerialize["validateRequest"] = o.ValidateRequest.Get()
	}
	if o.VirtualEndpoint.IsSet() {
		toSerialize["virtualEndpoint"] = o.VirtualEndpoint.Get()
	}
	return toSerialize, nil
}

type NullableOperation struct {
	value *Operation
	isSet bool
}

func (v NullableOperation) Get() *Operation {
	return v.value
}

func (v *NullableOperation) Set(val *Operation) {
	v.value = val
	v.isSet = true
}

func (v NullableOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperation(val *Operation) *NullableOperation {
	return &NullableOperation{value: val, isSet: true}
}

func (v NullableOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
