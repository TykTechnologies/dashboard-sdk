/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the OasServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OasServer{}

// OasServer struct for OasServer
type OasServer struct {
	Authentication       *OasAuthentication       `json:"authentication,omitempty"`
	ClientCertificates   *OasClientCertificates   `json:"clientCertificates,omitempty"`
	CustomDomain         *OasDomain               `json:"customDomain,omitempty"`
	DetailedActivityLogs *OasDetailedActivityLogs `json:"detailedActivityLogs,omitempty"`
	DetailedTracing      *OasDetailedTracing      `json:"detailedTracing,omitempty"`
	EventHandlers        []OasEventHandler        `json:"eventHandlers,omitempty"`
	GatewayTags          *OasGatewayTags          `json:"gatewayTags,omitempty"`
	ListenPath           *OasListenPath           `json:"listenPath,omitempty"`
}

// NewOasServer instantiates a new OasServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOasServer() *OasServer {
	this := OasServer{}
	return &this
}

// NewOasServerWithDefaults instantiates a new OasServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOasServerWithDefaults() *OasServer {
	this := OasServer{}
	return &this
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise.
func (o *OasServer) GetAuthentication() OasAuthentication {
	if o == nil || IsNil(o.Authentication) {
		var ret OasAuthentication
		return ret
	}
	return *o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasServer) GetAuthenticationOk() (*OasAuthentication, bool) {
	if o == nil || IsNil(o.Authentication) {
		return nil, false
	}
	return o.Authentication, true
}

// HasAuthentication returns a boolean if a field has been set.
func (o *OasServer) HasAuthentication() bool {
	if o != nil && !IsNil(o.Authentication) {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given OasAuthentication and assigns it to the Authentication field.
func (o *OasServer) SetAuthentication(v OasAuthentication) {
	o.Authentication = &v
}

// GetClientCertificates returns the ClientCertificates field value if set, zero value otherwise.
func (o *OasServer) GetClientCertificates() OasClientCertificates {
	if o == nil || IsNil(o.ClientCertificates) {
		var ret OasClientCertificates
		return ret
	}
	return *o.ClientCertificates
}

// GetClientCertificatesOk returns a tuple with the ClientCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasServer) GetClientCertificatesOk() (*OasClientCertificates, bool) {
	if o == nil || IsNil(o.ClientCertificates) {
		return nil, false
	}
	return o.ClientCertificates, true
}

// HasClientCertificates returns a boolean if a field has been set.
func (o *OasServer) HasClientCertificates() bool {
	if o != nil && !IsNil(o.ClientCertificates) {
		return true
	}

	return false
}

// SetClientCertificates gets a reference to the given OasClientCertificates and assigns it to the ClientCertificates field.
func (o *OasServer) SetClientCertificates(v OasClientCertificates) {
	o.ClientCertificates = &v
}

// GetCustomDomain returns the CustomDomain field value if set, zero value otherwise.
func (o *OasServer) GetCustomDomain() OasDomain {
	if o == nil || IsNil(o.CustomDomain) {
		var ret OasDomain
		return ret
	}
	return *o.CustomDomain
}

// GetCustomDomainOk returns a tuple with the CustomDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasServer) GetCustomDomainOk() (*OasDomain, bool) {
	if o == nil || IsNil(o.CustomDomain) {
		return nil, false
	}
	return o.CustomDomain, true
}

// HasCustomDomain returns a boolean if a field has been set.
func (o *OasServer) HasCustomDomain() bool {
	if o != nil && !IsNil(o.CustomDomain) {
		return true
	}

	return false
}

// SetCustomDomain gets a reference to the given OasDomain and assigns it to the CustomDomain field.
func (o *OasServer) SetCustomDomain(v OasDomain) {
	o.CustomDomain = &v
}

// GetDetailedActivityLogs returns the DetailedActivityLogs field value if set, zero value otherwise.
func (o *OasServer) GetDetailedActivityLogs() OasDetailedActivityLogs {
	if o == nil || IsNil(o.DetailedActivityLogs) {
		var ret OasDetailedActivityLogs
		return ret
	}
	return *o.DetailedActivityLogs
}

// GetDetailedActivityLogsOk returns a tuple with the DetailedActivityLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasServer) GetDetailedActivityLogsOk() (*OasDetailedActivityLogs, bool) {
	if o == nil || IsNil(o.DetailedActivityLogs) {
		return nil, false
	}
	return o.DetailedActivityLogs, true
}

// HasDetailedActivityLogs returns a boolean if a field has been set.
func (o *OasServer) HasDetailedActivityLogs() bool {
	if o != nil && !IsNil(o.DetailedActivityLogs) {
		return true
	}

	return false
}

// SetDetailedActivityLogs gets a reference to the given OasDetailedActivityLogs and assigns it to the DetailedActivityLogs field.
func (o *OasServer) SetDetailedActivityLogs(v OasDetailedActivityLogs) {
	o.DetailedActivityLogs = &v
}

// GetDetailedTracing returns the DetailedTracing field value if set, zero value otherwise.
func (o *OasServer) GetDetailedTracing() OasDetailedTracing {
	if o == nil || IsNil(o.DetailedTracing) {
		var ret OasDetailedTracing
		return ret
	}
	return *o.DetailedTracing
}

// GetDetailedTracingOk returns a tuple with the DetailedTracing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasServer) GetDetailedTracingOk() (*OasDetailedTracing, bool) {
	if o == nil || IsNil(o.DetailedTracing) {
		return nil, false
	}
	return o.DetailedTracing, true
}

// HasDetailedTracing returns a boolean if a field has been set.
func (o *OasServer) HasDetailedTracing() bool {
	if o != nil && !IsNil(o.DetailedTracing) {
		return true
	}

	return false
}

// SetDetailedTracing gets a reference to the given OasDetailedTracing and assigns it to the DetailedTracing field.
func (o *OasServer) SetDetailedTracing(v OasDetailedTracing) {
	o.DetailedTracing = &v
}

// GetEventHandlers returns the EventHandlers field value if set, zero value otherwise.
func (o *OasServer) GetEventHandlers() []OasEventHandler {
	if o == nil || IsNil(o.EventHandlers) {
		var ret []OasEventHandler
		return ret
	}
	return o.EventHandlers
}

// GetEventHandlersOk returns a tuple with the EventHandlers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasServer) GetEventHandlersOk() ([]OasEventHandler, bool) {
	if o == nil || IsNil(o.EventHandlers) {
		return nil, false
	}
	return o.EventHandlers, true
}

// HasEventHandlers returns a boolean if a field has been set.
func (o *OasServer) HasEventHandlers() bool {
	if o != nil && !IsNil(o.EventHandlers) {
		return true
	}

	return false
}

// SetEventHandlers gets a reference to the given []OasEventHandler and assigns it to the EventHandlers field.
func (o *OasServer) SetEventHandlers(v []OasEventHandler) {
	o.EventHandlers = v
}

// GetGatewayTags returns the GatewayTags field value if set, zero value otherwise.
func (o *OasServer) GetGatewayTags() OasGatewayTags {
	if o == nil || IsNil(o.GatewayTags) {
		var ret OasGatewayTags
		return ret
	}
	return *o.GatewayTags
}

// GetGatewayTagsOk returns a tuple with the GatewayTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasServer) GetGatewayTagsOk() (*OasGatewayTags, bool) {
	if o == nil || IsNil(o.GatewayTags) {
		return nil, false
	}
	return o.GatewayTags, true
}

// HasGatewayTags returns a boolean if a field has been set.
func (o *OasServer) HasGatewayTags() bool {
	if o != nil && !IsNil(o.GatewayTags) {
		return true
	}

	return false
}

// SetGatewayTags gets a reference to the given OasGatewayTags and assigns it to the GatewayTags field.
func (o *OasServer) SetGatewayTags(v OasGatewayTags) {
	o.GatewayTags = &v
}

// GetListenPath returns the ListenPath field value if set, zero value otherwise.
func (o *OasServer) GetListenPath() OasListenPath {
	if o == nil || IsNil(o.ListenPath) {
		var ret OasListenPath
		return ret
	}
	return *o.ListenPath
}

// GetListenPathOk returns a tuple with the ListenPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OasServer) GetListenPathOk() (*OasListenPath, bool) {
	if o == nil || IsNil(o.ListenPath) {
		return nil, false
	}
	return o.ListenPath, true
}

// HasListenPath returns a boolean if a field has been set.
func (o *OasServer) HasListenPath() bool {
	if o != nil && !IsNil(o.ListenPath) {
		return true
	}

	return false
}

// SetListenPath gets a reference to the given OasListenPath and assigns it to the ListenPath field.
func (o *OasServer) SetListenPath(v OasListenPath) {
	o.ListenPath = &v
}

func (o OasServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OasServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Authentication) {
		toSerialize["authentication"] = o.Authentication
	}
	if !IsNil(o.ClientCertificates) {
		toSerialize["clientCertificates"] = o.ClientCertificates
	}
	if !IsNil(o.CustomDomain) {
		toSerialize["customDomain"] = o.CustomDomain
	}
	if !IsNil(o.DetailedActivityLogs) {
		toSerialize["detailedActivityLogs"] = o.DetailedActivityLogs
	}
	if !IsNil(o.DetailedTracing) {
		toSerialize["detailedTracing"] = o.DetailedTracing
	}
	if !IsNil(o.EventHandlers) {
		toSerialize["eventHandlers"] = o.EventHandlers
	}
	if !IsNil(o.GatewayTags) {
		toSerialize["gatewayTags"] = o.GatewayTags
	}
	if !IsNil(o.ListenPath) {
		toSerialize["listenPath"] = o.ListenPath
	}
	return toSerialize, nil
}

type NullableOasServer struct {
	value *OasServer
	isSet bool
}

func (v NullableOasServer) Get() *OasServer {
	return v.value
}

func (v *NullableOasServer) Set(val *OasServer) {
	v.value = val
	v.isSet = true
}

func (v NullableOasServer) IsSet() bool {
	return v.isSet
}

func (v *NullableOasServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOasServer(val *OasServer) *NullableOasServer {
	return &NullableOasServer{value: val, isSet: true}
}

func (v NullableOasServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOasServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
