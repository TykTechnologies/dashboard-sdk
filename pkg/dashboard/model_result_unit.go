/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
	"time"
)

// checks if the ResultUnit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultUnit{}

// ResultUnit struct for ResultUnit
type ResultUnit struct {
	Error              *int32     `json:"error,omitempty"`
	Hits               *int32     `json:"hits,omitempty"`
	Id                 *ResultId  `json:"id,omitempty"`
	LastHit            *time.Time `json:"last_hit,omitempty"`
	Latency            *float32   `json:"latency,omitempty"`
	MaxLatency         *int32     `json:"max_latency,omitempty"`
	MaxUpstreamLatency *int32     `json:"max_upstream_latency,omitempty"`
	MinLatency         *int32     `json:"min_latency,omitempty"`
	MinUpstreamLatency *int32     `json:"min_upstream_latency,omitempty"`
	RequestTime        *float32   `json:"request_time,omitempty"`
	Success            *int32     `json:"success,omitempty"`
	UpstreamLatency    *float32   `json:"upstream_latency,omitempty"`
}

// NewResultUnit instantiates a new ResultUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultUnit() *ResultUnit {
	this := ResultUnit{}
	return &this
}

// NewResultUnitWithDefaults instantiates a new ResultUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultUnitWithDefaults() *ResultUnit {
	this := ResultUnit{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ResultUnit) GetError() int32 {
	if o == nil || IsNil(o.Error) {
		var ret int32
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUnit) GetErrorOk() (*int32, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ResultUnit) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given int32 and assigns it to the Error field.
func (o *ResultUnit) SetError(v int32) {
	o.Error = &v
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *ResultUnit) GetHits() int32 {
	if o == nil || IsNil(o.Hits) {
		var ret int32
		return ret
	}
	return *o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUnit) GetHitsOk() (*int32, bool) {
	if o == nil || IsNil(o.Hits) {
		return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *ResultUnit) HasHits() bool {
	if o != nil && !IsNil(o.Hits) {
		return true
	}

	return false
}

// SetHits gets a reference to the given int32 and assigns it to the Hits field.
func (o *ResultUnit) SetHits(v int32) {
	o.Hits = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResultUnit) GetId() ResultId {
	if o == nil || IsNil(o.Id) {
		var ret ResultId
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUnit) GetIdOk() (*ResultId, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResultUnit) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given ResultId and assigns it to the Id field.
func (o *ResultUnit) SetId(v ResultId) {
	o.Id = &v
}

// GetLastHit returns the LastHit field value if set, zero value otherwise.
func (o *ResultUnit) GetLastHit() time.Time {
	if o == nil || IsNil(o.LastHit) {
		var ret time.Time
		return ret
	}
	return *o.LastHit
}

// GetLastHitOk returns a tuple with the LastHit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUnit) GetLastHitOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastHit) {
		return nil, false
	}
	return o.LastHit, true
}

// HasLastHit returns a boolean if a field has been set.
func (o *ResultUnit) HasLastHit() bool {
	if o != nil && !IsNil(o.LastHit) {
		return true
	}

	return false
}

// SetLastHit gets a reference to the given time.Time and assigns it to the LastHit field.
func (o *ResultUnit) SetLastHit(v time.Time) {
	o.LastHit = &v
}

// GetLatency returns the Latency field value if set, zero value otherwise.
func (o *ResultUnit) GetLatency() float32 {
	if o == nil || IsNil(o.Latency) {
		var ret float32
		return ret
	}
	return *o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUnit) GetLatencyOk() (*float32, bool) {
	if o == nil || IsNil(o.Latency) {
		return nil, false
	}
	return o.Latency, true
}

// HasLatency returns a boolean if a field has been set.
func (o *ResultUnit) HasLatency() bool {
	if o != nil && !IsNil(o.Latency) {
		return true
	}

	return false
}

// SetLatency gets a reference to the given float32 and assigns it to the Latency field.
func (o *ResultUnit) SetLatency(v float32) {
	o.Latency = &v
}

// GetMaxLatency returns the MaxLatency field value if set, zero value otherwise.
func (o *ResultUnit) GetMaxLatency() int32 {
	if o == nil || IsNil(o.MaxLatency) {
		var ret int32
		return ret
	}
	return *o.MaxLatency
}

// GetMaxLatencyOk returns a tuple with the MaxLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUnit) GetMaxLatencyOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLatency) {
		return nil, false
	}
	return o.MaxLatency, true
}

// HasMaxLatency returns a boolean if a field has been set.
func (o *ResultUnit) HasMaxLatency() bool {
	if o != nil && !IsNil(o.MaxLatency) {
		return true
	}

	return false
}

// SetMaxLatency gets a reference to the given int32 and assigns it to the MaxLatency field.
func (o *ResultUnit) SetMaxLatency(v int32) {
	o.MaxLatency = &v
}

// GetMaxUpstreamLatency returns the MaxUpstreamLatency field value if set, zero value otherwise.
func (o *ResultUnit) GetMaxUpstreamLatency() int32 {
	if o == nil || IsNil(o.MaxUpstreamLatency) {
		var ret int32
		return ret
	}
	return *o.MaxUpstreamLatency
}

// GetMaxUpstreamLatencyOk returns a tuple with the MaxUpstreamLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUnit) GetMaxUpstreamLatencyOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxUpstreamLatency) {
		return nil, false
	}
	return o.MaxUpstreamLatency, true
}

// HasMaxUpstreamLatency returns a boolean if a field has been set.
func (o *ResultUnit) HasMaxUpstreamLatency() bool {
	if o != nil && !IsNil(o.MaxUpstreamLatency) {
		return true
	}

	return false
}

// SetMaxUpstreamLatency gets a reference to the given int32 and assigns it to the MaxUpstreamLatency field.
func (o *ResultUnit) SetMaxUpstreamLatency(v int32) {
	o.MaxUpstreamLatency = &v
}

// GetMinLatency returns the MinLatency field value if set, zero value otherwise.
func (o *ResultUnit) GetMinLatency() int32 {
	if o == nil || IsNil(o.MinLatency) {
		var ret int32
		return ret
	}
	return *o.MinLatency
}

// GetMinLatencyOk returns a tuple with the MinLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUnit) GetMinLatencyOk() (*int32, bool) {
	if o == nil || IsNil(o.MinLatency) {
		return nil, false
	}
	return o.MinLatency, true
}

// HasMinLatency returns a boolean if a field has been set.
func (o *ResultUnit) HasMinLatency() bool {
	if o != nil && !IsNil(o.MinLatency) {
		return true
	}

	return false
}

// SetMinLatency gets a reference to the given int32 and assigns it to the MinLatency field.
func (o *ResultUnit) SetMinLatency(v int32) {
	o.MinLatency = &v
}

// GetMinUpstreamLatency returns the MinUpstreamLatency field value if set, zero value otherwise.
func (o *ResultUnit) GetMinUpstreamLatency() int32 {
	if o == nil || IsNil(o.MinUpstreamLatency) {
		var ret int32
		return ret
	}
	return *o.MinUpstreamLatency
}

// GetMinUpstreamLatencyOk returns a tuple with the MinUpstreamLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUnit) GetMinUpstreamLatencyOk() (*int32, bool) {
	if o == nil || IsNil(o.MinUpstreamLatency) {
		return nil, false
	}
	return o.MinUpstreamLatency, true
}

// HasMinUpstreamLatency returns a boolean if a field has been set.
func (o *ResultUnit) HasMinUpstreamLatency() bool {
	if o != nil && !IsNil(o.MinUpstreamLatency) {
		return true
	}

	return false
}

// SetMinUpstreamLatency gets a reference to the given int32 and assigns it to the MinUpstreamLatency field.
func (o *ResultUnit) SetMinUpstreamLatency(v int32) {
	o.MinUpstreamLatency = &v
}

// GetRequestTime returns the RequestTime field value if set, zero value otherwise.
func (o *ResultUnit) GetRequestTime() float32 {
	if o == nil || IsNil(o.RequestTime) {
		var ret float32
		return ret
	}
	return *o.RequestTime
}

// GetRequestTimeOk returns a tuple with the RequestTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUnit) GetRequestTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.RequestTime) {
		return nil, false
	}
	return o.RequestTime, true
}

// HasRequestTime returns a boolean if a field has been set.
func (o *ResultUnit) HasRequestTime() bool {
	if o != nil && !IsNil(o.RequestTime) {
		return true
	}

	return false
}

// SetRequestTime gets a reference to the given float32 and assigns it to the RequestTime field.
func (o *ResultUnit) SetRequestTime(v float32) {
	o.RequestTime = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ResultUnit) GetSuccess() int32 {
	if o == nil || IsNil(o.Success) {
		var ret int32
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUnit) GetSuccessOk() (*int32, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ResultUnit) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given int32 and assigns it to the Success field.
func (o *ResultUnit) SetSuccess(v int32) {
	o.Success = &v
}

// GetUpstreamLatency returns the UpstreamLatency field value if set, zero value otherwise.
func (o *ResultUnit) GetUpstreamLatency() float32 {
	if o == nil || IsNil(o.UpstreamLatency) {
		var ret float32
		return ret
	}
	return *o.UpstreamLatency
}

// GetUpstreamLatencyOk returns a tuple with the UpstreamLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultUnit) GetUpstreamLatencyOk() (*float32, bool) {
	if o == nil || IsNil(o.UpstreamLatency) {
		return nil, false
	}
	return o.UpstreamLatency, true
}

// HasUpstreamLatency returns a boolean if a field has been set.
func (o *ResultUnit) HasUpstreamLatency() bool {
	if o != nil && !IsNil(o.UpstreamLatency) {
		return true
	}

	return false
}

// SetUpstreamLatency gets a reference to the given float32 and assigns it to the UpstreamLatency field.
func (o *ResultUnit) SetUpstreamLatency(v float32) {
	o.UpstreamLatency = &v
}

func (o ResultUnit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultUnit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Hits) {
		toSerialize["hits"] = o.Hits
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastHit) {
		toSerialize["last_hit"] = o.LastHit
	}
	if !IsNil(o.Latency) {
		toSerialize["latency"] = o.Latency
	}
	if !IsNil(o.MaxLatency) {
		toSerialize["max_latency"] = o.MaxLatency
	}
	if !IsNil(o.MaxUpstreamLatency) {
		toSerialize["max_upstream_latency"] = o.MaxUpstreamLatency
	}
	if !IsNil(o.MinLatency) {
		toSerialize["min_latency"] = o.MinLatency
	}
	if !IsNil(o.MinUpstreamLatency) {
		toSerialize["min_upstream_latency"] = o.MinUpstreamLatency
	}
	if !IsNil(o.RequestTime) {
		toSerialize["request_time"] = o.RequestTime
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.UpstreamLatency) {
		toSerialize["upstream_latency"] = o.UpstreamLatency
	}
	return toSerialize, nil
}

type NullableResultUnit struct {
	value *ResultUnit
	isSet bool
}

func (v NullableResultUnit) Get() *ResultUnit {
	return v.value
}

func (v *NullableResultUnit) Set(val *ResultUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableResultUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableResultUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultUnit(val *ResultUnit) *NullableResultUnit {
	return &NullableResultUnit{value: val, isSet: true}
}

func (v NullableResultUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
