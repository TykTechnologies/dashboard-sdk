/*
Tyk Dashboard API

Testing CertificatesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dashboard

import (
	"context"
	openapiclient "github.com/TykTechnologies/dashboard-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_dashboard_CertificatesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CertificatesAPIService CreateCertificates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CertificatesAPI.CreateCertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificatesAPIService DeleteCertificateDependencies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var certId string

		resp, httpRes, err := apiClient.CertificatesAPI.DeleteCertificateDependencies(context.Background(), certId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificatesAPIService DeleteCertificates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var certId string

		resp, httpRes, err := apiClient.CertificatesAPI.DeleteCertificates(context.Background(), certId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificatesAPIService GetCertificate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var certId string

		resp, httpRes, err := apiClient.CertificatesAPI.GetCertificate(context.Background(), certId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificatesAPIService GetCertificateDependencies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var certId string

		resp, httpRes, err := apiClient.CertificatesAPI.GetCertificateDependencies(context.Background(), certId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificatesAPIService ListCertificates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CertificatesAPI.ListCertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificatesAPIService ListDetailedCertificates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CertificatesAPI.ListDetailedCertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
