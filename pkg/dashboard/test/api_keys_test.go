/*
Tyk Dashboard API

Testing KeysAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dashboard

import (
	"context"
	openapiclient "github.com/TykTechnologies/dashboard-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_dashboard_KeysAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KeysAPIService AddKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KeysAPI.AddKey(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeysAPIService CreateCustomKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var keyId string

		resp, httpRes, err := apiClient.KeysAPI.CreateCustomKey(context.Background(), keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeysAPIService DeleteApiKeyDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiID string
		var keyID string

		resp, httpRes, err := apiClient.KeysAPI.DeleteApiKeyDetail(context.Background(), apiID, keyID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeysAPIService DeleteKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var keyId string

		resp, httpRes, err := apiClient.KeysAPI.DeleteKey(context.Background(), keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeysAPIService GetApiKeyDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiID string
		var keyID string

		resp, httpRes, err := apiClient.KeysAPI.GetApiKeyDetail(context.Background(), apiID, keyID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeysAPIService GetKeyDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var keyId string

		resp, httpRes, err := apiClient.KeysAPI.GetKeyDetail(context.Background(), keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeysAPIService GetKeysDetailed", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KeysAPI.GetKeysDetailed(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeysAPIService ListApiKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiID string

		resp, httpRes, err := apiClient.KeysAPI.ListApiKeys(context.Background(), apiID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeysAPIService ListKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KeysAPI.ListKeys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeysAPIService SearchKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiId string

		resp, httpRes, err := apiClient.KeysAPI.SearchKeys(context.Background(), apiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeysAPIService UpdateApiKeyDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiID string
		var keyID string

		resp, httpRes, err := apiClient.KeysAPI.UpdateApiKeyDetail(context.Background(), apiID, keyID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeysAPIService UpdateKeyDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var keyId string

		resp, httpRes, err := apiClient.KeysAPI.UpdateKeyDetail(context.Background(), keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeysAPIService ValidateAKeyDefinition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KeysAPI.ValidateAKeyDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
