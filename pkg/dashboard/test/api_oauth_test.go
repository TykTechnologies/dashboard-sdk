/*
NEW Tyk DASH API

Testing OauthAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dashboard

import (
	"context"
	openapiclient "github.com/TykTechnologies/dashboard-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_dashboard_OauthAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OauthAPIService CreateNewClientApp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiId string

		resp, httpRes, err := apiClient.OauthAPI.CreateNewClientApp(context.Background(), apiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OauthAPIService DeleteOathClient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiId string
		var clientId string

		resp, httpRes, err := apiClient.OauthAPI.DeleteOathClient(context.Background(), apiId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OauthAPIService GetClientTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiId string
		var clientId string

		resp, httpRes, err := apiClient.OauthAPI.GetClientTokens(context.Background(), apiId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OauthAPIService GetOAuthClientDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiId string
		var clientId string

		resp, httpRes, err := apiClient.OauthAPI.GetOAuthClientDetail(context.Background(), apiId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OauthAPIService GetOathClientsList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiId string

		resp, httpRes, err := apiClient.OauthAPI.GetOathClientsList(context.Background(), apiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
