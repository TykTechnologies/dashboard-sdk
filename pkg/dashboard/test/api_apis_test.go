/*
Tyk Dashboard API

Testing APIsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dashboard

import (
	"context"
	openapiclient "github.com/TykTechnologies/dashboard-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_dashboard_APIsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test APIsAPIService DeleteApi", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiId string

		resp, httpRes, err := apiClient.APIsAPI.DeleteApi(context.Background(), apiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIsAPIService GetAPIExample", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var location string

		resp, httpRes, err := apiClient.APIsAPI.GetAPIExample(context.Background(), location).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIsAPIService GetAPIExamples", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.APIsAPI.GetAPIExamples(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIsAPIService GetAPIGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.APIsAPI.GetAPIGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIsAPIService GetAllApiCategories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.APIsAPI.GetAllApiCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIsAPIService GetApi", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiId string

		resp, httpRes, err := apiClient.APIsAPI.GetApi(context.Background(), apiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIsAPIService GetApiAccessRights", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiID string

		resp, httpRes, err := apiClient.APIsAPI.GetApiAccessRights(context.Background(), apiID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIsAPIService GetApiUrl", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiId string

		resp, httpRes, err := apiClient.APIsAPI.GetApiUrl(context.Background(), apiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIsAPIService GetApis", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.APIsAPI.GetApis(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIsAPIService PostApis", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.APIsAPI.PostApis(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIsAPIService PutApi", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiId string

		resp, httpRes, err := apiClient.APIsAPI.PutApi(context.Background(), apiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIsAPIService SearchApis", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.APIsAPI.SearchApis(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIsAPIService UpdateApiAccessRights", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiID string

		resp, httpRes, err := apiClient.APIsAPI.UpdateApiAccessRights(context.Background(), apiID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
