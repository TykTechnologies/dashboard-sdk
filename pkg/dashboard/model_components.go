/*
NEW Tyk DASH API

## <a name=\"introduction\"></a> Introduction      The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.      A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.      The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).      ## <a name=\"security-hierarchy\"></a> Security Hierarchy      The Dashboard API provides a more structured security layer to managing Tyk nodes.      ### Organisations, APIs and Users      With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:      * **Organisations**: All APIs are *owned* by an organisation, this is designated by the OrgID parameter in the API Definition.     * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).     * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.     * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.     * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.      In order to use the Dashboard API, you'll need to get the Tyk Dashboard API Access Credentials secret from your user profile on the Dashboard UI.      The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  authorization: <your-secret>

API version: 5.4.0
Contact: support@tyk.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboard

import (
	"encoding/json"
)

// checks if the Components type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Components{}

// Components struct for Components
type Components struct {
	Schemas         map[string]interface{} `json:"schemas,omitempty"`
	Responses       map[string]interface{} `json:"responses,omitempty"`
	Parameters      map[string]interface{} `json:"parameters,omitempty"`
	Examples        map[string]interface{} `json:"examples,omitempty"`
	RequestBodies   map[string]interface{} `json:"requestBodies,omitempty"`
	Headers         map[string]interface{} `json:"headers,omitempty"`
	SecuritySchemes map[string]interface{} `json:"securitySchemes,omitempty"`
	Links           map[string]interface{} `json:"links,omitempty"`
	Callbacks       map[string]interface{} `json:"callbacks,omitempty"`
}

// NewComponents instantiates a new Components object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponents() *Components {
	this := Components{}
	return &this
}

// NewComponentsWithDefaults instantiates a new Components object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentsWithDefaults() *Components {
	this := Components{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *Components) GetSchemas() map[string]interface{} {
	if o == nil || IsNil(o.Schemas) {
		var ret map[string]interface{}
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetSchemasOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Schemas) {
		return map[string]interface{}{}, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *Components) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given map[string]interface{} and assigns it to the Schemas field.
func (o *Components) SetSchemas(v map[string]interface{}) {
	o.Schemas = v
}

// GetResponses returns the Responses field value if set, zero value otherwise.
func (o *Components) GetResponses() map[string]interface{} {
	if o == nil || IsNil(o.Responses) {
		var ret map[string]interface{}
		return ret
	}
	return o.Responses
}

// GetResponsesOk returns a tuple with the Responses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetResponsesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Responses) {
		return map[string]interface{}{}, false
	}
	return o.Responses, true
}

// HasResponses returns a boolean if a field has been set.
func (o *Components) HasResponses() bool {
	if o != nil && !IsNil(o.Responses) {
		return true
	}

	return false
}

// SetResponses gets a reference to the given map[string]interface{} and assigns it to the Responses field.
func (o *Components) SetResponses(v map[string]interface{}) {
	o.Responses = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *Components) GetParameters() map[string]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *Components) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *Components) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetExamples returns the Examples field value if set, zero value otherwise.
func (o *Components) GetExamples() map[string]interface{} {
	if o == nil || IsNil(o.Examples) {
		var ret map[string]interface{}
		return ret
	}
	return o.Examples
}

// GetExamplesOk returns a tuple with the Examples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetExamplesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Examples) {
		return map[string]interface{}{}, false
	}
	return o.Examples, true
}

// HasExamples returns a boolean if a field has been set.
func (o *Components) HasExamples() bool {
	if o != nil && !IsNil(o.Examples) {
		return true
	}

	return false
}

// SetExamples gets a reference to the given map[string]interface{} and assigns it to the Examples field.
func (o *Components) SetExamples(v map[string]interface{}) {
	o.Examples = v
}

// GetRequestBodies returns the RequestBodies field value if set, zero value otherwise.
func (o *Components) GetRequestBodies() map[string]interface{} {
	if o == nil || IsNil(o.RequestBodies) {
		var ret map[string]interface{}
		return ret
	}
	return o.RequestBodies
}

// GetRequestBodiesOk returns a tuple with the RequestBodies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetRequestBodiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RequestBodies) {
		return map[string]interface{}{}, false
	}
	return o.RequestBodies, true
}

// HasRequestBodies returns a boolean if a field has been set.
func (o *Components) HasRequestBodies() bool {
	if o != nil && !IsNil(o.RequestBodies) {
		return true
	}

	return false
}

// SetRequestBodies gets a reference to the given map[string]interface{} and assigns it to the RequestBodies field.
func (o *Components) SetRequestBodies(v map[string]interface{}) {
	o.RequestBodies = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *Components) GetHeaders() map[string]interface{} {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]interface{}
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetHeadersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Headers) {
		return map[string]interface{}{}, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *Components) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]interface{} and assigns it to the Headers field.
func (o *Components) SetHeaders(v map[string]interface{}) {
	o.Headers = v
}

// GetSecuritySchemes returns the SecuritySchemes field value if set, zero value otherwise.
func (o *Components) GetSecuritySchemes() map[string]interface{} {
	if o == nil || IsNil(o.SecuritySchemes) {
		var ret map[string]interface{}
		return ret
	}
	return o.SecuritySchemes
}

// GetSecuritySchemesOk returns a tuple with the SecuritySchemes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetSecuritySchemesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SecuritySchemes) {
		return map[string]interface{}{}, false
	}
	return o.SecuritySchemes, true
}

// HasSecuritySchemes returns a boolean if a field has been set.
func (o *Components) HasSecuritySchemes() bool {
	if o != nil && !IsNil(o.SecuritySchemes) {
		return true
	}

	return false
}

// SetSecuritySchemes gets a reference to the given map[string]interface{} and assigns it to the SecuritySchemes field.
func (o *Components) SetSecuritySchemes(v map[string]interface{}) {
	o.SecuritySchemes = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Components) GetLinks() map[string]interface{} {
	if o == nil || IsNil(o.Links) {
		var ret map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Links) {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Components) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]interface{} and assigns it to the Links field.
func (o *Components) SetLinks(v map[string]interface{}) {
	o.Links = v
}

// GetCallbacks returns the Callbacks field value if set, zero value otherwise.
func (o *Components) GetCallbacks() map[string]interface{} {
	if o == nil || IsNil(o.Callbacks) {
		var ret map[string]interface{}
		return ret
	}
	return o.Callbacks
}

// GetCallbacksOk returns a tuple with the Callbacks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Components) GetCallbacksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Callbacks) {
		return map[string]interface{}{}, false
	}
	return o.Callbacks, true
}

// HasCallbacks returns a boolean if a field has been set.
func (o *Components) HasCallbacks() bool {
	if o != nil && !IsNil(o.Callbacks) {
		return true
	}

	return false
}

// SetCallbacks gets a reference to the given map[string]interface{} and assigns it to the Callbacks field.
func (o *Components) SetCallbacks(v map[string]interface{}) {
	o.Callbacks = v
}

func (o Components) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Components) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.Responses) {
		toSerialize["responses"] = o.Responses
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Examples) {
		toSerialize["examples"] = o.Examples
	}
	if !IsNil(o.RequestBodies) {
		toSerialize["requestBodies"] = o.RequestBodies
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.SecuritySchemes) {
		toSerialize["securitySchemes"] = o.SecuritySchemes
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Callbacks) {
		toSerialize["callbacks"] = o.Callbacks
	}
	return toSerialize, nil
}

type NullableComponents struct {
	value *Components
	isSet bool
}

func (v NullableComponents) Get() *Components {
	return v.value
}

func (v *NullableComponents) Set(val *Components) {
	v.value = val
	v.isSet = true
}

func (v NullableComponents) IsSet() bool {
	return v.isSet
}

func (v *NullableComponents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponents(val *Components) *NullableComponents {
	return &NullableComponents{value: val, isSet: true}
}

func (v NullableComponents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
