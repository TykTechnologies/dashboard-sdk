
/*
 * Tyk Dashboard API
 *
 * ## <a name=\"introduction\"></a> Introduction  The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.  A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.  The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).  ## <a name=\"security-hierarchy\"></a> Security Hierarchy  The Dashboard API provides a more structured security layer to managing Tyk nodes.  ### Organisations, APIs and Users  With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:  * **Organisations**: All APIs are *owned* by an organisation, this is designated by the `OrgID` parameter in the API Definition. * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access). * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations. * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation. * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.  In order to use the Dashboard API, you'll need to get the `Tyk Dashboard API Access Credentials` secret from your user profile on the Dashboard UI.  The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:  ``` authorization: <your-secret> ```
 *
 * API version: 3.2.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package dashboard

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
)

// Linger please
var (
	_ context.Context
)

type AnalyticsApiService service
/*
AnalyticsApiService Analytics of API Key
It returns analytics of the endpoints of all APIs called using KEY between start and end date.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param keyHash Hash of your API key.
 * @param startDay Day of analytics to query.
 * @param startMonth Month of analytics to query.
 * @param startYear Start year of analytics to query.
 * @param endDay End date of analytics to query.
 * @param endMonth End month of analytics to query.
 * @param endYear End year of analytics to query.

*/
func (a *AnalyticsApiService) GetAnalyticsOfApiKey(ctx context.Context, keyHash string, startDay string, startMonth string, startYear string, endDay string, endMonth string, endYear string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/activity/keys/{keyHash}/{startDay}/{startMonth}/{startYear}/{EndDay}/{EndMonth}/{EndYear}"
	localVarPath = strings.Replace(localVarPath, "{"+"keyHash"+"}", fmt.Sprintf("%v", keyHash), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"startDay"+"}", fmt.Sprintf("%v", startDay), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"startMonth"+"}", fmt.Sprintf("%v", startMonth), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"startYear"+"}", fmt.Sprintf("%v", startYear), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"EndDay"+"}", fmt.Sprintf("%v", endDay), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"EndMonth"+"}", fmt.Sprintf("%v", endMonth), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"EndYear"+"}", fmt.Sprintf("%v", endYear), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
/*
AnalyticsApiService Analytics of Oauth Client ID
Returns activity of all endpoints which used OAuth client &#x60;27b35a9ed46e429eb2361e440cc4005c&#x60; between October 13th 2020 and October 14th 2020.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param oAuthClientID OAuthClientID
 * @param startDay Day of analytics to query.
 * @param startMonth Month of analytics to query.
 * @param startYear Start year of analytics to query.
 * @param endDay End date of analytics to query.
 * @param endMonth End month of analytics to query.
 * @param endYear End year of analytics to query.

*/
func (a *AnalyticsApiService) GetAnalyticsOfOauthClientId(ctx context.Context, oAuthClientID string, startDay string, startMonth string, startYear string, endDay string, endMonth string, endYear string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/activity/oauthid/{OAuthClientID}/{startDay}/{startMonth}/{startYear}/{EndDay}/{EndMonth}/{EndYear}"
	localVarPath = strings.Replace(localVarPath, "{"+"OAuthClientID"+"}", fmt.Sprintf("%v", oAuthClientID), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"startDay"+"}", fmt.Sprintf("%v", startDay), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"startMonth"+"}", fmt.Sprintf("%v", startMonth), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"startYear"+"}", fmt.Sprintf("%v", startYear), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"EndDay"+"}", fmt.Sprintf("%v", endDay), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"EndMonth"+"}", fmt.Sprintf("%v", endMonth), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"EndYear"+"}", fmt.Sprintf("%v", endYear), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
